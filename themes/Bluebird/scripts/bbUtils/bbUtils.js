// Generated by CoffeeScript 1.6.2
(function() {
  window["bbUtils"] = jQuery.noConflict();

  (function($, window, document) {
    var $this, bbUtils, methods, _settings;

    $this = void 0;
    _settings = {
      version: "0.0.1"
    };
    methods = {
      init: function() {
        return console.log("jQuery: " + $.fn.jquery + ", bbUtils: " + _settings.version);
      },
      localStorage: function(options) {},
      isJsonString: function(options) {},
      rc4: function(options) {},
      version: function() {}
    };
    bbUtils = (function() {
      function bbUtils() {}

      bbUtils.prototype.localStorage = function(key, value) {
        var extended, parsedKV, unparsedKV;

        if (!localStorage) {
          return false;
        }
        if (value != null) {
          if (this.isJsonString(value)) {
            value = JSON.parse(value);
          } else {

          }
          unparsedKV = localStorage.getItem(key);
          if (unparsedKV == null) {
            unparsedKV = {};
          }
          if (this.isJsonString(unparsedKV)) {
            parsedKV = JSON.parse(unparsedKV);
          } else {
            parsedKV = unparsedKV;
          }
          extended = cj.extend({}, parsedKV, value);
          localStorage.setItem(key, JSON.stringify(extended));
          return true;
        } else {
          return JSON.parse(localStorage.getItem(key));
        }
      };

      bbUtils.prototype.isJsonString = function(str) {
        var e;

        try {
          JSON.parse(str);
        } catch (_error) {
          e = _error;
          return false;
        }
        return true;
      };

      bbUtils.prototype.rc4 = function(k, v) {
        var i, j, res, s, x, y, _i, _j, _k, _len, _ref;

        s = [];
        j = 0;
        res = '';
        for (i = _i = 0; _i <= 256; i = ++_i) {
          s[i] = i;
        }
        for (i = _j = 0; _j <= 256; i = ++_j) {
          j = (j + s[i + k.charCodeAt(i % k.length)]) % 256;
          x = s[i];
          s[i] = s[j];
          s[j] = x;
        }
        i = 0;
        j = 0;
        _ref = v.length;
        for (_k = 0, _len = _ref.length; _k < _len; _k++) {
          y = _ref[_k];
          i = (i + 1) % 256;
          j = (j + s[i]) % 256;
          x = s[i];
          s[i] = s[j];
          s[j] = x;
          res += String.fromCharCode(v.charCodeAt(y) ^ s[(s[i] + s[j]) % 256]);
        }
        return res;
      };

      return bbUtils;

    })();
    return $.each(methods, function(method) {
      console.log(method);
      return $.fn["" + method] = function() {
        if (methods[method]) {
          return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === "object" || !method) {
          return methods.init.apply(this, arguments);
        } else {
          return $.error("Method " + method + " doesn't");
        }
      };
    });
    /*$.fn.tagACInput = (method) ->
      if methods[method]
        methods[method].apply this, Array::slice.call(arguments, 1)
      else if typeof method is "object" or not method
        methods.init.apply this, arguments
      else
        $.error "Method " + method + " does not exist on jquery.tagACInput"
    */

  })(bbUtils, window, document);

  console.log(bbUtils.version);

}).call(this);
