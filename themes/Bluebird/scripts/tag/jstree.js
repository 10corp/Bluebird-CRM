// Generated by CoffeeScript 1.6.3
var Instance, jstree, setProp, _getTrees, _parseAutocomplete, _parseTree, _tree, _utils,
  __slice = [].slice,
  _this = this,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Function.prototype.property = function(prop, desc) {
  return Object.defineProperty(this.prototype, prop, desc);
};

jstree = {
  init: function(settings, view) {
    var instance, pageElements, request,
      _this = this;
    instance = new Instance();
    setProp(settings, instance);
    pageElements = instance.get("pageElements");
    view["exec"].call(this, instance);
    request = cj.when(_getTrees.getRawJSON(instance));
    request.done(function(data) {
      _getTrees.putRawJSON(data.message, instance);
      _parseTree.init(instance);
      return view["done"].call(_this, instance);
    });
    return instance;
  }
};

setProp = function() {
  var instance, k, properties, v, _i, _ref, _results;
  properties = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), instance = arguments[_i++];
  _ref = properties[0];
  _results = [];
  for (k in _ref) {
    v = _ref[k];
    _results.push(instance.set(k, v));
  }
  return _results;
};

Instance = (function() {
  function Instance(_rawData, _autocomplete, _treeNames, _trees) {
    var callAjax, dataSettings, displaySettings, onSave, pageElements,
      _this = this;
    this._rawData = _rawData;
    this._autocomplete = _autocomplete;
    this._treeNames = _treeNames;
    this._trees = _trees;
    pageElements = {
      init: 'JSTreeInit',
      wrapper: 'JSTreeContainer',
      tagHolder: ['JSTree'],
      messageHandler: ['JSMessages'],
      location: ''
    };
    onSave = false;
    dataSettings = {
      pullSets: [291, 296, 292],
      entity_id: 0
    };
    displaySettings = {
      defaultTree: 291,
      mode: 'edit',
      size: 'full',
      autocomplete: true,
      print: true,
      showActive: true,
      showStubs: false
    };
    callAjax = {
      url: 'localtagdata.json',
      dataType: 'json'
    };
    this.get = function(name) {
      var getRet;
      getRet = {};
      if ('pageElements' === name) {
        cj.extend(true, getRet, pageElements);
      }
      if ('onSave' === name) {
        return onSave;
      }
      if ('dataSettings' === name) {
        cj.extend(true, getRet, dataSettings);
      }
      if ('displaySettings' === name) {
        cj.extend(true, getRet, displaySettings);
      }
      if ('callAjax' === name) {
        cj.extend(true, getRet, callAjax);
      }
      if ('ready' === name) {
        return ready;
      }
      return getRet;
    };
    this.set = function(name, obj) {
      var ready;
      if ('pageElements' === name) {
        obj = _utils.checkForArray(pageElements, obj);
        cj.extend(true, pageElements, obj);
      }
      if ('onSave' === name) {
        onSave = obj;
      }
      if ('dataSettings' === name) {
        obj = _utils.checkForArray(dataSettings, obj);
        cj.extend(true, dataSettings, obj);
      }
      if ('displaySettings' === name) {
        obj = _utils.checkForArray(displaySettings, obj);
        cj.extend(true, displaySettings, obj);
      }
      if ('callAjax' === name) {
        obj = _utils.checkForArray(callAjax, obj);
        cj.extend(true, callAjax, obj);
      }
      if ('ready' === name) {
        return ready = obj;
      }
    };
  }

  Instance.property("rawData", {
    get: function() {
      return this._rawData;
    },
    set: function(a) {
      return this._rawData = a;
    }
  });

  Instance.property("autocomplete", {
    get: function() {
      return this._autocomplete;
    },
    set: function(a) {
      return this._autocomplete = a;
    }
  });

  Instance.property("treeNames", {
    get: function() {
      return this._treeNames;
    },
    set: function(a) {
      return this._treeNames = a;
    }
  });

  Instance.property("trees", {
    get: function() {
      return this._trees;
    },
    set: function(a) {
      return this._trees = a;
    }
  });

  return Instance;

})();

_utils = {
  removeDupFromExtend: function(obj) {
    return cj.each(obj, function(k, v) {
      if (cj.isPlainObject(v)) {
        _this.removeDupFromExtend(v);
      }
      return v = bbUtils.uniqueAry(v);
    });
  },
  checkForArray: function(propDefault, obj) {
    return cj.each(obj, function(k, def) {
      var a, ar, b, c, i, _i, _j, _len, _len1;
      if (cj.isArray(def) && cj.isArray(propDefault[k])) {
        a = propDefault[k].sort();
        b = def.sort();
        for (i = _i = 0, _len = a.length; _i < _len; i = ++_i) {
          c = a[i];
          if (c !== b[i]) {
            for (_j = 0, _len1 = def.length; _j < _len1; _j++) {
              ar = def[_j];
              if (propDefault[k].indexOf(ar) < 0) {
                propDefault[k].push(ar);
              }
            }
          }
        }
        return obj[k] = propDefault[k];
      }
    });
  },
  textWrap: function(text, length) {
    var a, numberOfSegs, rx, seg, shouldRet, toRet, _i;
    numberOfSegs = Math.ceil(text.length / length);
    toRet = "";
    shouldRet = false;
    rx = /\s|-| |\u00A0|\u8209|\r|\n/g;
    for (a = _i = 0; 0 <= numberOfSegs ? _i <= numberOfSegs : _i >= numberOfSegs; a = 0 <= numberOfSegs ? ++_i : --_i) {
      seg = text.slice(length * a, length * (a + 1));
      if (!seg.match(rx) && seg.length >= length) {
        shouldRet = true;
        toRet += "" + seg + " ";
      } else {
        toRet += "" + seg;
      }
    }
    if (shouldRet) {
      return toRet;
    }
    return text;
  },
  hyphenize: function(text) {
    return text.replace(" ", "-");
  }
};

_getTrees = {
  getRawJSON: function(instance) {
    return cj.ajax(instance.get('callAjax'));
  },
  putRawJSON: function(data, instance) {
    var rawData;
    rawData = {};
    cj.each(data, function(i, tID) {
      var _ref;
      if (_ref = parseFloat(tID.id), __indexOf.call(instance.get('dataSettings').pullSets, _ref) >= 0) {
        return rawData[tID.id] = {
          'name': tID.name,
          'children': tID.children
        };
      }
    });
    return instance.rawData = rawData;
  }
};

_tree = {
  blacklist: function(id) {
    if (id === 292) {
      return true;
    }
    return false;
  }
};

_parseTree = {
  init: function(instance) {
    var k, o, _ref;
    _ref = instance.rawData;
    for (k in _ref) {
      o = _ref[k];
      _parseAutocomplete["type"] = "" + k;
      this.treeNames[k] = o.name;
      if (o.children.length > 0 && !(_tree.blacklist(parseFloat(k)))) {
        _parseAutocomplete.deepIterate(o.children, _parseAutocomplete.pre, _parseAutocomplete.post);
      }
    }
    instance.autocomplete = this.ac;
    return instance.treeNames = this.treeNames;
  },
  ac: [],
  treeNames: {}
};

_parseAutocomplete = {
  pre: function(obj) {
    var hasChildren, item;
    _parseAutocomplete.level++;
    hasChildren = false;
    if (obj.children.length > 0) {
      hasChildren = true;
    }
    item = {
      "name": obj.name,
      "id": obj.id,
      "parent": obj.parent_id,
      "type": _parseAutocomplete.type,
      "children": hasChildren,
      "description": obj.description,
      "is_reserved": obj.is_reserved,
      "created_id": obj.created_id,
      "created_date": obj.created_date,
      "created_name": obj.created_display_name,
      "level": _parseAutocomplete.level
    };
    return _parseTree.ac.push(item);
  },
  post: function(obj) {
    return _parseAutocomplete.level--;
  },
  level: 0,
  deepIterate: function(obj, before, after) {
    var o, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = obj.length; _i < _len; _i++) {
      o = obj[_i];
      before(o);
      if (o.children.length > 0) {
        this.deepIterate(o.children, before, after);
      }
      _results.push(after(o));
    }
    return _results;
  }
};

window.jstree = jstree;
