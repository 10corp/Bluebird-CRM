// Generated by CoffeeScript 1.6.3
(function() {
  var Instance, Node, Tree, View, jstree, setProp, _getTrees, _parseAutocomplete, _parseTree, _tree, _treeUtils, _utils,
    __slice = [].slice,
    _this = this,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  jstree = {
    init: function(settings, view) {
      var instance, pageElements, request,
        _this = this;
      instance = new Instance();
      setProp(settings, instance);
      pageElements = instance.get("pageElements");
      view["exec"].call(this, instance);
      request = cj.when(_getTrees.getRawJSON(instance));
      request.done(function(data) {
        _getTrees.putRawJSON(data.message, instance);
        _parseTree.init(instance);
        return view["done"].call(_this, instance);
      });
      return instance;
    }
  };

  setProp = function() {
    var instance, k, properties, v, _i, _ref, _results;
    properties = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), instance = arguments[_i++];
    _ref = properties[0];
    _results = [];
    for (k in _ref) {
      v = _ref[k];
      _results.push(instance.set(k, v));
    }
    return _results;
  };

  Instance = (function() {
    function Instance(_rawData, _autocomplete, _treeNames, _trees) {
      var callAjax, dataSettings, displaySettings, onSave, pageElements,
        _this = this;
      this._rawData = _rawData;
      this._autocomplete = _autocomplete;
      this._treeNames = _treeNames;
      this._trees = _trees;
      pageElements = {
        init: 'JSTreeInit',
        wrapper: 'JSTreeContainer',
        tagHolder: ['JSTree'],
        messageHandler: ['JSMessages'],
        location: ''
      };
      onSave = false;
      dataSettings = {
        pullSets: [291, 296, 292],
        entity_id: 0
      };
      displaySettings = {
        defaultTree: 291,
        mode: 'edit',
        size: 'full',
        autocomplete: true,
        print: true,
        showActive: true,
        showStubs: false
      };
      callAjax = {
        url: 'localtagdata.json',
        dataType: 'json'
      };
      this.get = function(name) {
        var getRet;
        getRet = {};
        if ('pageElements' === name) {
          cj.extend(true, getRet, pageElements);
        }
        if ('onSave' === name) {
          return onSave;
        }
        if ('dataSettings' === name) {
          cj.extend(true, getRet, dataSettings);
        }
        if ('displaySettings' === name) {
          cj.extend(true, getRet, displaySettings);
        }
        if ('callAjax' === name) {
          cj.extend(true, getRet, callAjax);
        }
        if ('ready' === name) {
          return ready;
        }
        return getRet;
      };
      this.set = function(name, obj) {
        var ready;
        if ('pageElements' === name) {
          obj = _utils.checkForArray(pageElements, obj);
          cj.extend(true, pageElements, obj);
        }
        if ('onSave' === name) {
          onSave = obj;
        }
        if ('dataSettings' === name) {
          obj = _utils.checkForArray(dataSettings, obj);
          cj.extend(true, dataSettings, obj);
        }
        if ('displaySettings' === name) {
          obj = _utils.checkForArray(displaySettings, obj);
          cj.extend(true, displaySettings, obj);
        }
        if ('callAjax' === name) {
          obj = _utils.checkForArray(callAjax, obj);
          cj.extend(true, callAjax, obj);
        }
        if ('ready' === name) {
          return ready = obj;
        }
      };
    }

    Instance.property("rawData", {
      get: function() {
        return this._rawData;
      },
      set: function(a) {
        return this._rawData = a;
      }
    });

    Instance.property("autocomplete", {
      get: function() {
        return this._autocomplete;
      },
      set: function(a) {
        return this._autocomplete = a;
      }
    });

    Instance.property("treeNames", {
      get: function() {
        return this._treeNames;
      },
      set: function(a) {
        return this._treeNames = a;
      }
    });

    Instance.property("trees", {
      get: function() {
        return this._trees;
      },
      set: function(a) {
        return this._trees = a;
      }
    });

    return Instance;

  })();

  _utils = {
    removeDupFromExtend: function(obj) {
      return cj.each(obj, function(k, v) {
        if (cj.isPlainObject(v)) {
          _this.removeDupFromExtend(v);
        }
        return v = bbUtils.uniqueAry(v);
      });
    },
    checkForArray: function(propDefault, obj) {
      return cj.each(obj, function(k, def) {
        var a, ar, b, c, i, _i, _j, _len, _len1;
        if (cj.isArray(def) && cj.isArray(propDefault[k])) {
          a = propDefault[k].sort();
          b = def.sort();
          for (i = _i = 0, _len = a.length; _i < _len; i = ++_i) {
            c = a[i];
            if (c !== b[i]) {
              for (_j = 0, _len1 = def.length; _j < _len1; _j++) {
                ar = def[_j];
                if (propDefault[k].indexOf(ar) < 0) {
                  propDefault[k].push(ar);
                }
              }
            }
          }
          return obj[k] = propDefault[k];
        }
      });
    },
    textWrap: function(text, length) {
      var a, numberOfSegs, rx, seg, shouldRet, toRet, _i;
      numberOfSegs = Math.ceil(text.length / length);
      toRet = "";
      shouldRet = false;
      rx = /\s|-| |\u00A0|\u8209|\r|\n/g;
      for (a = _i = 0; 0 <= numberOfSegs ? _i <= numberOfSegs : _i >= numberOfSegs; a = 0 <= numberOfSegs ? ++_i : --_i) {
        seg = text.slice(length * a, length * (a + 1));
        if (!seg.match(rx) && seg.length >= length) {
          shouldRet = true;
          toRet += "" + seg + " ";
        } else {
          toRet += "" + seg;
        }
      }
      if (shouldRet) {
        return toRet;
      }
      return text;
    },
    hyphenize: function(text) {
      return text.replace(" ", "-");
    }
  };

  _getTrees = {
    getRawJSON: function(instance) {
      return cj.ajax(instance.get('callAjax'));
    },
    putRawJSON: function(data, instance) {
      var rawData;
      rawData = {};
      cj.each(data, function(i, tID) {
        var _ref;
        if (_ref = parseFloat(tID.id), __indexOf.call(instance.get('dataSettings').pullSets, _ref) >= 0) {
          return rawData[tID.id] = {
            'name': tID.name,
            'children': tID.children
          };
        }
      });
      return instance.rawData = rawData;
    }
  };

  _tree = {
    blacklist: function(id) {
      if (id === 292) {
        return true;
      }
      return false;
    }
  };

  _parseTree = {
    init: function(instance) {
      var k, o, _ref;
      _ref = instance.rawData;
      for (k in _ref) {
        o = _ref[k];
        _parseAutocomplete["type"] = "" + k;
        this.treeNames[k] = o.name;
        if (o.children.length > 0 && !(_tree.blacklist(parseFloat(k)))) {
          _parseAutocomplete.deepIterate(o.children, _parseAutocomplete.pre, _parseAutocomplete.post);
        }
      }
      instance.autocomplete = this.ac;
      return instance.treeNames = this.treeNames;
    },
    ac: [],
    treeNames: {}
  };

  _parseAutocomplete = {
    pre: function(obj) {
      var hasChildren, item;
      _parseAutocomplete.level++;
      hasChildren = false;
      if (obj.children.length > 0) {
        hasChildren = true;
      }
      item = {
        "name": obj.name,
        "id": obj.id,
        "parent": obj.parent_id,
        "type": _parseAutocomplete.type,
        "children": hasChildren,
        "description": obj.description,
        "is_reserved": obj.is_reserved,
        "created_id": obj.created_id,
        "created_date": obj.created_date,
        "created_name": obj.created_display_name,
        "level": _parseAutocomplete.level
      };
      return _parseTree.ac.push(item);
    },
    post: function(obj) {
      return _parseAutocomplete.level--;
    },
    level: 0,
    deepIterate: function(obj, before, after) {
      var o, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = obj.length; _i < _len; _i++) {
        o = obj[_i];
        before(o);
        if (o.children.length > 0) {
          this.deepIterate(o.children, before, after);
        }
        _results.push(after(o));
      }
      return _results;
    }
  };

  window.jstree = jstree;

  window.jstree["views"] = {
    exec: function(instance) {
      console.log("exec");
      return this.view = new View(instance);
    },
    done: function(instance) {
      var a, b, trees, _i, _len, _ref;
      trees = {};
      _ref = instance.treeNames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        a = _ref[_i];
        b = _treeUtils.selectByTree(instance.autocomplete, a);
        trees[a] = new Tree(b, a);
      }
      this.view.trees = trees;
      this.view.init();
      return console.log("done");
    },
    view: {}
  };

  View = (function() {
    View.property("trees", {
      get: function() {
        return this._trees;
      },
      set: function(a) {
        return this._trees = a;
      }
    });

    function View(instance) {
      this.instance = instance;
      this.writeContainers();
      this.displaySettings = this.instance.get("displaySettings");
    }

    View.prototype.writeContainers = function() {
      this.formatPageElements();
      return this.addClassesToElement();
    };

    View.prototype.addClassesToElement = function() {
      this.cjInitHolderId.html("<div class='" + this.addClassHolderString + "'></div>");
      this.cjInitHolderId.prepend(this.menuHtml(this.menuName));
      this.cjInitHolderId.append(this.dataHolderHtml);
      this.cjInitHolderId.append(this.tokenHolderHtml(this.tokenHolder));
      return this.cjInitHolderId.removeClass(this.initHolderId).attr("id", this.addIdWrapperString);
    };

    View.prototype.formatPageElements = function() {
      var displayElements, i, pageElements, selector, _i, _len, _ref, _ref1;
      pageElements = this.instance.get('pageElements');
      displayElements = this.instance.get('displaySettings');
      _ref = ["", ""], this.tagHolderSelector = _ref[0], this.tagWrapperSelector = _ref[1];
      this.menuName = {
        menu: "",
        top: "",
        tabs: "",
        bottom: "",
        autocomplete: "",
        settings: ""
      };
      this.tokenHolder = {
        tokenHolder: "",
        options: "",
        body: "",
        resize: "",
        left: ""
      };
      this.addIdWrapperString = pageElements.wrapper;
      this.addBoxSizing = pageElements.size;
      this.addClassHolderString = pageElements.tagHolder;
      this.initHolderId = pageElements.init;
      this.cjInitHolderId = cj("." + this.initHolderId);
      this.addClassHolderString = this.ifisarrayjoin(this.addClassHolderString);
      _ref1 = pageElements.tagHolder;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        selector = _ref1[i];
        selector = selector.replace(" ", "-");
        this.menuName = this.concatOnObj(this.menuName, selector);
        this.tokenHolder = this.concatOnObj(this.tokenHolder, selector);
        this.tagHolderSelector = this.tagHolderSelector.concat("." + selector);
      }
      return this.tagWrapperSelector = this.tagWrapperSelector.concat("#" + pageElements.wrapper);
    };

    View.prototype.separateSizeElements = function(el) {
      var a, b, classNames, _i, _len;
      el.replace(/\./, "");
      el.replace(/#/, "");
      classNames = el.split(" ");
      for (b = _i = 0, _len = classNames.length; _i < _len; b = ++_i) {
        a = classNames[b];
        el += "." + b;
      }
      return el;
    };

    View.prototype.ifisarrayjoin = function(toJoin) {
      if (cj.isArray(toJoin)) {
        return toJoin = toJoin.join(" ");
      }
    };

    View.prototype.concatOnObj = function(obj, selector, classOrId) {
      var k, v;
      if (classOrId == null) {
        classOrId = ".";
      }
      for (k in obj) {
        v = obj[k];
        if (k.substr(0, 3) === "cj_") {
          break;
        }
        if (typeof obj["cj_" + k] === "undefined") {
          obj["cj_" + k] = "";
        }
        obj["cj_" + k] = obj["cj_" + k].concat("" + classOrId + selector + "-" + k);
        obj[k] = obj[k].concat("" + selector + "-" + k + " ");
      }
      return obj;
    };

    View.prototype.getCJQsaves = function() {
      this.cjTagWrapperSelector = cj(this.tagWrapperSelector);
      this.cjTagHolderSelector = cj(this.tagHolderSelector);
      this.cjInstanceSelector = cj(this.tagWrapperSelector.concat(" " + this.tagHolderSelector));
      this.cjTabs = cj(this.menuName.cj_tabs);
      return console.log(this.menuName.cj_tabs);
    };

    View.prototype.menuHtml = function(name) {
      return "      <div class='" + name.menu + "'>       <div class='" + name.top + "'>        <div class='" + name.tabs + "'></div>        <div class='" + name.settings + "'></div>       </div>       <div class='" + name.bottom + "'>        <div class='" + name.autocomplete + "'>         <input type='text' id='JSTree-ac'>        </div>        <div class='" + name.settings + "'></div>       </div>      </div>    ";
    };

    View.prototype.tokenHolderHtml = function(name) {
      return "        <div class='" + name.tokenHolder + "'>         <div class='" + name.resize + "'></div>         <div class='" + name.body + "'>          <div class='" + name.left + "'></div>          <div class='" + name.options + "'></div>         </div>        </div>      ";
    };

    View.prototype.dataHolderHtml = function() {
      return "<div id='JSTree-data' style='display:none'></div>";
    };

    View.prototype.init = function() {
      var k, locals, tabName, v, _ref, _results;
      this.getCJQsaves();
      locals = {
        "menu": this.menuName.cj_tabs,
        "top": this.displaySettings.defaultTree
      };
      this.setActiveTree(this.displaySettings.defaultTree);
      _ref = this.instance.treeNames;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push(tabName = this.createTreeTabs(v));
      }
      return _results;
    };

    View.prototype.setActiveTree = function(id) {
      return cj(".JSTree .top-" + id).addClass("active");
    };

    View.prototype.createTreeTabs = function(tabName, isHidden) {
      var output, style, tabClass;
      if (isHidden == null) {
        isHidden = false;
      }
      if (isHidden) {
        style = "style='display:none'";
      } else {
        style = "";
      }
      tabClass = (_utils.hyphenize(tabName)).toLowerCase();
      output = "<div class='tab-" + tabClass + "' " + style + ">" + tabName + "</div>";
      return this.cjTabs.append(output);
    };

    return View;

  })();

  Tree = (function() {
    Tree.prototype.domList = {};

    Tree.prototype.nodeList = {};

    Tree.prototype.tabName = "";

    function Tree(tagList, tagId) {
      this.tagList = tagList;
      this.tagId = tagId;
      this.buildTree();
    }

    Tree.prototype.buildTree = function() {
      this.domList = cj();
      this.domList = this.domList.add("<div class='top-" + this.tagId + " tagContainer'></div>");
      return this.iterate(this.tagList);
    };

    Tree.prototype.iterate = function(ary) {
      var cjTagList, kNode, node, _i, _len;
      cjTagList = cj(this.domList);
      console.log(cjTagList);
      for (_i = 0, _len = ary.length; _i < _len; _i++) {
        node = ary[_i];
        this.nodeList[node.id] = kNode = new Node(node);
        if (node.parent === this.tagId) {
          cjTagList.append(kNode.html);
        } else {
          cjTagList.find("dl#tagDropdown_" + kNode.parent).append(kNode.html);
        }
      }
      return cjTagList.appendTo(".JSTree");
    };

    return Tree;

  })();

  _treeUtils = {
    selectByParent: function(list, parent) {
      var b, childList, _i, _len;
      childList = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        b = list[_i];
        if (b.parent === parent) {
          childList.push(b);
        }
      }
      return childList;
    },
    selectByTree: function(list, tree) {
      var b, treeList, _i, _len;
      treeList = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        b = list[_i];
        if (b.type === tree) {
          treeList.push(b);
        }
      }
      return treeList;
    }
  };

  Node = (function() {
    function Node(node) {
      this.data = node;
      this.parent = node.parent;
      this.hasDesc = "";
      this.description = node.description;
      this.descLength(node.description);
      this.id = node.id;
      this.children = node.children;
      this.name = node.name;
      this.html = this.html(node);
      return this;
    }

    Node.prototype.descLength = function(description) {
      this.description = description;
      if (this.description != null) {
        if (description.length > 0) {
          this.hasDesc = "description";
        }
        if (this.description.length > 0 && this.description.length <= 80) {
          this.hasDesc += " shortdescription";
        }
        if (this.description.length > 160) {
          this.hasDesc = "longdescription";
        }
        if (this.description.length > 80) {
          return this.description = _utils.textWrap(this.description, 80);
        }
      }
    };

    Node.prototype.html = function(node) {
      var html, treeButton;
      if (this.parent > 0) {
        treeButton = "treeButton";
      } else {
        treeButton = "";
      }
      if (parseFloat(node.is_reserved) !== 0) {
        this.reserved = true;
      } else {
        this.reserved = false;
      }
      html = "<dt class='lv-" + node.level + "' id='tagLabel_" + node.id + "' data-tagid='" + node.id + "' data-name='" + node.name + "' data-parentid='" + node.parent + "'>";
      html += "              <div class='tag'>                <div class='ddControl " + treeButton + "'></div>                <span class='name'>" + node.name + "</span>            ";
      if (this.hasDesc.length > 0) {
        html += "                <div class='description'>" + this.description + "</div>            ";
      }
      html += "              </div>              <div class='transparancyBox type-" + node.type + "'></div>            ";
      html += "</dt>";
      html += "              <dl class='lv-" + node.level + "' id='tagDropdown_" + node.id + "' data-name='" + node.name + "'></dl>            ";
      return html;
    };

    return Node;

  })();

}).call(this);
