// Generated by CoffeeScript 1.6.3
var Node, Tree, View;

Tree = (function() {
  function Tree() {}

  return Tree;

})();

Node = (function() {
  function Node() {}

  return Node;

})();

window.jstree["views"] = {
  exec: function(params) {
    console.log("exec");
    return this.view = new View(params);
  },
  done: function(params) {
    return console.log("done");
  }
};

View = (function() {
  function View(instance) {
    this.instance = instance;
    this.writeContainers();
  }

  View.prototype.writeContainers = function() {
    console.log(this.instance);
    this.formatPageElements();
    return this.addClassesToElement();
  };

  View.prototype.addClassesToElement = function() {
    this.cjInitHolderId.html("<div class='" + this.addClassHolderString + "'></div>");
    this.cjInitHolderId.prepend(this.menuHtml(this.menuName));
    this.cjInitHolderId.append(this.dataHolderHtml);
    this.cjInitHolderId.append(this.tokenHolderHtml(this.tokenHolder));
    return this.cjInitHolderId.removeClass(this.initHolderId).attr("id", this.addIdWrapperString);
  };

  View.prototype.formatPageElements = function() {
    var displayElements, i, pageElements, selector, _i, _len, _ref, _ref1;
    pageElements = this.instance.get('pageElements');
    displayElements = this.instance.get('displaySettings');
    _ref = ["", ""], this.tagHolderSelector = _ref[0], this.tagWrapperSelector = _ref[1];
    this.menuName = {
      menu: "",
      top: "",
      tabs: "",
      bottom: "",
      autocomplete: "",
      settings: ""
    };
    this.tokenHolder = {
      tokenHolder: "",
      options: "",
      body: "",
      resize: "",
      left: ""
    };
    this.addIdWrapperString = pageElements.wrapper;
    this.addBoxSizing = pageElements.size;
    this.addClassHolderString = pageElements.tagHolder;
    this.initHolderId = pageElements.init;
    this.cjInitHolderId = cj("." + this.initHolderId);
    this.addClassHolderString = this.ifisarrayjoin(this.addClassHolderString);
    _ref1 = pageElements.tagHolder;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      selector = _ref1[i];
      selector = selector.replace(" ", "-");
      this.menuName = this.concatOnObj(this.menuName, selector);
      this.tokenHolder = this.concatOnObj(this.tokenHolder, selector);
      this.tagHolderSelector = this.tagHolderSelector.concat("." + selector);
    }
    return this.tagWrapperSelector = this.tagWrapperSelector.concat("#" + pageElements.wrapper);
  };

  View.prototype.separateSizeElements = function(el) {
    var a, b, classNames, _i, _len;
    el.replace(/\./, "");
    el.replace(/#/, "");
    classNames = el.split(" ");
    for (b = _i = 0, _len = classNames.length; _i < _len; b = ++_i) {
      a = classNames[b];
      el += "." + b;
    }
    return el;
  };

  View.prototype.ifisarrayjoin = function(toJoin) {
    if (cj.isArray(toJoin)) {
      return toJoin = toJoin.join(" ");
    }
  };

  View.prototype.concatOnObj = function(obj, selector, classOrId) {
    var k, v;
    if (classOrId == null) {
      classOrId = ".";
    }
    for (k in obj) {
      v = obj[k];
      if (k.substr(0, 3) === "cj_") {
        break;
      }
      if (typeof obj["cj_" + k] === "undefined") {
        obj["cj_" + k] = "";
      }
      obj["cj_" + k] = obj["cj_" + k].concat("" + classOrId + selector + "-" + k);
      obj[k] = obj[k].concat("" + selector + "-" + k + " ");
    }
    return obj;
  };

  View.prototype.getCJQsaves = function() {
    this.cjTagWrapperSelector = cj(this.tagWrapperSelector);
    this.cjTagHolderSelector = cj(this.tagHolderSelector);
    this.cjInstanceSelector = cj(this.tagWrapperSelector.concat(" " + this.tagHolderSelector));
    return this.cjTabs = cj(this.menuName.cj_tabs);
  };

  View.prototype.menuHtml = function(name) {
    return "      <div class='" + name.menu + "'>       <div class='" + name.top + "'>        <div class='" + name.tabs + "'></div>        <div class='" + name.settings + "'></div>       </div>       <div class='" + name.bottom + "'>        <div class='" + name.autocomplete + "'>         <input type='text' id='JSTree-ac'>        </div>        <div class='" + name.settings + "'></div>       </div>      </div>    ";
  };

  View.prototype.tokenHolderHtml = function(name) {
    return "        <div class='" + name.tokenHolder + "'>         <div class='" + name.resize + "'></div>         <div class='" + name.body + "'>          <div class='" + name.left + "'></div>          <div class='" + name.options + "'></div>         </div>        </div>      ";
  };

  View.prototype.dataHolderHtml = function() {
    return "<div id='JSTree-data' style='display:none'></div>";
  };

  return View;

})();
