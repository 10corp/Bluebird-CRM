// Generated by CoffeeScript 1.6.3
var Action, ActivityLog, Autocomplete, Buttons, Label, Node, Resize, Settings, Tree, View, _descWidths, _openTags, _treeUtils, _treeVisibility;

window.jstree["views"] = {
  exec: function(instance) {
    this.view = new View(instance);
    return this.menuSettings = new Settings(instance, this.view);
  },
  done: function(instance) {
    var a, b, resize, trees, v, _ref;
    trees = {};
    _ref = instance.treeNames;
    for (a in _ref) {
      v = _ref[a];
      b = _treeUtils.selectByTree(instance.autocomplete, a);
      trees[a] = new Tree(b, a);
    }
    this.view.trees = trees;
    this.view.init();
    if (this.view.settings.tall && !this.view.settings.lock) {
      resize = new Resize;
      return resize.addResize(instance, this.view);
    } else {
      return this.view.cj_tokenHolder.resize.remove();
    }
  },
  changeEntity: function(entity_id) {
    this.view = jstree.view;
    this.view.entity_id = entity_id;
    return this.view.applyTagged();
  }
};

View = (function() {
  View.property("trees", {
    get: function() {
      return this._trees;
    },
    set: function(a) {
      return this._trees = a;
    }
  });

  View.prototype.selectors = {
    tagBox: "",
    container: "",
    containerClass: "",
    initHolder: "",
    byHeightWidth: "",
    dropdown: "",
    defaultTree: "",
    activeTree: "",
    isFiltered: false,
    data: "data",
    idedKeys: ["container", "data"],
    addPrefix: ["dropdown", "data"]
  };

  View.prototype.menuSelectors = {
    menu: "menu",
    top: "top",
    tabs: "tabs",
    bottom: "bottom",
    autocomplete: "autocomplete",
    settings: "settings",
    addPrefix: ["menu", "tabs", "top", "bottom", "autocomplete", "settings"]
  };

  View.prototype.tokenHolder = {
    box: "tokenHolder",
    options: "options",
    body: "tokenBody",
    resize: "resize",
    left: "left",
    addPrefix: ["box", "options", "body", "resize", "left"]
  };

  View.prototype.settings = {
    tall: true,
    wide: true,
    edit: false,
    tagging: false,
    print: true,
    lock: false
  };

  View.prototype.entity_id = 0;

  View.prototype.entityList = [];

  View.prototype.defaultPrefix = "JSTree";

  View.prototype.prefixes = [];

  View.prototype.defaultTree = 0;

  View.prototype.descWidths = {
    normal: 75,
    long: 150
  };

  function View(instance) {
    this.instance = instance;
    this.writeContainers();
  }

  View.prototype.applyTagged = function() {
    var _this = this;
    return this.instance.getEntity(this.entity_id, function(tags) {
      if (_this.entityList.length > 0) {
        _this.removeAllTagsFromEntity();
      }
      _this.entityList = tags;
      _this.applyTaggedKWIC();
      return _this.applyTaggedPositions();
    });
  };

  View.prototype.removeAllTagsFromEntity = function() {
    var cjDTs;
    cjDTs = this.cj_selectors.tagBox.find("dt");
    cjDTs.find("dt").removeClass("shaded").removeClass("shadedChildren");
    return cjDTs.find("dt input.checkbox").prop("checked", false);
  };

  View.prototype.applyTaggedKWIC = function(filter) {
    var cjDTs, findList, i, _i, _len, _ref,
      _this = this;
    if (filter == null) {
      filter = "";
    }
    findList = [];
    _ref = this.entityList;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      findList.push("" + filter + " #tagLabel_" + i);
    }
    cjDTs = this.cj_selectors.tagBox.find(findList.join(","));
    cjDTs.addClass("shaded");
    return cj.each(cjDTs, function(i, DT) {
      cj(DT).find(".fCB input.checkbox").prop("checked", true);
      return _this.hasTaggedChildren(cj(DT));
    });
  };

  View.prototype.findPositionLocalMatch = function(cjDT) {
    var a, b, name, position, _ref, _results;
    name = cjDT.find(".tag .name").text;
    _ref = this.instance.positionList;
    _results = [];
    for (a in _ref) {
      b = _ref[a];
      name = _utils.removePositionTextFromBill(cjDT.name);
      _results.push(position = cjDT.data("position"));
    }
    return _results;
  };

  View.prototype.applyTaggedPositions = function() {
    var a, b, cjDTs, iO, posList, trees, _ref;
    posList = [];
    trees = this.trees;
    _ref = this.instance.positionList;
    for (a in _ref) {
      b = _ref[a];
      iO = this.entityList.indexOf("" + b.id);
      if (iO > -1) {
        posList.push(b);
      }
    }
    if (posList.length > 0) {
      this.cj_selectors.tagBox.find(".top-292").remove();
      trees[292] = new Tree(posList, 292);
      if (this.cj_menuSelectors.tabs.find(".tab-positions").hasClass("active")) {

      } else {
        this.cj_selectors.tagBox.find(".top-292").css("display", "none");
      }
      new Buttons(this, ".top-292");
      cjDTs = this.cj_selectors.tagBox.find(".top-292 dt");
      cjDTs.addClass("shaded");
      cjDTs.find(".fCB input.checkbox").prop("checked", true);
      return this.trees = trees;
    }
  };

  View.prototype.writeContainers = function() {
    var height, tagBox;
    this.formatPageElements();
    this.createSelectors();
    tagBox = new Resize;
    if (tagBox != null) {
      if (tagBox.height === 0) {
        this.setDescWidths(false, void 0);
      } else {
        this.setDescWidths();
      }
    }
    if (this.settings.tall) {
      if (tagBox != null) {
        if (tagBox.height > 0) {
          height = " style='height:" + tagBox.height + "px'";
          return this.addClassesToElement(height);
        } else {
          return this.buildDropdown();
        }
      } else {
        height = "";
        return this.addClassesToElement(height);
      }
    } else {
      return this.buildDropdown();
    }
  };

  View.prototype.setDescWidths = function(tall, wide) {
    if (tall == null) {
      tall = this.settings.tall;
    }
    if (wide == null) {
      wide = this.settings.wide;
    }
    if (tall) {
      if (wide) {
        _descWidths.normal = 75;
        return _descWidths.long = 150;
      } else {
        _descWidths.normal = 38;
        return _descWidths.long = 38;
      }
    } else {
      if (wide) {
        _descWidths.normal = 70;
        return _descWidths.long = 140;
      } else {
        _descWidths.normal = 38;
        return _descWidths.long = 38;
      }
    }
  };

  View.prototype.buildDropdown = function() {
    this.cj_selectors.initHolder.html("<div class='" + this.selectors.tagBox + " dropdown'></div><div class='JSTree-overlay'></div>");
    this.cj_selectors.initHolder.prepend(this.menuHtml(this.menuSelectors));
    this.cj_selectors.initHolder.append(this.dataHolderHtml());
    this.cj_selectors.initHolder.append(this.tokenHolderHtml(this.tokenHolder));
    return this.cj_selectors.initHolder.removeClass(this.selectors.initHolder).attr("id", this.selectors.container).addClass(this.selectors.containerClass);
  };

  View.prototype.addClassesToElement = function(height) {
    this.cj_selectors.initHolder.html("<div class='" + this.selectors.tagBox + "' " + height + "></div><div class='JSTree-overlay'></div>");
    this.cj_selectors.initHolder.prepend(this.menuHtml(this.menuSelectors));
    this.cj_selectors.initHolder.append(this.dataHolderHtml());
    this.cj_selectors.initHolder.append(this.tokenHolderHtml(this.tokenHolder));
    return this.cj_selectors.initHolder.removeClass(this.selectors.initHolder).attr("id", this.selectors.container).addClass(this.selectors.containerClass);
  };

  View.prototype.formatPageElements = function() {
    var dataSettings, displaySettings, pageElements, v, _i, _len, _ref;
    pageElements = this.instance.get('pageElements');
    displaySettings = this.instance.get('displaySettings');
    dataSettings = this.instance.get('dataSettings');
    this.selectors.container = pageElements.wrapper.shift();
    this.selectors.containerClass = pageElements.wrapper.join(" ");
    this.selectors.tagBox = pageElements.tagHolder.join(" ");
    this.menuSelectors.tabs = pageElements.tabLocation;
    this.menuSelectors.autocomplete = pageElements.autocomplete;
    this.selectors.dropdown = pageElements.tagDropdown;
    this.selectors.initHolder = pageElements.init;
    this.entity_id = dataSettings.entity_id;
    this.settings = displaySettings;
    this.settingCollection = ["settings", "menuSelectors", "tokenHolder", "selectors"];
    _ref = pageElements.tagHolder;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      this.prefixes.push(v);
    }
    this.joinPrefix();
    this.selectors.byHeightWidth = this.setByHeightWidth();
    if (!this.settings.wide) {
      return this.selectors.containerClass += " narrow";
    }
  };

  View.prototype.joinPrefix = function() {
    var a, i, k, name, o, v, _i, _len, _ref, _results;
    _ref = this.settingCollection;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      _results.push((function() {
        var _j, _len1, _ref1, _ref2, _results1;
        _ref1 = this["" + v];
        _results1 = [];
        for (k in _ref1) {
          o = _ref1[k];
          if (typeof o !== "string" || o.length === 0) {
            continue;
          }
          if (this["" + v].idedKeys != null) {
            if (this["" + v].idedKeys.indexOf(k) >= 0) {
              if (this["" + v].addPrefix != null) {
                if (this["" + v].addPrefix.indexOf(k) >= 0) {
                  this["" + v][k] = "" + this.prefixes[0] + "-" + o;
                  this["" + v].addPrefix.splice(this["" + v].addPrefix.indexOf(k), 1);
                }
              }
            }
          }
          if (this["" + v].addPrefix != null) {
            if (this["" + v].addPrefix.indexOf(k) >= 0) {
              name = "";
              _ref2 = this.prefixes;
              for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
                a = _ref2[i];
                name += "" + a + "-" + o;
                if (this.prefixes.length - 1 > i) {
                  name += " ";
                }
              }
              _results1.push(this["" + v][k] = name);
            } else {
              _results1.push(void 0);
            }
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  View.prototype.createSelectors = function() {
    var v, _i, _len, _ref, _results;
    _ref = this.settingCollection;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      _results.push(this.createCJfromObj(this[v], v));
    }
    return _results;
  };

  View.prototype.createCJfromObj = function(obj, name) {
    var cjed, k, selectorType, v;
    cjed = {};
    for (k in obj) {
      v = obj[k];
      if (typeof v !== "string" || v.length === 0) {
        continue;
      }
      selectorType = ".";
      if (obj.idedKeys != null) {
        if (obj["idedKeys"].indexOf(k) >= 0) {
          selectorType = "#";
        }
      }
      cjed[k] = cj("" + selectorType + (cj.trim(v).replace(/\ /g, ".")));
    }
    return this["cj_" + name] = cjed;
  };

  View.prototype.setByHeightWidth = function() {
    var ret;
    ret = "";
    if (!this.settings.wide) {
      ret += "narrow ";
    }
    if (!this.settings.tall) {
      ret += "short";
    }
    return ret;
  };

  View.prototype.menuHtml = function(name) {
    return "      <div class='" + name.menu + "'>       <div class='" + name.top + "'>        <div class='" + name.tabs + "'></div>        <div class='" + name.settings + "'></div>       </div>       <div class='" + name.bottom + "'>        <div class='" + name.autocomplete + "'>         <input type='text' id='JSTree-ac'>        </div>        <div class='" + name.settings + "'></div>       </div>      </div>    ";
  };

  View.prototype.tokenHolderHtml = function(name) {
    return "        <div class='" + name.box + "'>         <div class='" + name.resize + "'></div>         <div class='" + name.body + "'>          <div class='" + name.left + "'></div>          <div class='" + name.options + "'></div>         </div>        </div>      ";
  };

  View.prototype.dataHolderHtml = function() {
    return "<div id='JSTree-data' style='display:none'></div>";
  };

  View.prototype.init = function() {
    var ac, buttons, k, tabName, v, _ref, _ref1;
    this.createSelectors();
    _treeVisibility.currentTree = _treeVisibility.defaultTree = _treeVisibility.previousTree = this.settings.defaultTree;
    _ref = this.instance.treeNames;
    for (k in _ref) {
      v = _ref[k];
      tabName = this.createTreeTabs(v);
    }
    this.setActiveTree(this.settings.defaultTree);
    ac = new Autocomplete(this.instance, this);
    _ref1 = this.instance.treeNames;
    for (k in _ref1) {
      v = _ref1[k];
      this.createTabClick("tab-" + (this.getTabNameFromId(k, true)), k);
      if (parseInt(k) === 292) {
        this.addPositionReminderText(this.cj_selectors.tagBox.find(".top-" + k));
      }
    }
    buttons = new Buttons(this);
    return this.setTaggingOrEdit();
  };

  View.prototype.setTaggingOrEdit = function() {
    if (this.cj_selectors.tagBox.hasClass("tagging,edit")) {
      this.cj_selectors.tagBox.removeClass("tagging").removeClass("edit");
    }
    if (this.settings.edit && this.settings.tagging) {
      this.settings.tagging = false;
    }
    if (this.settings.edit) {
      this.cj_selectors.tagBox.addClass("edit");
    }
    if (this.settings.tagging) {
      this.cj_selectors.tagBox.addClass("tagging");
      return this.applyTagged();
    }
  };

  View.prototype.createTabClick = function(tabName, tabTree) {
    var _this = this;
    this.cj_menuSelectors.tabs.find("." + tabName).off("click");
    return this.cj_menuSelectors.tabs.find("." + tabName).on("click", function() {
      return _this.showTags(tabTree, tabName);
    });
  };

  View.prototype.showTags = function(currentTree, tabName, noPrev) {
    if (currentTree !== _treeVisibility.currentTree) {
      this.cj_menuSelectors.tabs.find(".tab-" + (this.getTabNameFromId(_treeVisibility.currentTree, true))).removeClass("active");
      this.cj_selectors.tagBox.removeClass("top-" + _treeVisibility.currentTree + "-active");
      this.cj_selectors.tagBox.find(".top-" + _treeVisibility.currentTree).toggle().removeClass("active");
      _treeVisibility.previousTree = _treeVisibility.currentTree;
      _treeVisibility.currentTree = currentTree;
      this.cj_menuSelectors.tabs.find(".tab-" + (this.getTabNameFromId(currentTree, true))).addClass("active");
      this.cj_selectors.tagBox.find(".top-" + currentTree).toggle().addClass("active");
      this.cj_selectors.tagBox.addClass("top-" + currentTree + "-active");
      return this.setOverlay();
    }
  };

  View.prototype.setOverlay = function() {
    var cjOverlay;
    if (this.cj_selectors.tagBox.hasClass("dropdown")) {
      cjOverlay = this.cj_selectors.container.find(".JSTree-overlay");
      cjOverlay.height(this.cj_selectors.tagBox.height());
      return cjOverlay.width(this.cj_selectors.tagBox.width());
    } else {
      cjOverlay = this.cj_selectors.container.find(".JSTree-overlay");
      cjOverlay.css("height", "100%");
      return cjOverlay.css("width", "100%");
    }
  };

  View.prototype.setActiveTree = function(id) {
    var tabName;
    tabName = this.getTabNameFromId(id, true);
    this.cj_menuSelectors.tabs.find("div").removeClass("active");
    this.cj_selectors.tagBox.find(".tagContainer").removeClass("active").css("display", "none");
    this.cj_menuSelectors.tabs.find(".tab-" + tabName).addClass("active");
    this.cj_selectors.tagBox.find(".top-" + id).addClass("active").css("display", "block");
    return this.cj_selectors.tagBox.addClass("top-" + id + "-active");
  };

  View.prototype.createTreeTabs = function(tabName, isHidden) {
    var output, style, tabClass;
    if (isHidden == null) {
      isHidden = false;
    }
    if (isHidden) {
      style = "style='display:none'";
    } else {
      style = "";
    }
    tabClass = (_utils.hyphenize(tabName)).toLowerCase();
    output = "<div class='tab-" + tabClass + "' " + style + ">" + tabName + "</div>";
    return this.cj_menuSelectors.tabs.append(output);
  };

  View.prototype.getTabNameFromId = function(id, hyphenize) {
    var treeNames;
    if (hyphenize == null) {
      hyphenize = false;
    }
    treeNames = this.instance.treeNames;
    if (!hyphenize) {
      return treeNames[id];
    }
    return _utils.hyphenize(treeNames[id]).toLowerCase();
  };

  View.prototype.getIdFromTabName = function(tabName) {
    tabName = cj.trim(tabName);
    if (tabName === "tab-issue-codes" || tabName === "issue-codes") {
      return 291;
    }
    if (tabName === "tab-keywords" || tabName === "keywords") {
      return 296;
    }
    if (tabName === "tab-positions" || tabName === "positions") {
      return 292;
    }
  };

  View.prototype.buildFilteredList = function(tags) {
    var buildList, checkAgainst, d, e, k, m, n, o, x, y, _ref;
    checkAgainst = {};
    for (m in tags) {
      n = tags[m];
      checkAgainst[m] = [];
      for (x in n) {
        y = n[x];
        checkAgainst[m].push(parseFloat(y.id));
      }
    }
    buildList = {};
    for (d in checkAgainst) {
      e = checkAgainst[d];
      buildList[d] = [];
      _ref = this.instance.autocomplete;
      for (k in _ref) {
        o = _ref[k];
        if (e.indexOf(parseFloat(o.id)) >= 0) {
          buildList[d].push(o);
        }
      }
    }
    return buildList;
  };

  View.prototype.shouldBeFiltered = false;

  View.prototype.currentWrittenTerm = "";

  View.prototype.queryLog = {
    "291": [],
    "296": [],
    "292": []
  };

  View.prototype.createQueryLog = function(term, tree) {
    var k, v, _ref;
    if (this.queryLog[tree].lastIndexOf(term) < 0) {
      this.queryLog[tree].push(term);
    }
    _ref = this.queryLog;
    for (k in _ref) {
      v = _ref[k];
      if (v.length > this.queryLog[tree].length) {
        return false;
      }
    }
    return true;
  };

  View.prototype.writeFilteredList = function(list, term, hits) {
    var a, activeTree, b, cjDTs, delay, iO, k, latestQuery, t, v, _ref,
      _this = this;
    if (hits == null) {
      hits = {};
    }
    if (!this.shouldBeFiltered) {
      return false;
    }
    for (k in hits) {
      v = hits[k];
      latestQuery = this.createQueryLog(term, "" + k);
      if (!latestQuery) {
        return false;
      }
    }
    if (!this.cj_selectors.tagBox.hasClass("filtered")) {
      this.cj_selectors.tagBox.addClass("filtered");
    }
    cj.each(this.cj_selectors.tagBox.find(".tagContainer"), function(i, tree) {
      var cjTree;
      cjTree = cj(tree);
      if (!cjTree.hasClass("filtered")) {
        cjTree.remove();
      }
      if (cjTree.data("term") !== term) {
        return cjTree.remove();
      }
    });
    for (k in hits) {
      v = hits[k];
      activeTree = this.cj_menuSelectors.tabs.find(".active").attr("class").replace("active", "");
      if (v === 0) {
        this.setTabResults(k, "0");
        this.writeEmptyList(term, k);
        this.cj_selectors.tagBox.find(".top-" + k).data("term", term);
      } else {
        this.setTabResults(k, v);
        t = new Tree(list[k], k, true);
        this.cj_selectors.tagBox.find(".top-" + k).data("term", term);
      }
      if (parseInt(k) === 292) {
        if (v > 0) {
          _ref = this.instance.positionList;
          for (a in _ref) {
            b = _ref[a];
            iO = b.id.indexOf(this.entityList);
            if (iO > -1) {
              console.log(b.id);
              cjDTs = this.cj_selectors.tagBox.find("#tagLabel_" + b.id);
              cjDTs.addClass("shaded");
              cjDTs.find(".fCB input.checkbox").prop("checked", true);
            }
          }
        }
      }
    }
    new Buttons(this);
    if (this.settings.tagging) {
      if (this.entityList != null) {
        this.applyTaggedKWIC();
      } else {
        delay = function(ms, func) {
          return setTimeout(func, ms);
        };
        delay(500, function() {
          return _this.applyTaggedKWIC();
        });
      }
    }
    return this.setActiveTree(this.getIdFromTabName(activeTree));
  };

  View.prototype.noResultsBox = function(treeId, k) {
    var activeTree, isActive, noResults;
    activeTree = this.getIdFromTabName(cj.trim(cj(".JSTree-tabs .active").attr("class").replace(/active/g, "")));
    if (parseInt(k) === parseInt(activeTree)) {
      isActive = "active";
    } else {
      isActive = "";
    }
    noResults = "            <div class='top-" + k + " tagContainer filtered " + isActive + " no-results'>              <div class='no-results'>                No Results Found              </div>            </div>          ";
    return cj(".JSTree").append(noResults);
  };

  View.prototype.rebuildInitialTree = function() {
    var activeTree, k, t, v, _ref;
    if (this.cj_selectors.tagBox.hasClass("filtered")) {
      this.cj_selectors.tagBox.removeClass("filtered");
      this.cj_selectors.tagBox.find(".filtered").remove();
      activeTree = this.cj_menuSelectors.tabs.find(".active").attr("class").replace("active", "");
      _ref = this.trees;
      for (k in _ref) {
        v = _ref[k];
        if (parseInt(k) !== 292) {
          t = new Tree(v.tagList, k);
        }
        if (parseInt(k) === 292 && !this.settings.tagging) {
          this.cj_selectors.tagBox.find(".top-" + k).empty();
          this.addPositionReminderText(this.cj_selectors.tagBox.find(".top-" + k));
        }
        if (parseInt(k) === 292 && this.settings.tagging) {
          this.cj_selectors.tagBox.find(".top-" + k).empty();
          this.applyTaggedPositions();
        }
      }
      new Buttons(this);
      if (this.settings.tagging) {
        this.applyTaggedKWIC();
      }
      return this.setActiveTree(this.getIdFromTabName(activeTree));
    }
  };

  View.prototype.setTabResults = function(tree, val) {
    var cjTab, result;
    cjTab = this.cj_menuSelectors.tabs.find(".tab-" + (this.getTabNameFromId(tree, true)));
    if (cjTab.find("span").length > 0) {
      return cjTab.find("span").html("(" + val + ")");
    } else {
      result = cjTab.html();
      return cjTab.html("" + result + "<span>(" + val + ")</span>");
    }
  };

  View.prototype.removeTabCounts = function(id) {
    if (id != null) {
      return this.cj_menuSelectors.tabs.find("." + " span").remove();
    } else {
      return this.cj_menuSelectors.tabs.find("span").remove();
    }
  };

  View.prototype.addPositionReminderText = function(cjlocation) {
    var positionText;
    positionText = "              <div class='position-box-text-reminder'>                Type in a Bill Number or Name for Results              </div>          ";
    return cjlocation.html(positionText);
  };

  View.prototype.toggleTagBox = function() {
    return this.cj_selectors.tagBox.toggle().toggleClass("dropdown");
  };

  View.prototype.toggleDropdown = function(hits) {
    var boxHeight, k, v;
    if (this.cj_selectors.tagBox.hasClass("dropdown")) {
      if (hits != null) {
        for (k in hits) {
          v = hits[k];
          this.getTagHeight(this.cj_selectors.tagBox.find(".top-" + k));
        }
        this.cj_selectors.container.css("position", "static");
        this.cj_selectors.tagBox.css("height", "auto").addClass("open").css("overflow-y", "auto");
        return this.setOverlay();
      } else {
        boxHeight = new Resize();
        this.cj_selectors.container.css("position", "relative");
        this.cj_selectors.tagBox.removeClass("open").css("overflow-y", "scroll").height(boxHeight.height);
        return this.setOverlay();
      }
    }
  };

  View.prototype.getTagHeight = function(tagBox, maxHeight) {
    var checkDTs, closestTo, heightTotal, propHeight, v, _i, _j, _len, _len1;
    if (maxHeight == null) {
      maxHeight = 180;
    }
    checkDTs = [];
    heightTotal = this.getRecTagHeight(tagBox);
    propHeight = 0;
    for (_i = 0, _len = heightTotal.length; _i < _len; _i++) {
      v = heightTotal[_i];
      propHeight += parseInt(v);
    }
    if (propHeight > maxHeight) {
      closestTo = 0;
      for (_j = 0, _len1 = heightTotal.length; _j < _len1; _j++) {
        v = heightTotal[_j];
        if (closestTo > maxHeight) {
          break;
        }
        closestTo += parseInt(v);
      }
      return cj(tagBox).height(closestTo);
    } else {
      return cj(tagBox).height(propHeight);
    }
  };

  View.prototype.getRecTagHeight = function(container, heightTotal, already) {
    var _this = this;
    if (heightTotal == null) {
      heightTotal = [];
    }
    if (heightTotal.length > 8) {
      return heightTotal;
    }
    cj.each(cj(container).find("dt"), function(i, el) {
      var cjEl;
      cjEl = cj(el);
      heightTotal.push(cjEl.height());
      if (heightTotal.length > 8) {
        return false;
      }
    });
    return heightTotal;
  };

  View.prototype.createAction = function(tagId, action, cb) {
    if (tagId == null) {
      tagId = "";
    }
    return new Action(this, this.instance, tagId, action, cb);
  };

  View.prototype.toggleCheckInBox = function() {
    var a;
    a = this;
    this.cj_selectors.tagBox.find("dt input.checkbox").off("change");
    return this.cj_selectors.tagBox.find("dt input.checkbox").on("change", function() {
      var action, addTag, cjDT, doAction, entity, o, removeTag, tagId, toggleClass;
      action = {
        type: "checkbox"
      };
      removeTag = function() {
        var _removeTag,
          _this = this;
        _removeTag = entity.removeTag(tagId);
        return _removeTag.done(function(i) {
          return doAction.apply(null, [i, "remove"]);
        });
      };
      addTag = function() {
        var _addTag,
          _this = this;
        _addTag = entity.addTag(tagId);
        return _addTag.done(function(i) {
          return doAction.apply(null, [i, "add"]);
        });
      };
      doAction = function(res, typeOfAction) {
        action["action"] = typeOfAction;
        if (res.code !== 1) {
          if (typeOfAction === "add") {
            removeTag.call(null, null);
          }
          if (typeOfAction === "remove") {
            addTag.call(null, null);
          }
        }
        return new ActivityLog(res, action);
      };
      toggleClass = function(cjDT) {
        cjDT.toggleClass("shaded");
        a.hasTaggedChildren(cjDT);
        if (cj(this).prop("checked")) {
          return addTag.call(this, null);
        } else {
          return removeTag.call(this, null);
        }
      };
      entity = a.instance.entity;
      cjDT = cj(this).parents("dt").first();
      if (cjDT.data("tree") === 292 && parseInt(cjDT.data("tagid")) >= 292000) {
        o = this;
        return a.createAction(cjDT.data("tagid"), "addTagFromPosition", function(response) {
          var newDT;
          newDT = response.cjDT;
          if (response === false) {

          } else {
            action.tagId = response["message"]["id"];
            return toggleClass.call(newDT.find("input.checkbox")[0], newDT);
          }
        });
      } else {
        tagId = cjDT.data("tagid");
        action.tagId = tagId;
        return toggleClass.call(this, cjDT);
      }
    });
  };

  View.prototype.hasTaggedChildren = function(cjDT) {
    var cjSiblingDT, dl, i, parentTagId, parents, tagId, _i, _len, _results;
    tagId = cjDT.data("tagid");
    if (cjDT.siblings("#tagDropdown_" + tagId).find("dt.shaded").length > 0) {
      cjDT.addClass("shadedChildren");
    }
    parents = cjDT.parentsUntil(".JSTree", "dl");
    _results = [];
    for (i = _i = 0, _len = parents.length; _i < _len; i = ++_i) {
      dl = parents[i];
      parentTagId = cj(dl).data("tagid");
      cjSiblingDT = this.cj_selectors.tagBox.find("#tagLabel_" + parentTagId);
      if (cj(dl).find("dt.shaded").length > 0) {
        _results.push(cjSiblingDT.addClass("shadedChildren"));
      } else {
        _results.push(cjSiblingDT.removeClass("shadedChildren"));
      }
    }
    return _results;
  };

  return View;

})();

Action = (function() {
  Action.prototype.ajax = {
    addTag: {
      url: "/civicrm/ajax/tag/create",
      data: {
        name: "",
        description: "",
        parent_id: "",
        is_reserved: true
      }
    }
  };

  Action.prototype.fields = {
    addTag: ["Tag Name", "Description", "Is Reserved"]
  };

  function Action(view, instance, tagId, action, cb) {
    var k, v, _ref;
    this.view = view;
    this.instance = instance;
    this.cb = cb;
    _ref = this.ajax;
    for (k in _ref) {
      v = _ref[k];
      v.data["call_uri"] = window.location.href;
      v["dataType"] = "json";
    }
    this[action].apply(this, [tagId, action]);
  }

  Action.prototype.createSlide = function() {
    var resize,
      _this = this;
    resize = new Resize;
    this.view.cj_selectors.tagBox.addClass("hasSlideBox");
    if (resize.height > 190) {
      this.view.cj_selectors.tagBox.prepend("<div class='slideBox'></div>");
      this.cj_slideBox = this.view.cj_selectors.tagBox.find(".slideBox");
      this.cj_slideBox.css("right", "" + (this.findGutterSpace()) + "px");
      return this.cj_slideBox.animate({
        width: '50%'
      }, 500, function() {
        return _this.cj_slideBox.append(_this.slideHtml);
      });
    } else {

    }
  };

  Action.prototype.addTagFromPosition = function(tagId, action) {
    var cjDT, k, manipBox, message, response, v, _ref,
      _this = this;
    manipBox = function(tagId, messageId) {
      var cjDL;
      cjDL = _this.view.cj_selectors.tagBox.find("#tagDropdown_" + tagId);
      cjDL.attr("id", "tagDropdown_" + messageId);
      cjDL.data("tagid", messageId);
      cjDT.data("tagid", messageId);
      cjDT.attr("id", "tagLabel_" + messageId);
      cjDT.removeClass("tag-" + tagId).addClass("tag-" + messageId);
      return cjDT.find("input.checkbox").attr("name", "tag[" + messageId + "]");
    };
    cjDT = this.view.cj_selectors.tagBox.find("#tagLabel_" + tagId);
    this.ajax.addTag.data.name = cjDT.find(".tag .name").text();
    this.ajax.addTag.data.description = cjDT.find(".tag .description").text();
    this.ajax.addTag.data.parent_id = "292";
    this.ajax.addTag.data.is_reserved = true;
    _ref = this.instance.positionList;
    for (k in _ref) {
      v = _ref[k];
      if (_utils.removePositionTextFromBill(this.ajax.addTag.data.name) === v.name) {
        if (_utils.checkPositionFromBill(this.ajax.addTag.data.name) === v.pos) {
          manipBox.call(this, cjDT.data("tagid"), v.id);
          message = {
            id: v.id
          };
          response = {
            "cjDT": cjDT,
            "message": message
          };
          this.cb(response);
        }
      }
    }
    return this.addTagAjax(tagId, action, function(message) {
      if (message === "DB Error: already exists") {
        cjDT.prop("checked", false);
        if (_this.cb != null) {
          response = {
            "cjDT": cjDT,
            "message": message
          };
          _this.cb(response);
        }
      }
      manipBox.call(_this, tagId, message.id);
      if (_this.cb != null) {
        response = {
          "cjDT": cjDT,
          "message": message
        };
        return _this.cb(response);
      }
    });
  };

  Action.prototype.findGutterSpace = function() {
    var innerWidth, outerWidth;
    outerWidth = this.view.cj_selectors.tagBox.width();
    innerWidth = this.view.cj_selectors.tagBox.find(".tagContainer.active").width();
    return outerWidth - innerWidth;
  };

  Action.prototype.addTag = function(values) {
    if (values == null) {
      values = "";
    }
    this.createSlide();
    return this.slideHtml = this.gatherLabelHTML();
  };

  Action.prototype.removeTag = function() {
    return this.createSlide();
  };

  Action.prototype.moveTag = function() {
    return this.createSlide();
  };

  Action.prototype.mergeTag = function() {
    return this.createSlide();
  };

  Action.prototype.updateTag = function() {};

  Action.prototype.gatherLabelHTML = function(values) {
    var field, html, label, _i, _len, _ref;
    if (values == null) {
      values = "";
    }
    label = new Label;
    html = "";
    html = label.buildLabel("header", "Add Tag", "Add Tag");
    _ref = this.fields.addTag;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      field = _ref[_i];
      html += label.buildLabel("label", field, field);
      if (field === "Is Reserved") {
        html += label.buildLabel("checkBox", field, "");
      } else {
        html += label.buildLabel("textBox", field, "");
      }
    }
    html += label.buildLabel("submit", "", "submit");
    html += label.buildLabel("cancel", "", "cancel");
    return html;
  };

  Action.prototype.addTagAjax = function(tagId, action, locCb) {
    var request,
      _this = this;
    if (this.ajax.addTag.data.name === "") {
      if (this.cb != null) {
        this.cb(false);
      }
      return false;
    }
    request = cj.when(cj.ajax(this.ajax.addTag));
    request.done(function(data) {
      if (locCb != null) {
        return locCb(data.message);
      } else if (_this.cb != null) {
        return _this.cb(data.message);
      }
    });
    return this;
  };

  Action.prototype.removeTagAjax = function() {};

  Action.prototype.moveTagAjax = function() {};

  Action.prototype.mergeTagAjax = function() {};

  Action.prototype.updateTagAjax = function() {};

  return Action;

})();

Label = (function() {
  function Label() {}

  Label.prototype.defaults = {
    header: {
      className: "label header",
      value: "Header"
    },
    label: {
      className: "label",
      value: "Label"
    },
    textBox: {
      className: "textBox",
      value: "",
      name: ""
    },
    submit: {
      className: "label submit",
      value: "Submit"
    },
    checkBox: {
      className: "checkBox",
      value: ""
    },
    cancel: {
      className: "label cancel",
      value: "Cancel"
    }
  };

  Label.prototype.buildLabel = function(type, className, value) {
    this.passed = {
      className: _utils.camelCase(className),
      value: value
    };
    console.log(this.passed);
    return this[type].call(this, null);
  };

  Label.prototype.header = function() {
    var _base;
    if ((_base = this.passed).value == null) {
      _base.value = this.defaults.header.value;
    }
    return "<div class='" + this.defaults.header.className + " " + this.passed.className + "'>" + this.passed.value + "</div>";
  };

  Label.prototype.label = function() {
    var _base;
    if ((_base = this.passed).value == null) {
      _base.value = this.defaults.label.value;
    }
    return "<div class='" + this.defaults.label.className + " " + this.passed.className + "'>" + this.passed.value + "</div>";
  };

  Label.prototype.textBox = function() {
    var _base, _base1;
    if ((_base = this.passed).className == null) {
      _base.className = this.defaults.textBox.className;
    }
    if ((_base1 = this.passed).value == null) {
      _base1.value = this.defaults.textBox.value;
    }
    return "<input type='text' class='" + this.defaults.textBox.className + " " + this.passed.className + "' name='" + this.passed.className + "'>";
  };

  Label.prototype.checkBox = function() {
    var _base;
    if ((_base = this.passed).className == null) {
      _base.className = this.defaults.textBox.className;
    }
    return "<input type='checkbox' class='" + this.defaults.checkBox.className + " " + this.passed.className + "' name='" + this.passed.className + "'>";
  };

  Label.prototype.submit = function() {
    var _base;
    if ((_base = this.passed).value == null) {
      _base.value = this.defaults.submit.value;
    }
    return "<div class='" + this.defaults.submit.className + " " + this.passed.className + "'>" + this.passed.value + "</div>";
  };

  Label.prototype.cancel = function() {
    var _base;
    if ((_base = this.passed).value == null) {
      _base.value = this.defaults.cancel.value;
    }
    return "<div class='" + this.defaults.cancel.className + " " + this.passed.className + "'>" + this.passed.value + "</div>";
  };

  return Label;

})();

Buttons = (function() {
  Buttons.prototype.checkbox = "<input type='checkbox' class='checkbox'>";

  Buttons.prototype.addTag = "<li class='addTag' title='Add New Tag' data-do='add'></li>";

  Buttons.prototype.removeTag = "<li class='removeTag' title='Remove Tag' data-do='remove'></li>";

  Buttons.prototype.moveTag = "<li class='moveTag' title='Move Tag' data-do='move'></li>";

  Buttons.prototype.updateTag = "<li class='updateTag' title='Update Tag' data-do='update'></li>";

  Buttons.prototype.mergeTag = "<li class='mergeTag' title='Merge Tag' data-do='merge'></li>";

  Buttons.prototype.convertTag = "<li class='convertTag' title='Convert Keyword' data-do='convert'></li>";

  Buttons.prototype.keywords = ["removeTag", "updateTag", "mergeTag", "convertTag"];

  Buttons.prototype.issuecodes = ["addTag", "removeTag", "updateTag", "moveTag", "mergeTag"];

  function Buttons(view, finder) {
    this.view = view;
    if (finder == null) {
      finder = "";
    }
    if (this.view.settings.tagging) {
      this.removeFCB();
      this.createTaggingCheckboxes(finder);
    }
    if (this.view.settings.edit) {
      this.removeTaggingCheckboxes();
      this.createFCB();
    }
  }

  Buttons.prototype.createTaggingCheckboxes = function(finder) {
    var a;
    a = this;
    this.view.cj_selectors.tagBox.find("" + finder + " dt .tag .name").before(function() {
      if (cj(this).siblings(".fCB").length === 0) {
        return a.createButtons(cj(this).parent().parent().data("tagid"));
      }
    });
    return this.view.toggleCheckInBox();
  };

  Buttons.prototype.removeTaggingCheckboxes = function() {
    return this.view.cj_selectors.tagBox.find("dt .tag .name .fCB").remove();
  };

  Buttons.prototype.createFCB = function() {
    var cjTreeTop, k, v, _ref, _results,
      _this = this;
    if (this.nodeList == null) {
      this.nodeList = this.view._trees[291].nodeList;
    }
    _ref = this.view._trees;
    _results = [];
    for (k in _ref) {
      v = _ref[k];
      cjTreeTop = this.view.cj_selectors.tagBox.find(".top-" + k).find("dt");
      cjTreeTop.off("mouseenter");
      cjTreeTop.off("mouseleave");
      cjTreeTop.on("mouseenter", function(tag) {
        var cjDT;
        cjDT = cj(tag.currentTarget);
        cjDT.find(".tag").append(_this.createButtons(cjDT.data("tree")));
        return _this.executeButton(cjDT);
      });
      _results.push(cjTreeTop.on("mouseleave", function(tag) {
        var cjDT;
        cjDT = cj(tag.currentTarget).find(".tag .fCB");
        return cjDT.remove();
      }));
    }
    return _results;
  };

  Buttons.prototype.removeFCB = function() {
    var cjTreeTop, k, v, _ref, _results;
    _ref = this.view._trees;
    _results = [];
    for (k in _ref) {
      v = _ref[k];
      cjTreeTop = this.view.cj_selectors.tagBox.find(".top-" + k).find("dt");
      cjTreeTop.off("mouseenter");
      _results.push(cjTreeTop.off("mouseleave"));
    }
    return _results;
  };

  Buttons.prototype.createButtons = function(treeTop) {
    var html, tag, _i, _j, _len, _len1, _ref, _ref1;
    html = "<div class='fCB'>";
    html += "<ul>";
    if (this.view.settings.edit) {
      if (parseInt(treeTop) === 291) {
        _ref = this.issuecodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tag = _ref[_i];
          html += this[tag];
        }
      }
      if (parseInt(treeTop) === 296) {
        _ref1 = this.keywords;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          tag = _ref1[_j];
          html += this[tag];
        }
      }
    } else {
      html += "<li>";
      html += _utils.createCheckBox("tag[" + treeTop + "]", "", "checkbox");
      html += "</li>";
    }
    html += "</ul>";
    return html += "</div>";
  };

  Buttons.prototype.addRadios = function(treeTop) {};

  Buttons.prototype.executeButton = function(cjDT) {
    var _this = this;
    cjDT.off("click");
    if (this.view.settings.edit) {
      return cjDT.on("click", "li", function(button) {
        var action, tagid;
        action = "" + (cj(button.target).data("do")) + "Tag";
        tagid = cjDT.data("tagid");
        return _this.view.createAction(tagid, action);
      });
    } else {
      return cjDT.on("click", "li", function(button) {});
    }
  };

  return Buttons;

})();

ActivityLog = (function() {
  function ActivityLog(jsonObj, action) {}

  return ActivityLog;

})();

Settings = (function() {
  var icons;

  function Settings(instance, view) {
    this.instance = instance;
    this.view = view;
    this.createButtons();
  }

  Settings.prototype.createButtons = function() {
    var a, b, _i, _j, _len, _len1, _ref, _ref1, _results;
    this.cj_top_settings = cj("." + (this.view.menuSelectors.top.split(" ").join(".")) + " ." + (this.view.menuSelectors.settings.split(" ").join(".")));
    this.cj_bottom_settings = cj("." + (this.view.menuSelectors.bottom.split(" ").join(".")) + " ." + (this.view.menuSelectors.settings.split(" ").join(".")));
    _ref = icons.top;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      a = _ref[_i];
      this.cj_top_settings.append(this.addButton(a));
    }
    _ref1 = icons.bottom;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      b = _ref1[_j];
      _results.push(this.cj_bottom_settings.append(this.addButton(b)));
    }
    return _results;
  };

  icons = {
    top: ['setting', 'add', 'print'],
    bottom: ['slide']
  };

  Settings.prototype.addButton = function(name) {
    return "<div class='" + name + "'></div>";
  };

  return Settings;

})();

Resize = (function() {
  function Resize(boxHeight) {
    var lsheight;
    if (boxHeight != null) {
      bbUtils.localStorage("tagBoxHeight", boxheight);
      return boxHeight;
    }
    if (bbUtils.localStorage("tagBoxHeight") != null) {
      lsheight = bbUtils.localStorage("tagBoxHeight");
      if (lsheight.height > 600) {
        bbUtils.localStorage("tagBoxHeight", 600);
        lsheight.height = 600;
      }
      this.height = lsheight.height;
    } else {
      this.height = 400;
    }
  }

  Resize.prototype.addResize = function(instance, view) {
    var displaySettings, maxHeight,
      _this = this;
    this.instance = instance;
    this.view = view;
    displaySettings = this.instance.get("displaySettings");
    maxHeight = 500;
    if (displaySettings.maxHeight != null) {
      maxHeight = displaySettings.maxHeight;
    }
    this.tagBox = this.view.cj_selectors.tagBox;
    cj(document).on("mouseup", function(event, tagBox) {
      cj(document).off("mousemove");
      if (_this.tagBox.height() < 15) {
        _this.tagBox.height(0);
        _this.tagBox.addClass("dropdown");
        _this.view.settings.tall = false;
      }
      if (!_this.tagBox.hasClass("dropdown")) {
        bbUtils.localStorage("tagBoxHeight", {
          height: _this.tagBox.height()
        });
        _this.view.settings.tall = true;
      } else {
        bbUtils.localStorage("tagBoxHeight", {
          height: 0
        });
        _this.view.settings.tall = false;
      }
      return _this.view.setDescWidths();
    });
    return this.view.cj_tokenHolder.resize.on("mousedown", function(ev, tagBox) {
      if (_this.tagBox.hasClass("dropdown")) {
        _this.tagBox.height(0);
        _this.tagBox.show();
        _this.tagBox.removeClass("dropdown");
      }
      ev.preventDefault();
      return cj(document).on("mousemove", function(ev, tagBox) {
        _this.view.toggleDropdown();
        if (ev.pageY - cj(".JSTree").offset().top < maxHeight) {
          return _this.tagBox.css("height", ev.pageY - cj(".JSTree").offset().top);
        }
      });
    });
  };

  return Resize;

})();

Autocomplete = (function() {
  var initHint;

  function Autocomplete(instance, view) {
    var cjac, debounced, params, searchmonger,
      _this = this;
    this.instance = instance;
    this.view = view;
    this.pageElements = this.instance.get('pageElements');
    this.dataSettings = this.instance.get('dataSettings');
    if (this.cjTagBox == null) {
      this.cjTagBox = cj("." + (this.pageElements.tagHolder.join(".")));
    }
    cj("#JSTree-data").data({
      "autocomplete": this.instance.autocomplete
    });
    params = {
      jqDataReference: "#JSTree-data",
      hintText: "Type in a partial or complete name of an tag or keyword.",
      theme: "JSTree"
    };
    if (!this.view.settings.wide) {
      params.hintText = "Search...";
    }
    cjac = cj("#JSTree-ac");
    this.hintText(cjac, params);
    searchmonger = cjac.tagACInput("init", params);
    cjac.on("click", (function(event) {
      if (cjac.val() === params.hintText) {
        cjac.val("");
        cjac.css("color", "#000");
        return _this.initHint = false;
      }
    }));
    debounced = bbUtils.debounce(this.execSearch, 500);
    cjac.on("keydown", (function(event) {
      return _this.filterKeydownEvents(debounced, event, searchmonger, cjac);
    }));
    cjac.on("keyup", (function(event) {
      var keyCode;
      keyCode = bbUtils.keyCode(event);
      if (keyCode.type === "delete" && cjac.val().length < 3) {
        _this.view.removeTabCounts();
        _this.view.shouldBeFiltered = false;
        _this.view.currentWrittenTerm = "";
        _this.view.cj_selectors.tagBox.find(".top-292.tagContainer").infiniscroll("unbind", cj(".JSTree"));
        _this.view.cj_selectors.tagBox.find(".top-292.tagContainer").remove("dt.loadingGif");
        if (_this.view.cj_selectors.tagBox.hasClass("dropdown")) {
          _this.view.toggleDropdown();
          _this.view.rebuildInitialTree();
        } else {
          _this.view.rebuildInitialTree();
        }
        if (_this.initHint) {
          _this.hintText(cjac, params);
          return _this.initHint = false;
        } else {
          return cjac.css("color", "#000");
        }
      }
    }));
  }

  initHint = true;

  Autocomplete.prototype.hintText = function(cjac, params) {
    cjac.val(params.hintText);
    return cjac.css("color", "#999");
  };

  Autocomplete.prototype.filterKeydownEvents = function(obj, event, searchmonger, cjac) {
    var keyCode, name;
    keyCode = bbUtils.keyCode(event);
    switch (keyCode.type) {
      case "directional":
        return true;
      case "letters":
      case "delete":
      case "math":
      case "punctuation":
      case "number":
        if (keyCode.type !== "delete") {
          name = keyCode.name;
        } else {
          name = "";
        }
        return obj(this, event, searchmonger, cjac);
      default:
        return false;
    }
  };

  Autocomplete.prototype.buildPositions = function(list, term, hits) {
    var openLeg, options,
      _this = this;
    if (this.positionPagesLeft > 1) {
      openLeg = new OpenLeg;
      options = {
        scrollBox: ".JSTree"
      };
      return this.cjTagBox.find(".top-292.tagContainer").infiniscroll(options, function() {
        var nextPage;
        _this.openLegQueryDone = false;
        nextPage = {
          term: _this.positionSearchTerm,
          page: _this.positionPage
        };
        _this.cjTagBox.find(".top-292.tagContainer").append(_this.addPositionLoader());
        return openLeg.query(nextPage, function(results) {
          var addButtonsTo, filteredList, k, poses, v;
          poses = _this.addPositionsToTags(results.results);
          filteredList = {
            292: poses
          };
          _this.getNextPositionRound(results);
          new Tree(poses, "292", false, cj(".JSTree .top-292"), nextPage);
          addButtonsTo = "";
          for (k in nextPage) {
            v = nextPage[k];
            addButtonsTo += "." + k + "-" + v;
          }
          new Buttons(_this.view, addButtonsTo);
          _this.openLegQueryDone = true;
          return _this.buildPositions();
        });
      });
    }
  };

  Autocomplete.prototype.addPositionLoader = function(nextPage) {
    if (nextPage == null) {
      nextPage = {};
    }
    return "<dt class='loadingGif' data-parentid='292'>      <div class='tag'>        <div class='ddControl'></div>        <div class='loadingText'>Loading...</div>      </div>    </dt>";
  };

  Autocomplete.prototype.execSearch = function(obj, event, searchmonger, cjac) {
    var term,
      _this = this;
    term = cjac.val();
    if (term.length >= 3) {
      obj.view.shouldBeFiltered = true;
      obj.doOpenLegQuery();
      return searchmonger.nExec(event, function(terms) {
        var filteredList, foundTags, hcounts, hits, k, tags, v;
        if ((terms != null) && !cj.isEmptyObject(terms)) {
          tags = obj.sortSearchedTags(terms.tags);
          hits = obj.separateHits(tags);
          hcounts = 0;
          foundTags = [];
          for (k in hits) {
            v = hits[k];
            hcounts += v;
            foundTags.push(parseFloat(k));
          }
          filteredList = obj.view.buildFilteredList(tags);
          obj.view.writeFilteredList(filteredList, terms.term.toLowerCase(), hits);
          obj.localQueryDone = true;
          if (obj.view.cj_selectors.tagBox.hasClass("dropdown")) {
            return obj.view.toggleDropdown(hits);
          }
        }
      });
    }
  };

  Autocomplete.prototype.doOpenLegQuery = function() {
    var openLeg, terms,
      _this = this;
    openLeg = new OpenLeg;
    terms = cj("#JSTree-ac").val();
    return openLeg.query({
      "term": terms
    }, function(results) {
      var filteredList, hitCount, poses;
      poses = _this.addPositionsToTags(results.results);
      filteredList = {
        292: poses
      };
      _this.getNextPositionRound(results);
      if (results.seeXmore === 0) {
        hitCount = results.results.length * 3;
      } else {
        hitCount = results.seeXmore;
      }
      _this.view.writeFilteredList(filteredList, terms.toLowerCase(), {
        292: hitCount
      });
      _this.buildPositions();
      _this.view.toggleDropdown({
        292: hitCount
      });
      return _this.openLegQueryDone = true;
    });
  };

  Autocomplete.prototype.separateHits = function(terms, results) {
    var hits, k, v;
    hits = {};
    for (k in terms) {
      v = terms[k];
      hits[k] = v.length;
    }
    if (hits[296] == null) {
      hits[296] = 0;
    }
    if (hits[291] == null) {
      hits[291] = 0;
    }
    return hits;
  };

  Autocomplete.prototype.positionIdNumber = 292000;

  Autocomplete.prototype.getNextPositionRound = function(results) {
    this.positionPage = results.page + 1;
    this.positionPagesLeft = results.pagesLeft;
    return this.positionSearchTerm = results.term;
  };

  Autocomplete.prototype.addPositionsToTags = function(positions) {
    var agipos, checkName, format, forpos, k, neupos, o, positionList, v, _ref,
      _this = this;
    format = [];
    positionList = this.instance.positionList;
    checkName = function(name, v) {
      if (_utils.removePositionTextFromBill(name) === v.name && _utils.checkPositionFromBill(name) === v.pos) {
        return true;
      }
      return false;
    };
    for (k in positions) {
      o = positions[k];
      forpos = {
        name: o.forname,
        id: "" + (this.positionIdNumber + 1),
        position: "for"
      };
      agipos = {
        name: o.againstname,
        id: "" + (this.positionIdNumber + 2),
        position: "against"
      };
      neupos = {
        name: o.noname,
        id: "" + (this.positionIdNumber + 3),
        position: "neutral"
      };
      _ref = this.instance.positionList;
      for (k in _ref) {
        v = _ref[k];
        if (_utils.removePositionTextFromBill(forpos.name) === v.name) {
          if (_utils.checkPositionFromBill(forpos.name) === v.pos) {
            forpos.id = v.id;
          }
        }
        if (_utils.removePositionTextFromBill(agipos.name) === v.name) {
          if (_utils.checkPositionFromBill(agipos.name) === v.pos) {
            agipos.id = v.id;
          }
        }
        if (_utils.removePositionTextFromBill(neupos.name) === v.name) {
          if (_utils.checkPositionFromBill(neupos.name) === v.pos) {
            neupos.id = v.id;
          }
        }
      }
      forpos.billNo = agipos.billNo = neupos.billNo = o.billNo;
      forpos.type = agipos.type = neupos.type = "292";
      forpos.description = agipos.description = neupos.description = o.description;
      forpos.children = agipos.children = neupos.children = false;
      forpos.created_date = agipos.created_date = neupos.created_date = "";
      forpos.created_id = agipos.created_id = neupos.created_id = "";
      forpos.created_name = agipos.created_name = neupos.created_name = "";
      forpos.parent = agipos.parent = neupos.parent = "292";
      forpos.level = agipos.level = neupos.level = 1;
      forpos.url = agipos.url = neupos.url = o.url;
      format.push(forpos);
      format.push(agipos);
      format.push(neupos);
      this.positionIdNumber = this.positionIdNumber + 10;
    }
    return this.positionListing = format;
  };

  Autocomplete.prototype.sortSearchedTags = function(tags) {
    var list;
    list = {};
    cj.each(tags, function(i, el) {
      var obj;
      if (list[el.type] == null) {
        list[el.type] = [];
      }
      obj = {
        id: el.id,
        name: el.name
      };
      return list[el.type].push(obj);
    });
    return list;
  };

  return Autocomplete;

})();

_openTags = {};

_treeVisibility = {
  currentTree: "",
  defaultTree: "",
  previousTree: ""
};

Tree = (function() {
  Tree.prototype.domList = {};

  Tree.prototype.nodeList = {};

  Tree.prototype.tabName = "";

  function Tree(tagList, tagId, filter, location, listClasses) {
    this.tagList = tagList;
    this.tagId = tagId;
    this.filter = filter != null ? filter : false;
    this.location = location;
    this.listClasses = listClasses;
    this.buildTree();
    return this;
  }

  Tree.prototype.buildTree = function() {
    var dataNames, filter, k, v, _ref;
    if (this.filter) {
      filter = "filtered";
    } else {
      filter = "";
    }
    if (this.location != null) {
      this.append = true;
      this.domList = cj();
      if (this.listClasses != null) {
        dataNames = "";
        _ref = this.listClasses;
        for (k in _ref) {
          v = _ref[k];
          dataNames += " " + k + "-" + v + " ";
        }
        this.domList = this.domList.add("<div class='" + dataNames + "'></div>");
      } else {
        this.domList = this.domList.add("<div></div>");
      }
    } else {
      this.domList = cj();
      this.domList = this.domList.add("<div class='top-" + this.tagId + " " + filter + " tagContainer'></div>");
    }
    return this.iterate(this.tagList);
  };

  Tree.prototype.iterate = function(ary) {
    var buttons, cjTagList, cjToAppendTo, kNode, node, _i, _len,
      _this = this;
    cjTagList = cj(this.domList);
    for (_i = 0, _len = ary.length; _i < _len; _i++) {
      node = ary[_i];
      this.nodeList[node.id] = kNode = new Node(node);
      if (node.parent === this.tagId) {
        cjTagList.append(kNode.html);
      } else {
        cjToAppendTo = cjTagList.find("dl#tagDropdown_" + kNode.parent);
        if (cjToAppendTo.length === 0) {
          cjTagList.append(kNode.html);
        } else {
          cjToAppendTo.append(kNode.html);
        }
      }
    }
    if (!this.append) {
      cjTagList.appendTo(".JSTree");
    } else {
      this.location.find(".loadingGif").replaceWith(cjTagList);
    }
    this.html = cjTagList;
    _treeUtils.makeDropdown(cj(".JSTree .top-" + this.tagId));
    if (this.filter) {
      buttons = cj(".JSTree .top-" + this.tagId + " .treeButton").parent().parent();
      return cj.each(buttons, function(i, button) {
        return _treeUtils.dropdownItem(cj(button), true);
      });
    } else {
      return _treeUtils.readDropdownsFromLocal(this.tagId, this.tagList);
    }
  };

  return Tree;

})();

_treeUtils = {
  selectByParent: function(list, parent) {
    var b, childList, _i, _len;
    childList = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      b = list[_i];
      if (b.parent === parent) {
        childList.push(b);
      }
    }
    return childList;
  },
  selectByTree: function(list, tree) {
    var b, treeList, _i, _len;
    treeList = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      b = list[_i];
      if (b.type === tree) {
        treeList.push(b);
      }
    }
    return treeList;
  },
  makeDropdown: function(cjTree) {
    cjTree.find(".treeButton").off("click");
    return cjTree.find(".treeButton").on("click", function() {
      return _treeUtils.dropdownItem(cj(this).parent().parent());
    });
  },
  dropdownItem: function(tagLabel, filter) {
    var tagid;
    if (filter == null) {
      filter = false;
    }
    tagid = tagLabel.data('tagid');
    if (tagLabel.length > 0) {
      if (tagLabel.is(".open")) {
        _openTags[tagid] = false;
      } else {
        _openTags[tagid] = true;
      }
    }
    tagLabel.siblings("#tagDropdown_" + tagid).slideToggle("200");
    tagLabel.toggleClass("open");
    if (!filter) {
      return bbUtils.localStorage("tagViewSettings", _openTags);
    }
  },
  readDropdownsFromLocal: function(cjTree) {
    var bool, tag, _ref;
    if (parseInt(cjTree) === 291) {
      if (bbUtils.localStorage("tagViewSettings")) {
        _openTags = bbUtils.localStorage("tagViewSettings");
        _ref = bbUtils.localStorage("tagViewSettings");
        for (tag in _ref) {
          bool = _ref[tag];
          if (bool) {
            this.dropdownItem(cj("#tagLabel_" + tag));
          } else {
            delete _openTags[tag];
          }
        }
      } else {

      }
      return _openTags;
    }
  }
};

_descWidths = {
  normal: 75,
  long: 150
};

Node = (function() {
  function Node(node) {
    var levelModifier;
    this.data = node;
    this.parent = node.parent;
    this.hasDesc = "";
    this.description = node.descriptf_ion;
    this.descLength(node.description);
    this.id = node.id;
    this.children = node.children;
    this.name = node.name;
    this.nameLength = "";
    this.billNo = node.billNo;
    if (node.type === 292) {
      if (this.billNo == null) {
        this.billNo = node.name;
      }
      this.name = node.posName;
    }
    if (this.billNo == null) {
      this.billNo = "";
    }
    this.position = node.position;
    if (this.position == null) {
      this.position = node.pos;
    }
    if (this.position == null) {
      this.position = "";
    }
    if (this.name.length >= _descWidths.normal) {
      levelModifier = 0;
      if (node.level > 2) {
        levelModifier = node.level * 5;
      }
      this.name = _utils.textWrap(this.name, _descWidths.normal - levelModifier);
      this.name = this.name.toRet.join('<br />');
      this.nameLength = "longName";
    }
    this.name = cj.trim(this.name);
    this.html = this.html(node);
    return this;
  }

  Node.prototype.descLength = function(description) {
    var desc, i, tempDesc, text, _i, _len, _ref;
    this.description = description;
    if (this.description != null) {
      if (this.description.length > 0) {
        desc = _utils.textWrap(this.description, _descWidths.normal);
        if (desc.segs === 1) {
          this.hasDesc = "description shortdescription";
        }
        if (desc.segs === 2) {
          this.hasDesc = "description";
        }
        if (desc.segs >= 3) {
          this.hasDesc = "longdescription";
        }
        if (desc.segs > 3) {
          tempDesc = "";
          _ref = desc.toRet;
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            text = _ref[i];
            tempDesc += "" + text + "<br />";
            if (i >= 2) {
              break;
            }
          }
          return this.description = tempDesc;
        } else {
          if (desc.segs > 1) {
            return this.description = desc.toRet.join("<br />");
          } else {
            return this.description = desc.toRet[0];
          }
        }
      }
    }
  };

  Node.prototype.html = function(node) {
    var html, treeButton;
    if (node.children) {
      treeButton = "treeButton";
    } else {
      treeButton = "";
    }
    if (parseFloat(node.is_reserved) !== 0) {
      this.reserved = true;
    } else {
      this.reserved = false;
    }
    html = "<dt class='lv-" + node.level + " " + this.hasDesc + " tag-" + node.id + " " + this.nameLength + "' id='tagLabel_" + node.id + "'             data-tagid='" + node.id + "' data-tree='" + node.type + "' data-name='" + node.name + "'              data-parentid='" + node.parent + "' data-billno='" + this.billNo + "'             data-position='" + this.position + "'            >";
    html += "              <div class='tag'>                <div class='ddControl " + treeButton + "'></div>                <div class='name'>" + this.name + "</div>            ";
    if (this.hasDesc.length > 0) {
      html += "                <div class='description'>" + this.description + "</div>            ";
    }
    html += "              </div>              </dt>            ";
    html += "              <dl class='lv-" + node.level + "' id='tagDropdown_" + node.id + "' data-tagid='" + node.id + "' data-name='" + node.name + "'></dl>            ";
    return html;
  };

  return Node;

})();
