// Generated by CoffeeScript 1.6.2
(function() {
  var BBTagLabel, getTrees, instance, parseTree, typeIsArray, _ref, _treeData,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  if ((_ref = window.jstree) == null) {
    window.jstree = {
      startInstance: function(properties) {
        var initInstance, request;

        initInstance = new instance(properties);
        request = cj.when(getTrees.getRawJSON(initInstance));
        return request.done(function(data) {
          getTrees.putRawJSON(data.message, initInstance);
          return parseTree.init(initInstance);
        });
      }
    };
  }

  getTrees = {
    getRawJSON: function(instance) {
      return cj.ajax(instance.get('callAjax'));
    },
    putRawJSON: function(data, instance) {
      return cj.each(data, function(i, tID) {
        var _ref1;

        if (_ref1 = parseFloat(tID.id), __indexOf.call(instance.get('dataSettings').pullSets, _ref1) >= 0) {
          return _treeData.rawData[tID.id] = {
            'name': tID.name,
            'children': tID.children
          };
        }
      });
    }
  };

  parseTree = {
    init: function(instance) {
      var _this = this;

      return cj.each(_treeData.rawData, function(id, cID) {
        var tagName, _ref1;

        if (_ref1 = parseFloat(id), __indexOf.call(instance.get('dataSettings').pullSets, _ref1) >= 0) {
          _this.output = '';
          _this.tagLvl = 0;
          _this.setDataType(cID.name);
          _this.autocompleteID = [];
          _this.autocompleteName = [];
          _this.treeTop = id;
          tagName = new BBTagLabel(id);
          _this.addDLtop(tagName, cID.name, true);
          _this.addDTtag(tagName, cID.name);
          cj.each(cID.children, function(id, tID) {
            var childTagName;

            childTagName = new BBTagLabel(tID.id);
            _this.addDLtop(childTagName, tID.name);
            return _this.writeOutputData(tID);
          });
          _this.addDLbottom;
          return console.log(_this.output);
        }
      });
    },
    isItemMarked: function(value, type) {
      if (value(true)) {
        return type;
      } else {
        return '';
      }
    },
    isItemChildless: function(childLength) {
      if (childLength > 0) {
        return 'treeButton';
      } else {
        return '';
      }
    },
    writeOutputData: function(tID, parentTag) {
      var tagName,
        _this = this;

      tagName = new BBTagLabel(tID.id);
      this.addDTtag(tagName, tID.name, parentTag);
      if (tID.children.length > 0) {
        cj.each(tID.children, function(id, cID) {
          var childTagName;

          if (!/lcd/i.test(cID.name)) {
            childTagName = new BBTagLabel(cID.id);
            _this.addDLtop(childTagName, cID.name);
            _this.writeOutputData(cID, tID.id);
            return _this.addDLbottom;
          }
        });
        return this.addDLbottom();
      } else {
        return this.addDLbottom();
      }
    },
    addDLtop: function(tagName, name, except) {
      if (!except) {
        this.tagLvl++;
      }
      return this.output += "<dl class='lv-" + this.tagLvl + "' id='" + (tagName.addDD()) + "' data-name='" + name + "'>";
    },
    addDTtag: function(tagName, name, parentTag) {
      if (parentTag == null) {
        parentTag = this.treeTop;
      }
      this.output += "<dt class='lv-" + this.tagLvl + " " + this.tagType + "-" + (tagName.passThru()) + "' id='" + (tagName.add()) + "' data-tagid='" + (tagName.passThru()) + "' data-name='" + name + "' data-parentid='" + parentTag + "'>";
      this.output += "<div class='tag'><span class='name'>" + name + "</span></div>";
      return this.output += "</dt>";
    },
    addDLbottom: function() {
      this.tagLvl--;
      return this.output += "</dl>";
    },
    setDataType: function(name) {
      switch (name) {
        case "Issue Code":
          return this.tagType = "issueCode";
        case "Positions":
          return this.tagType = "position";
        case "Keywords":
          return this.tagType = "keyword";
        default:
          return this.tagType = "tag";
      }
    },
    addAutocompleteEntry: function(id, name) {
      this.autocompleteID.push(id);
      return this.autocompleteName.push(tID.name);
    },
    writeAutocompleteData: function() {
      return _treeData.autocomplete[this.treeTop] = {
        'name': this.autocompleteName,
        'id': this.autocompleteID
      };
    }
  };

  _treeData = {
    autocomplete: {},
    rawData: {},
    html: {}
  };

  instance = (function() {
    function instance() {
      var callAjax, dataSettings, displaySettings, k, onSave, pageElements, properties, v, _ref1,
        _this = this;

      properties = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      pageElements = {
        wrapper: '.JSTreeContainer',
        tagHolder: '.JSTree',
        messageHandler: '.JSMessages',
        tabLocation: '.JSTree-Tags',
        location: ''
      };
      onSave = false;
      dataSettings = {
        pullSets: [291, 296, 292],
        defaultTree: 291,
        contact: 0
      };
      displaySettings = {
        mode: 'edit',
        fullSize: true,
        autocomplete: true,
        print: true,
        showActive: true
      };
      callAjax = {
        url: '/civicrm/ajax/tag/tree',
        data: {
          entity_type: 'civicrm_contact',
          entity_id: 0,
          call_uri: window.location.href,
          entity_counts: 0
        },
        dataType: 'json'
      };
      _ref1 = properties[0];
      for (k in _ref1) {
        v = _ref1[k];
        switch (k) {
          case "pageElements":
            pageElements = v;
            break;
          case "onSave":
            onSave = v;
            break;
          case "dataSettings":
            dataSettings = v;
            break;
          case "displaySettings":
            displaySettings = v;
            break;
          case "callAjax":
            callAjax = v;
        }
      }
      this.get = function(name) {
        var getRet;

        getRet = {};
        if ('pageElements' === name) {
          cj.extend(true, getRet, pageElements);
        }
        if ('onSave' === name) {
          cj.extend(true, getRet, onSave);
        }
        if ('dataSettings' === name) {
          cj.extend(true, getRet, dataSettings);
        }
        if ('displaySettings' === name) {
          cj.extend(true, getRet, displaySettings);
        }
        if ('callAjax' === name) {
          cj.extend(true, getRet, callAjax);
        }
        return getRet;
      };
      this.set = function(name, obj) {
        if ('pageElements' === name) {
          cj.extend(true, pageElements, obj);
        }
        if ('onSave' === name) {
          cj.extend(true, onSave, obj);
        }
        if ('dataSettings' === name) {
          cj.extend(true, dataSettings, obj);
        }
        if ('displaySettings' === name) {
          cj.extend(true, displaySettings, obj);
        }
        if ('callAjax' === name) {
          return cj.extend(true, callAjax, obj);
        }
      };
    }

    return instance;

  })();

  typeIsArray = Array.isArray || function(value) {
    return {}.toString.call(value) === '[object Array]';
  };

  BBTagLabel = (function() {
    function BBTagLabel(tagID) {
      this.tagID = tagID;
    }

    BBTagLabel.prototype.add = function() {
      return "tagLabel_" + this.tagID;
    };

    BBTagLabel.prototype.remove = function() {
      return this.tagID.replace("tagLabel_", "");
    };

    BBTagLabel.prototype.addDD = function() {
      return "tagDropdown_" + this.tagID;
    };

    BBTagLabel.prototype.removeDD = function() {
      return this.tagID.replace("tagDropdown_", "");
    };

    BBTagLabel.prototype.passThru = function() {
      return this.tagID;
    };

    return BBTagLabel;

  })();

}).call(this);
