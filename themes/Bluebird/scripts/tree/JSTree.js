// Generated by CoffeeScript 1.6.3
(function() {
  var BBTagLabel, OpenLeg, View, getTrees, instance, parseTree, tree, treeBehavior, treeManipulation, utils, _treeData, _treeVisibility, _utils, _viewSettings,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  OpenLeg = (function() {
    var ajaxStructure, queryDefaults;

    function OpenLeg() {}

    OpenLeg.prototype.query = function(args, callback) {
      var page, term, year;
      this.callback = callback;
      if (!((args.term != null) || args.term.length >= 3)) {
        return false;
      }
      term = args.term;
      this.term = term;
      year = args.year;
      page = args.page || 1;
      this.page = ajaxStructure.data.pageIdx = page;
      return this.buildQuery(term, year, page);
    };

    OpenLeg.prototype.buildQuery = function(term, year) {
      var fOType, fOid, fTerm, fText, fYear, validjsonpterm;
      fTerm = "(" + term + "~ OR " + term + "*)";
      fOType = "(otype:" + queryDefaults.otype + ")";
      fYear = "(year:" + (this.getCurrentSessionYear(year)) + ")";
      fText = "(full:" + term + "~ OR full:" + term + "*)";
      fOid = "(oid:" + queryDefaults.oid + ")";
      console.log(validjsonpterm = bbUtils.spaceTo("underscore", term));
      ajaxStructure.jsonpCallback = "bb_" + validjsonpterm;
      ajaxStructure.data.term = "" + fTerm + " AND " + fOType + " AND " + fYear + " AND " + fText + " NOT " + fOid;
      return this.getQuery();
    };

    OpenLeg.prototype.getCurrentSessionYear = function(year) {
      var dateobject;
      if ((year != null) || isNaN(parseInt(year))) {
        dateobject = new Date();
        year = dateobject.getFullYear();
      }
      if (year % 2 === 0) {
        year = parseInt(year) - 1;
      }
      return year;
    };

    OpenLeg.prototype.getQuery = function() {
      var get,
        _this = this;
      get = cj.ajax(ajaxStructure);
      return get.done(function(data) {
        return _this.callback(_this.ripApartQueryData(data.response.metadata, data.response.results));
      });
    };

    OpenLeg.prototype.ripApartQueryData = function(metadata, results) {
      var index, pagesLeft, result, returnStructure, rs, _i, _len;
      pagesLeft = Math.floor((metadata.totalresults - results.length) / ajaxStructure.data.pageSize) - ajaxStructure.data.pageIdx;
      returnStructure = {
        seeXmore: metadata.totalresults - results.length,
        page: this.page,
        pagesLeft: pagesLeft,
        term: this.term,
        results: []
      };
      for (index = _i = 0, _len = results.length; _i < _len; index = ++_i) {
        result = results[index];
        rs = {
          noname: "" + result.oid + " - (" + result.data.bill.sponsor.fullname + ")",
          forname: "" + result.oid + " - for (" + result.data.bill.sponsor.fullname + ")",
          againstname: "" + result.oid + " - against (" + result.data.bill.sponsor.fullname + ")",
          description: "" + result.data.bill.title,
          url: "" + result.url
        };
        returnStructure.results.push(rs);
      }
      return returnStructure;
    };

    queryDefaults = {
      otype: 'bill',
      oid: 'A*',
      sort: 'modified',
      sortOrder: false
    };

    ajaxStructure = {
      url: 'http://open.nysenate.gov/legislation/2.0/search.jsonp',
      crossDomain: true,
      dataType: "jsonp",
      cache: true,
      data: {
        term: '',
        pageSize: 10,
        pageIdx: 1
      }
    };

    return OpenLeg;

  })();

  tree = {
    startInstance: function(submittedProperties) {
      var initInstance, request,
        _this = this;
      initInstance = new instance();
      this.setProp(submittedProperties, initInstance);
      request = cj.when(getTrees.getRawJSON(initInstance));
      request.done(function(data) {
        getTrees.putRawJSON(data.message, initInstance);
        parseTree.init(initInstance);
        return initInstance.set('ready', true);
      });
      return initInstance;
    },
    setProp: function() {
      var instance, k, properties, v, _i, _ref, _results;
      properties = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), instance = arguments[_i++];
      _ref = properties[0];
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push(instance.set(k, v));
      }
      return _results;
    }
  };

  treeBehavior = {
    getEntityTags: function() {},
    tagActions: function() {}
  };

  if (window.jstree == null) {
    window.jstree = tree;
  }

  if (window.CRM == null) {
    window.CRM = {};
  }

  getTrees = {
    getRawJSON: function(instance) {
      return cj.ajax(instance.get('callAjax'));
    },
    putRawJSON: function(data, instance) {
      return cj.each(data, function(i, tID) {
        var _ref;
        if (_ref = parseFloat(tID.id), __indexOf.call(instance.get('dataSettings').pullSets, _ref) >= 0) {
          return _treeData.rawData[tID.id] = {
            'name': tID.name,
            'children': tID.children
          };
        }
      });
    }
  };

  parseTree = {
    init: function(instance) {
      var _this = this;
      cj.each(_treeData.rawData, function(id, cID) {
        var tagName, _ref;
        if (_ref = parseFloat(id), __indexOf.call(instance.get('dataSettings').pullSets, _ref) >= 0) {
          _this.output = '';
          _this.tagLvl = 0;
          _this.setDataType(cID.name);
          _this.autocompleteObj = [];
          _this.treeTop = id;
          tagName = new BBTagLabel(id);
          _this.addTabName(cID.name, id);
          _this.output += "<dl class='top-" + id + " tagContainer'>";
          cj.each(cID.children, function(id, tID) {
            return _this.writeOutputData(tID);
          });
          _this.output += "</dl>";
          if (parseFloat(id) === 292) {
            return;
          }
          return _this.writeData();
        }
      });
      return console.log("Loaded Data at " + (new Date()));
    },
    isItemMarked: function(value, type) {
      if (value(true)) {
        return type;
      } else {
        return '';
      }
    },
    isItemChildless: function(childLength) {
      if (childLength > 0) {
        return 'treeButton';
      } else {
        return '';
      }
    },
    writeOutputData: function(tID, parentTag) {
      var hasChild, tagName,
        _this = this;
      tagName = new BBTagLabel(tID.id);
      this.addAutocompleteEntry(tID.id, tID.name);
      if (tID.children.length > 0) {
        hasChild = true;
      } else {
        hasChild = false;
      }
      this.addDTtag(tagName, tID.name, tID.description, parentTag, hasChild);
      this.addDLtop(tagName, tID.name);
      if (hasChild) {
        cj.each(tID.children, function(id, cID) {
          return _this.writeOutputData(cID, tID.id);
        });
        return this.addDLbottom();
      } else {
        return this.addDLbottom();
      }
    },
    addTabName: function(name, id) {
      return _treeData.treeNames[id] = name;
    },
    addDLtop: function(tagName, name) {
      return this.output += "<dl class='lv-" + this.tagLvl + "' id='" + (tagName.addDD()) + "' data-name='" + name + "'>";
    },
    addDTtag: function(tagName, name, description, parentTag, hasChild, except) {
      var hasDesc, treeButton;
      if (!except) {
        this.tagLvl++;
      }
      if (hasChild) {
        treeButton = "treeButton";
      } else {
        treeButton = "";
      }
      if (parentTag == null) {
        parentTag = this.treeTop;
      }
      hasDesc = "";
      if (description != null) {
        if (description.length > 0) {
          hasDesc = "description";
        }
        if (description.length > 0 && description.length <= 80) {
          hasDesc += " shortdescription";
        }
        if (description.length > 160) {
          hasDesc = "longdescription";
        }
        if (description.length > 80) {
          description = _utils.textWrap(description, 80);
        }
      }
      this.output += "<dt class='lv-" + this.tagLvl + " " + hasDesc + " " + this.tagType + "-" + (tagName.passThru()) + "' id='" + (tagName.add()) + "' data-tagid='" + (tagName.passThru()) + "' data-name='" + name + "' data-parentid='" + parentTag + "'>";
      this.output += "<div class='tag'>";
      this.output += "<div class='ddControl " + treeButton + "'></div>";
      this.output += "<span class='name'>" + name + "</span>";
      if (description != null) {
        this.output += "<div class='description'>" + description + "</div>";
      }
      return this.output += "</div></dt>";
    },
    addDLbottom: function() {
      this.tagLvl--;
      return this.output += "</dl>";
    },
    setDataType: function(name) {
      switch (name) {
        case "Issue Code":
          return this.tagType = "issueCode";
        case "Positions":
          return this.tagType = "position";
        case "Keywords":
          return this.tagType = "keyword";
        default:
          return this.tagType = "tag";
      }
    },
    addAutocompleteEntry: function(id, name) {
      var tempObj;
      tempObj = {
        "name": name,
        "id": id,
        "type": this.treeTop
      };
      return this.autocompleteObj.push(tempObj);
    },
    writeData: function() {
      _treeData.autocomplete = _treeData.autocomplete.concat(this.autocompleteObj);
      return _treeData.html[this.treeTop] = this.output;
    }
  };

  _treeData = {
    autocomplete: [],
    rawData: {},
    html: {},
    treeNames: []
  };

  instance = (function() {
    function instance() {
      var callAjax, dataSettings, displaySettings, onSave, pageElements, ready,
        _this = this;
      pageElements = {
        init: 'JSTreeInit',
        wrapper: 'JSTreeContainer',
        tagHolder: ['JSTree'],
        messageHandler: ['JSMessages'],
        location: ''
      };
      onSave = false;
      ready = false;
      dataSettings = {
        pullSets: [291, 296],
        contact: 0
      };
      displaySettings = {
        defaultTree: 291,
        mode: 'edit',
        size: 'full',
        autocomplete: true,
        print: true,
        showActive: true,
        showStubs: false
      };
      callAjax = {
        url: 'localtagdata.json',
        dataType: 'json'
      };
      this.get = function(name) {
        var getRet;
        getRet = {};
        if ('pageElements' === name) {
          cj.extend(true, getRet, pageElements);
        }
        if ('onSave' === name) {
          return onSave;
        }
        if ('dataSettings' === name) {
          cj.extend(true, getRet, dataSettings);
        }
        if ('displaySettings' === name) {
          cj.extend(true, getRet, displaySettings);
        }
        if ('callAjax' === name) {
          cj.extend(true, getRet, callAjax);
        }
        if ('ready' === name) {
          return ready;
        }
        return getRet;
      };
      this.set = function(name, obj) {
        if ('pageElements' === name) {
          obj = _this.checkForArray(pageElements, obj);
          cj.extend(true, pageElements, obj);
        }
        if ('onSave' === name) {
          onSave = obj;
        }
        if ('dataSettings' === name) {
          obj = _this.checkForArray(dataSettings, obj);
          cj.extend(true, dataSettings, obj);
        }
        if ('displaySettings' === name) {
          obj = _this.checkForArray(displaySettings, obj);
          cj.extend(true, displaySettings, obj);
        }
        if ('callAjax' === name) {
          obj = _this.checkForArray(callAjax, obj);
          cj.extend(true, callAjax, obj);
        }
        if ('ready' === name) {
          return ready = obj;
        }
      };
      this.getAutocomplete = function() {
        return _treeData.autocomplete;
      };
    }

    instance.prototype.removeDupFromExtend = function(obj) {
      var _this = this;
      return cj.each(obj, function(k, v) {
        if (cj.isPlainObject(v)) {
          _this.removeDupFromExtend(v);
        }
        return v = bbUtils.uniqueAry(v);
      });
    };

    instance.prototype.checkForArray = function(propDefault, obj) {
      return cj.each(obj, function(k, def) {
        var a, ar, b, c, i, _i, _j, _len, _len1;
        if (cj.isArray(def) && cj.isArray(propDefault[k])) {
          a = propDefault[k].sort();
          b = def.sort();
          for (i = _i = 0, _len = a.length; _i < _len; i = ++_i) {
            c = a[i];
            if (c !== b[i]) {
              for (_j = 0, _len1 = def.length; _j < _len1; _j++) {
                ar = def[_j];
                if (propDefault[k].indexOf(ar) < 0) {
                  propDefault[k].push(ar);
                }
              }
            }
          }
          return obj[k] = propDefault[k];
        }
      });
    };

    return instance;

  })();

  BBTagLabel = (function() {
    function BBTagLabel(tagID) {
      this.tagID = tagID;
    }

    BBTagLabel.prototype.add = function() {
      return "tagLabel_" + this.tagID;
    };

    BBTagLabel.prototype.remove = function() {
      return this.tagID.replace("tagLabel_", "");
    };

    BBTagLabel.prototype.addDD = function() {
      return "tagDropdown_" + this.tagID;
    };

    BBTagLabel.prototype.removeDD = function() {
      return this.tagID.replace("tagDropdown_", "");
    };

    BBTagLabel.prototype.passThru = function() {
      return this.tagID;
    };

    return BBTagLabel;

  })();

  _utils = {
    textWrap: function(text, length) {
      var a, numberOfSegs, rx, seg, shouldRet, toRet, _i;
      numberOfSegs = Math.ceil(text.length / length);
      toRet = "";
      shouldRet = false;
      rx = /\s|-| |\u00A0|\u8209|\r|\n/g;
      for (a = _i = 0; 0 <= numberOfSegs ? _i <= numberOfSegs : _i >= numberOfSegs; a = 0 <= numberOfSegs ? ++_i : --_i) {
        seg = text.slice(length * a, length * (a + 1));
        if (!seg.match(rx) && seg.length >= length) {
          shouldRet = true;
          toRet += "" + seg + " ";
        } else {
          toRet += "" + seg;
        }
      }
      if (shouldRet) {
        return toRet;
      }
      return text;
    }
  };

  window.jstree.views = {
    createNewView: function(instance) {
      var newView;
      return newView = new View(instance);
    }
  };

  View = (function() {
    function View(instance) {
      this.instance = instance;
      this.writeContainers();
      this.interval = this.setUpdateInterval(1000);
    }

    View.prototype.getData = function() {
      if (this.instance.get('ready') === true) {
        this.killUpdateInterval(this.interval);
        return this.writeTreeFromSource();
      }
    };

    View.prototype.setUpdateInterval = function(timeSet) {
      var callback,
        _this = this;
      callback = function() {
        return _this.getData();
      };
      return setInterval(callback, timeSet);
    };

    View.prototype.killUpdateInterval = function(clearInt) {
      return clearInterval(clearInt);
    };

    View.prototype.writeContainers = function() {
      this.formatPageElements();
      return this.addClassesToElement();
    };

    View.prototype.addClassesToElement = function() {
      this.cjInitHolderId.html("<div class='" + this.addClassHolderString + "'></div>");
      this.addMenuToElement();
      this.addTokenHolderToElement();
      this.addDataHolderToElement();
      return this.cjInitHolderId.removeClass(this.initHolderId).attr("id", this.addIdWrapperString);
    };

    View.prototype.addMenuToElement = function() {
      var menu;
      menu = "      <div class='" + this.menuName.menu + "'>       <div class='" + this.menuName.top + "'>        <div class='" + this.menuName.tabs + "'></div>        <div class='" + this.menuName.settings + "'></div>       </div>       <div class='" + this.menuName.bottom + "'>        <div class='" + this.menuName.autocomplete + "'>         <input type='text' id='JSTree-ac'>        </div>        <div class='" + this.menuName.settings + "'></div>       </div>      </div>    ";
      return this.cjInitHolderId.prepend(menu);
    };

    View.prototype.addDataHolderToElement = function() {
      var dataHolder;
      dataHolder = "<div id='JSTree-data' style='display:none'></div>";
      return this.cjInitHolderId.append(dataHolder);
    };

    View.prototype.addTokenHolderToElement = function() {
      var tokenHolder;
      tokenHolder = "      <div class='" + this.tokenHolder.tokenHolder + "'>       <div class='" + this.tokenHolder.resize + "'></div>       <div class='" + this.tokenHolder.body + "'>        <div class='" + this.tokenHolder.left + "'></div>        <div class='" + this.tokenHolder.options + "'></div>       </div>      </div>    ";
      return this.cjInitHolderId.append(tokenHolder);
    };

    View.prototype.addSearchBoxToElement = function() {};

    View.prototype.formatPageElements = function() {
      var displayElements, i, pageElements, selector, _i, _len, _ref, _ref1;
      pageElements = this.instance.get('pageElements');
      displayElements = this.instance.get('displayElements');
      _ref = ["", ""], this.tagHolderSelector = _ref[0], this.tagWrapperSelector = _ref[1];
      this.menuName = {
        menu: "",
        top: "",
        tabs: "",
        bottom: "",
        autocomplete: "",
        settings: ""
      };
      this.tokenHolder = {
        tokenHolder: "",
        options: "",
        body: "",
        resize: "",
        left: ""
      };
      this.addIdWrapperString = pageElements.wrapper;
      this.addBoxSizing = pageElements.size;
      this.addClassHolderString = pageElements.tagHolder;
      this.initHolderId = pageElements.init;
      this.cjInitHolderId = cj("." + this.initHolderId);
      this.addClassHolderString = this.ifisarrayjoin(this.addClassHolderString);
      _ref1 = pageElements.tagHolder;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        selector = _ref1[i];
        selector = selector.replace(" ", "-");
        this.menuName = this.concatOnObj(this.menuName, selector);
        this.tokenHolder = this.concatOnObj(this.tokenHolder, selector);
        this.tagHolderSelector = this.tagHolderSelector.concat("." + selector);
      }
      this.tagWrapperSelector = this.tagWrapperSelector.concat("#" + pageElements.wrapper);
      return console.log(displayElements);
    };

    View.prototype.separateSizeElements = function(el) {
      var a, b, classNames, _i, _len;
      el.replace(/\./, "");
      el.replace(/#/, "");
      classNames = el.split(" ");
      for (b = _i = 0, _len = classNames.length; _i < _len; b = ++_i) {
        a = classNames[b];
        el += "." + b;
      }
      return el;
    };

    View.prototype.ifisarrayjoin = function(toJoin) {
      if (cj.isArray(toJoin)) {
        return toJoin = toJoin.join(" ");
      }
    };

    View.prototype.concatOnObj = function(obj, selector, classOrId) {
      var k, v;
      if (classOrId == null) {
        classOrId = ".";
      }
      for (k in obj) {
        v = obj[k];
        if (k.substr(0, 3) === "cj_") {
          break;
        }
        if (typeof obj["cj_" + k] === "undefined") {
          obj["cj_" + k] = "";
        }
        obj["cj_" + k] = obj["cj_" + k].concat("" + classOrId + selector + "-" + k);
        obj[k] = obj[k].concat("" + selector + "-" + k + " ");
      }
      return obj;
    };

    View.prototype.getCJQsaves = function() {
      this.cjTagWrapperSelector = cj(this.tagWrapperSelector);
      this.cjTagHolderSelector = cj(this.tagHolderSelector);
      this.cjInstanceSelector = cj(this.tagWrapperSelector.concat(" " + this.tagHolderSelector));
      return this.cjTabs = cj(this.menuName.cj_tabs);
    };

    View.prototype.writeTreeFromSource = function() {
      var k, locals, v, _ref;
      this.getCJQsaves();
      this.displaySettings = this.instance.get('displaySettings');
      this.dataSettings = this.instance.get('dataSettings');
      locals = {
        "menu": this.menuName.cj_tabs,
        "top": this.displaySettings.defaultTree
      };
      treeBehavior.setLocals(locals);
      this.writeTabs();
      this.cjInstanceSelector.html(_treeData.html[this.displaySettings.defaultTree]);
      _ref = this.dataSettings.pullSets;
      for (k in _ref) {
        v = _ref[k];
        if (v !== this.displaySettings.defaultTree) {
          this.cjInstanceSelector.append(_treeData.html[v]);
          if (parseFloat(v) === 292) {
            treeBehavior.addPositionReminderText(this.cjInstanceSelector);
          }
        }
        treeBehavior.createOpacityFaker(".top-" + v, "dt", "type-" + v);
        cj("#JSTree-data").append(_treeData.html[v]);
      }
      this.cjInstanceSelector.find(".top-" + this.displaySettings.defaultTree).addClass("active");
      treeBehavior.setCurrentTab(_treeData.treeTabs[this.displaySettings.defaultTree]);
      treeBehavior.autoCompleteStart(this.instance);
      treeBehavior.readDropdownsFromLocal();
      return treeBehavior.enableDropdowns();
    };

    View.prototype.writeTabs = function() {
      var b, k, output, v, _ref, _results;
      output = "";
      _treeData.treeTabs = {};
      _ref = _treeData.treeNames;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        b = v.replace(" ", "-");
        b = b.toLowerCase();
        treeBehavior.appendTab(b, v);
        _treeData.treeTabs[k] = "tab-" + b;
        _results.push(treeBehavior.createTabClick("tab-" + b, "top-" + k));
      }
      return _results;
    };

    return View;

  })();

  _treeVisibility = {
    currentTree: "",
    defaultTree: "",
    previousTree: ""
  };

  treeBehavior = {
    addPositionReminderText: function(cjlocation) {
      var positionText;
      positionText = "            <dl class='top-292 tagContainer' style='display:none'>              <div class='position-box-text-reminder'>                Type in a Bill Number or Name for Results              </div>            </dl>          ";
      return cjlocation.append(positionText);
    },
    setLocals: function(locals) {
      if (locals.menu != null) {
        this.tabsLoc = locals.menu;
      }
      if (locals.top != null) {
        if (_treeVisibility.currentTree === "") {
          return _treeVisibility.currentTree = "top-" + locals.top;
        }
      }
    },
    autoCompleteStart: function(instance) {
      var cjac, params, searchmonger,
        _this = this;
      this.instance = instance;
      this.pageElements = this.instance.get('pageElements');
      this.dataSettings = this.instance.get('dataSettings');
      if (this.cjTagBox == null) {
        this.cjTagBox = cj("." + (this.pageElements.tagHolder.join(".")));
      }
      cj("#JSTree-data").data({
        "autocomplete": this.instance.getAutocomplete()
      });
      params = {
        jqDataReference: "#JSTree-data",
        hintText: "Type in a partial or complete name of an tag or keyword.",
        theme: "JSTree"
      };
      cjac = cj("#JSTree-ac");
      searchmonger = cjac.tagACInput("init", params);
      cjac.on("keydown", (function(event) {
        return _this.filterKeydownEvents(event, searchmonger, cjac);
      }));
      return cjac.on("keyup", (function(event) {
        var keyCode;
        keyCode = bbUtils.keyCode(event);
        if (keyCode.type === "delete" && cjac.val().length <= 3) {
          return _this.clearBoard();
        }
      }));
    },
    _dropdown: {
      inDropdown: false,
      isDrawn: false,
      hasLength: false
    },
    filterKeydownEvents: function(event, searchmonger, cjac) {
      var keyCode;
      keyCode = bbUtils.keyCode(event);
      switch (keyCode.type) {
        case "directional":
          return this.moveDropdown(keyCode.type);
        case "letters":
        case "delete":
        case "math":
        case "punctuation":
        case "number":
          return this.execSearch(event, searchmonger, cjac);
        default:
          return false;
      }
    },
    separateHits: function(terms, results) {
      var hits, k, v;
      hits = {};
      for (k in terms) {
        v = terms[k];
        hits[k] = v.length;
      }
      hits[292] = results.seeXmore + results.results.length;
      return hits;
    },
    execSearch: function(event, searchmonger, cjac) {
      var _this = this;
      return searchmonger.exec(event, function(terms) {
        var openLeg;
        openLeg = new OpenLeg;
        console.log(terms);
        if ((terms != null) && !cj.isEmptyObject(terms)) {
          return openLeg.query({
            "term": terms.term
          }, function(results) {
            var foundTags, hcounts, hits, k, set, tags, v, _i, _len, _ref;
            _this.getNextPositionRound(results);
            tags = _this.sortSearchedTags(terms.tags);
            hits = _this.separateHits(tags, results);
            hcounts = 0;
            foundTags = [];
            for (k in hits) {
              v = hits[k];
              hcounts += v;
              foundTags.push(parseFloat(k));
            }
            _ref = _this.dataSettings.pullSets;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              set = _ref[_i];
              if (foundTags.indexOf(parseFloat(set)) < 0) {
                hits[set] = 0;
                tags[set] = [];
              }
            }
            _this.removePreviousList();
            return _this.buildFilterList(tags, terms.term.toLowerCase(), hits);
          });
        }
      });
    },
    clearBoard: function() {
      this.removePositions();
      this.removePreviousList();
      this.removeTabResults();
      if (this.isFiltered) {
        this.shouldFilter = true;
        return this.toggleFilterList();
      }
    },
    positionIdNumber: 292000,
    removePositions: function() {
      return cj(".JSTree .top-292 :not(:first-child)").remove();
    },
    sortSearchedTags: function(tags) {
      var list;
      list = {};
      cj.each(tags, function(i, el) {
        var obj;
        if (list[el.type] == null) {
          list[el.type] = [];
        }
        obj = {
          id: el.id,
          name: el.name
        };
        return list[el.type].push(obj);
      });
      return list;
    },
    getNextPositionRound: function(results) {
      this.positionPage = results.page + 1;
      this.positionPagesLeft = results.pagesLeft;
      return this.positionSearchTerm = results.term;
    },
    addPositionsToTags: function(positions) {
      var agipos, format, forpos, k, neupos, o;
      format = [];
      for (k in positions) {
        o = positions[k];
        forpos = {
          name: o.forname,
          id: "" + (this.positionIdNumber + 1)
        };
        agipos = {
          name: o.againstname,
          id: "" + (this.positionIdNumber + 2)
        };
        neupos = {
          name: o.noname,
          id: "" + (this.positionIdNumber + 3)
        };
        forpos.type = agipos.type = neupos.type = "292";
        forpos.description = agipos.description = neupos.description = o.description;
        forpos.url = agipos.url = neupos.url = o.url;
        format.push(forpos);
        format.push(agipos);
        format.push(neupos);
        this.positionIdNumber = this.positionIdNumber + 10;
      }
      return this.positionListing = format;
    },
    moveDropdown: function(keyCode) {},
    grabParents: function(cjParentId) {
      var go, newid, parentid;
      if (this.dataSettings.pullSets.indexOf(cjParentId) !== -1) {
        return [];
      }
      go = true;
      parentid = [cjParentId];
      while (go) {
        newid = this.cjTagBox.find("dt[data-tagid=" + parentid[parentid.length - 1] + "]").data("parentid");
        if (this.dataSettings.pullSets.indexOf(newid) < 0) {
          parentid.push(newid);
        } else {
          go = false;
        }
      }
      return parentid;
    },
    removePreviousList: function() {
      return cj(".JSTree dl .filteredList").remove();
    },
    buildParents: function(cjDataBox, parentArray, domList) {
      var cjDomList, clonedName, clonedTag, clonedTagLvl, index, output, parentid, _i, _len;
      this.cjDataBox = cjDataBox;
      output = "";
      parentArray.reverse();
      cjDomList = cj(domList);
      for (index = _i = 0, _len = parentArray.length; _i < _len; index = ++_i) {
        parentid = parentArray[index];
        clonedTag = this.cjDataBox.find("dt[data-tagid=" + parentid + "]").clone();
        console.log(clonedTag);
        clonedTagLvl = treeManipulation.parseLvl(clonedTag.attr("class"));
        clonedName = clonedTag.data('name');
        if (index === 0) {
          if (this.alreadyPlaced.indexOf(parentid) < 0) {
            this.alreadyPlaced.push(parentid);
            cjDomList.append(treeManipulation.createDL(clonedTagLvl, parentid, clonedName));
            cjDomList.find("#tagDropdown_" + parentid).before(clonedTag).addClass("open");
          }
        } else {
          if (this.alreadyPlaced.indexOf(parentid) < 0) {
            cjDomList.find("#tagDropdown_" + parentid).after(treeManipulation.createDL(clonedTagLvl, parentid, clonedName)).append(clonedTag);
          }
        }
      }
      return domList;
    },
    buildFilterList: function(tagList, term, hits) {
      var allDropdowns, filteredList, k, name, v,
        _this = this;
      if (cj(".JSTree.isFiltered").length === 0) {
        this.shouldFilter = true;
        this.toggleFilterList();
      }
      for (k in hits) {
        v = hits[k];
        if (v === 0) {
          cj("<div class='noResultsFound'>No Results Found</div>").appendTo(".JSTree.isFiltered .top-" + k);
        }
      }
      for (k in hits) {
        v = hits[k];
        name = this.convertTreeNameToTab("top-" + k);
        this.setTabResults(v, name);
      }
      for (k in tagList) {
        v = tagList[k];
        if (v.length > 0) {
          filteredList = this.createFilteredList(v);
          cj(filteredList).appendTo(".JSTree .top-" + k);
        } else {
          console.log("no matches");
        }
        allDropdowns = cj(".JSTree.isFiltered .top-" + k + " dt .tag .ddControl.treeButton").parent().parent();
        cj.each(allDropdowns, function(key, value) {
          var tagid;
          tagid = cj(value).data('tagid');
          if (!(cj(".JSTree.isFiltered .top-" + k + " dl#tagDropdown_" + tagid).children().length > 0)) {
            cj(value).find(".ddControl.treeButton").removeClass("treeButton");
          }
          if (tagid != null) {
            return _this.enableDropdowns(".top-" + k + " dt[data-tagid='" + tagid + "']", true);
          }
        });
      }
      return this.buildPositions();
    },
    shouldFilter: false,
    isFiltered: false,
    toggleFilterList: function() {
      var a, addActive, lists, thisBox, _i, _j, _len, _len1;
      if (!this.shouldFilter) {
        return false;
      }
      lists = [291, 296];
      if (this.isFiltered) {
        for (_i = 0, _len = lists.length; _i < _len; _i++) {
          a = lists[_i];
          cj("#BBTreeContainer #JSTree-data .top-" + a).children().clone().appendTo(".JSTree .top-" + a);
          cj(".JSTree .top-" + a).removeClass("filtered");
        }
        cj(".JSTree .top-292").removeClass("filtered");
        cj(".JSTree .top-292 .position-box-text-reminder").show();
        cj(".JSTree").removeClass("isFiltered");
        this.isFiltered = false;
      } else {
        addActive = "";
        cj(".JSTree").addClass("isFiltered");
        for (_j = 0, _len1 = lists.length; _j < _len1; _j++) {
          a = lists[_j];
          thisBox = cj(".JSTree .tagContainer[class*=\"" + a + "\"]");
          thisBox.empty();
          thisBox.addClass("filtered");
        }
        cj(".JSTree .top-292").addClass("filtered");
        cj(".JSTree .top-292 .position-box-text-reminder").hide();
        this.isFiltered = true;
      }
      return this.shouldFilter = false;
    },
    getActiveTab: function() {
      var a, i, _i, _len;
      a = cj(".JSTree-menu .JSTree-tabs .active").attr("class").split(" ");
      for (_i = 0, _len = a.length; _i < _len; _i++) {
        i = a[_i];
        if (i !== "active") {
          return i;
        }
      }
    },
    alreadyPlaced: [],
    cjDataBox: "",
    createFilteredList: function(tagList) {
      var cjCloneName, cjCloneTag, cjCloneTagLvl, cjDomList, cjParentId, dl, domList, filteredList, gpid, key, parentTags, parentsId, parentsIds, parentsToGet, pid, tag, toFindParentOf, _i, _j, _len, _len1;
      this.cjDataBox = cj("#JSTree-data .tagContainer");
      parentsIds = [];
      parentsToGet = [];
      domList = cj();
      domList = domList.add("<div class='filteredList'></div>");
      filteredList = "";
      for (key in tagList) {
        tag = tagList[key];
        toFindParentOf = this.cjDataBox.find("dt[data-tagid=" + tag.id + "]").data("parentid");
        if ((toFindParentOf != null) && this.dataSettings.pullSets.indexOf(toFindParentOf) < 0) {
          parentsIds.push(toFindParentOf);
        }
      }
      parentsIds = bbUtils.compact(bbUtils.uniqueAry(parentsIds));
      for (_i = 0, _len = parentsIds.length; _i < _len; _i++) {
        parentsId = parentsIds[_i];
        gpid = this.getParents(this.cjDataBox, parentsId);
        if (gpid != null) {
          parentsToGet.push(gpid);
        }
      }
      console.log(parentsToGet);
      if (parentsToGet.length > 0) {
        for (_j = 0, _len1 = parentsToGet.length; _j < _len1; _j++) {
          parentTags = parentsToGet[_j];
          domList = this.buildParents(this.cjDataBox, parentTags, domList);
        }
      }
      cjDomList = cj(domList);
      console.log(tagList);
      for (key in tagList) {
        tag = tagList[key];
        cjCloneTag = this.cjDataBox.find("dt[data-tagid=" + tag.id + "]").clone();
        cjParentId = cjCloneTag.data("parentid");
        cjCloneTagLvl = treeManipulation.parseLvl(cjCloneTag.attr("class"));
        cjCloneName = cjCloneTag.data('name');
        pid = parseFloat(cjParentId);
        if (this.alreadyPlaced.indexOf(parseFloat(tag.id)) < 0) {
          if (parentsIds.indexOf(parseFloat(cjParentId)) >= 0) {
            cjDomList.find("#tagDropdown_" + cjParentId).append(cjCloneTag);
          } else {
            dl = treeManipulation.createDL(cjCloneTagLvl, cjParentId, cjCloneName);
            cjDomList.append(dl);
            cjDomList.append(cjCloneTag);
          }
          this.alreadyPlaced.push(parseFloat(tag.id));
        }
      }
      return domList;
    },
    getParents: function(cjDataBox, parentsId) {
      var currentId, go, i, newid, parentArray;
      this.cjDataBox = cjDataBox;
      if (this.dataSettings.pullSets.indexOf(parentsId) !== -1) {
        return;
      }
      go = true;
      i = 0;
      parentArray = [parentsId];
      currentId = parentsId;
      while (go) {
        newid = this.cjDataBox.find("dt[data-tagid=" + currentId + "]").data("parentid");
        if (this.dataSettings.pullSets.indexOf(newid) < 0) {
          parentArray.push(newid);
          currentId = newid;
        } else {
          go = false;
        }
        i += 1;
        if (i === 5) {
          go = false;
        }
      }
      return parentArray;
    },
    buildPositions: function() {
      var k, o, openLeg, options, _ref,
        _this = this;
      _ref = this.positionListing;
      for (k in _ref) {
        o = _ref[k];
        cj(treeManipulation.createDT(1, o.id, o.name, 292, "", o.description)).appendTo(".JSTree .top-292.tagContainer");
      }
      if (this.positionPagesLeft > 1) {
        openLeg = new OpenLeg;
        options = {
          scrollBox: ".JSTree"
        };
        return cj(".JSTree .top-292.tagContainer").infiniscroll(options, function() {
          var nextPage;
          nextPage = {
            term: _this.positionSearchTerm,
            page: _this.positionPage
          };
          cj(".JSTree .top-292.tagContainer").append(_this.addPositionLoader());
          return openLeg.query(nextPage, function(results) {
            _this.addPositionsToTags(results.results);
            cj(".JSTree .top-292.tagContainer .loadingGif").remove();
            _this.getNextPositionRound(results);
            return _this.buildPositions();
          });
        });
      }
    },
    addPositionLoader: function() {
      return "<dt class='loadingGif' data-parentid='292'><div class='tag'><div class='ddControl'></div><div class='loadingText'>Loading...</div></div><div class='transparancyBox type-292'></div></dt>";
    },
    switchToSearch: function(tagListLength) {},
    makeShade: function(tagid, term) {},
    cloneChildren: function(cjTag, tagList) {
      var hasRelevantPs, key, setReturn, tag;
      setReturn = true;
      for (key in tagList) {
        tag = tagList[key];
        hasRelevantPs = cjTag.parents("dl#tagDropdown_" + tag.id);
        if (hasRelevantPs.length > 0) {
          setReturn = false;
        }
      }
      return setReturn;
    },
    setTabResults: function(number, tabName) {
      var result, tab;
      tab = cj("" + this.tabsLoc + " ." + tabName);
      tab.find("span").remove();
      result = tab.html();
      return tab.html("" + result + "<span>(" + number + ")</span>");
    },
    removeTabResults: function() {
      var tab;
      tab = cj("" + this.tabsLoc + " [class*=\"tab-\"]");
      return tab.find("span").remove();
    },
    setCurrentTab: function(treeTag) {
      cj("" + this.tabsLoc).find(".active").toggleClass("active");
      return cj("" + this.tabsLoc).find("." + treeTag).toggleClass("active");
    },
    showTags: function(currentTree, noPrev) {
      if (currentTree !== _treeVisibility.currentTree) {
        this.cjTagBox.find("." + _treeVisibility.currentTree).toggle().removeClass("active");
        _treeVisibility.previousTree = _treeVisibility.currentTree;
        _treeVisibility.currentTree = currentTree;
        this.cjTagBox.find("." + currentTree).toggle().addClass("active");
        return this.setCurrentTab(this.convertTreeNameToTab(currentTree));
      }
    },
    convertTreeNameToTab: function(treeName) {
      var parsed, splitted;
      splitted = treeName.split("-");
      parsed = parseInt(splitted[splitted.length - 1]);
      if (!isNaN(parsed)) {
        return "" + _treeData.treeTabs[parsed];
      } else {
        if (treeName === "search") {
          return "tab-" + treeName;
        }
      }
    },
    convertTabToTreeName: function(tab) {
      var k, v, _ref;
      _ref = _treeData.treeTabs;
      for (k in _ref) {
        v = _ref[k];
        if (v === tab) {
          return "top-" + k;
        }
      }
    },
    appendTab: function(a, c, hidden) {
      var cjtabloc, output, style;
      if (hidden == null) {
        hidden = false;
      }
      style = "";
      if (hidden) {
        style = "style='display:none'";
      }
      cjtabloc = cj("" + this.tabsLoc);
      output = "<div class='tab-" + a + "' " + style + ">" + c + "</div>";
      return cjtabloc.append(output);
    },
    autoCompleteEnd: function(instance) {
      this.instance = instance;
      return cj("#JSTree-ac").off("keydown");
    },
    processSearchChildren: function(tagArray) {
      var alreadyProcessed, parent, parents, tag, _i, _len, _results;
      alreadyProcessed = [];
      _results = [];
      for (_i = 0, _len = tagArray.length; _i < _len; _i++) {
        tag = tagArray[_i];
        parents = this.grabParents(tag);
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = parents.length; _j < _len1; _j++) {
            parent = parents[_j];
            if (alreadyProcessed.indexOf(parent) < 0 && parent !== tag) {
              _results1.push(alreadyProcessed.push(parent));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    },
    createTabClick: function(tabName, tabTree) {
      var _this = this;
      cj(".JSTree-tabs ." + tabName).off("click");
      return cj(".JSTree-tabs ." + tabName).on("click", function() {
        return _this.showTags(tabTree);
      });
    },
    enableDropdowns: function(tag, search) {
      if (tag == null) {
        tag = "";
      }
      if (search == null) {
        search = false;
      }
      cj(".JSTree " + tag + " .treeButton").off("click");
      return cj(".JSTree " + tag + " .treeButton").on("click", function() {
        return treeBehavior.dropdownItem(cj(this).parent().parent(), search);
      });
    },
    createOpacityFaker: function(container, parent, cssClass) {
      var cjItems;
      if (cssClass == null) {
        cssClass = "";
      }
      cjItems = cj("" + container + " " + parent);
      return cjItems.append("<div class='transparancyBox " + cssClass + "'></div>");
    },
    dropdownItem: function(tagLabel, search) {
      var tagid,
        _this = this;
      if (search == null) {
        search = false;
      }
      tagid = tagLabel.data('tagid');
      tagLabel.siblings("dl#tagDropdown_" + tagid).slideToggle("200", function() {
        if (tagLabel.is(".open")) {
          _viewSettings["openTags"][tagid] = false;
        } else {
          _viewSettings["openTags"][tagid] = true;
        }
        return tagLabel.toggleClass("open");
      });
      if (!search) {
        return bbUtils.localStorage("tagViewSettings", _viewSettings["openTags"]);
      }
    },
    readDropdownsFromLocal: function() {
      var bool, tag, toPass, _ref;
      if (bbUtils.localStorage("tagViewSettings")) {
        _viewSettings["openTags"] = bbUtils.localStorage("tagViewSettings");
        _ref = bbUtils.localStorage("tagViewSettings");
        for (tag in _ref) {
          bool = _ref[tag];
          if (bool) {
            toPass = cj("dt.tag-" + tag);
            this.dropdownItem(toPass);
          } else {
            delete _viewSettings["openTags"][tag];
          }
        }
      } else {

      }
      return _viewSettings["openTags"];
    }
  };

  _viewSettings = {
    openTags: {}
  };

  utils = {
    loadingGif: function() {
      return cj("." + (this.pageElements.tagHolder.join("."))).toggleClass("loadingGif");
    }
  };

  treeManipulation = {
    parseLvl: function(tags) {
      var tag, tagArr, _i, _len;
      tagArr = tags.split(" ");
      for (_i = 0, _len = tagArr.length; _i < _len; _i++) {
        tag = tagArr[_i];
        if (tag.indexOf("lv-") !== -1) {
          return tag.slice(3);
        }
      }
    },
    createDL: function(lvl, id, name) {
      return "<dl class='lv-" + lvl + "' id='tagDropdown_" + id + "' data-name='" + name + "'></dl>";
    },
    createDT: function(lvl, id, name, parent, treeButton, description) {
      var hasDesc, output;
      if (lvl == null) {
        lvl = 0;
      }
      if (treeButton == null) {
        treeButton = "";
      }
      if (description == null) {
        description = "";
      }
      hasDesc = "";
      if (description != null) {
        if (description.length > 0) {
          hasDesc = "description";
        }
        if (description.length > 0 && description.length <= 80) {
          hasDesc += " shortdescription";
        }
        if (description.length > 160) {
          hasDesc = "longdescription";
        }
        if (description.length > 80) {
          description = _utils.textWrap(description, 80);
        }
      }
      output = "<dt class='lv-" + lvl + " tag-" + id + " " + hasDesc + "' id='tagLabel_" + id + "' data-tagid='" + id + "' data-name='" + name + "' data-parentid='" + parent + "'>";
      output += "<div class='tag'>";
      output += "<div class='ddControl " + treeButton + "'></div>";
      output += "<span class='name'>" + name + "</span>";
      if (description != null) {
        output += "<div class='description'>" + description + "</div>";
      }
      output += "</div>";
      output += "<div class='transparancyBox type-" + parent + "'></div>";
      output += "</dt>";
      return output;
    }
  };

  /*
  neat
  <script>
  $("div").attr("id", function (arr) {
    return "div-id" + arr;
  })
  .each(function () {
    $("span", this).html("(ID = '<b>" + this.id + "</b>')");
  });
  </script>
  */


}).call(this);
