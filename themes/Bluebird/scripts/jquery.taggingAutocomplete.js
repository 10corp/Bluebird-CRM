// Generated by CoffeeScript 1.6.2
/*
# Name:    jquery.taggingAutocomplete.js
# By:      Dan Pozzie
# Updated: 18/5/2013
# Purpose: Hook JQuery UI Autocomplete for tagging usages in a
#          coffeescript environment, while moving the token-input
#          aspect from civicrm's core jquery.tokeninput.js. Instead
#          of hooking and modifying it out a lot of additional
#          functionality that isn't in tokeninput's scope, leverage
#          jquery ui's AC to do the following:
#
*/


(function() {
  (function($, window, document) {
    var $this, methods, _anotherState, _flag, _internals, _settings;

    $this = void 0;
    _settings = {
      jqDataReference: "",
      hintText: "Type in a partial or complete name of an tag or keyword.",
      theme: "JSTree",
      ajaxLocation: "",
      textBoxLocation: "#JSTree-ac"
    };
    _flag = false;
    _anotherState = null;
    methods = {
      init: function(options) {
        $this = $(this);
        $.extend(_settings, options || {});
        _internals.enableAC();
        return $this;
      },
      kill: function(note) {
        console.log("Killed with: " + note);
        return $this;
      }
    };
    _internals = {
      enableAC: function() {
        var dataSource;

        dataSource = this.turnDataLocation();
        console.log("isArray?: " + (cj.isArray(dataSource)));
        console.log(dataSource);
        return $("" + _settings.textBoxLocation).autocomplete({
          source: dataSource
        });
      },
      turnDataLocation: function() {
        var cjDataSource;

        if (_settings.jqDataReference != null) {
          cjDataSource = cj(_settings.jqDataReference).data("autocomplete");
          return cjDataSource;
        } else if (_settings.ajaxLocation != null) {
          return _settings.ajaxLocation;
        } else {
          return methods.kill("No Data Location");
        }
      },
      toggleFlag: function() {
        return _flag = !_flag;
      },
      computeSomething: function(state, flag) {
        return flag != null ? flag : {
          state: "No, that's not right."
        };
      }
    };
    return $.fn.tagACInput = function(method) {
      if (methods[method]) {
        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
      } else if (typeof method === "object" || !method) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error("Method " + method + " does not exist on jquery.tagACInput");
      }
    };
  })(cj, window, document);

}).call(this);
