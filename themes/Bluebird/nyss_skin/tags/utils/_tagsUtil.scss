/*vars*/
  $textColor:#000;
  /*icons*/
  $functionIconLink : "/sites/default/themes/Bluebird/nyss_skin/images/fcb.png";
  $defaultIconLink : "/sites/default/themes/Bluebird/nyss_skin/images/icons-3e3e3e.png";
  $levelClassSlug: "lv";
  /*boxwidth*/
  $inputBoxWidthFull: 522px;
  $inputBoxWidthShort: 285px;
  $normalTagWidth: 505px;
  $inputBox: 0px;

  /* colors */
  $keywordsColor: #EBB931;
  $positionsColor: #6FD5E3;
  $issueCodesColor: #5AD170;
  $searchColor: #BF5866;

/*mixins*/


/* page size */

/* fCB icon mixins, would like to make this into an each statement once Variable Interpolation comes out */
@mixin functionIcon($setIconLink) {
  background-image: url('#{$setIconLink}') !important;
  cursor: pointer;
}
@mixin addTag {
  .addTag {
    @include functionIcon($functionIconLink); background-color: transparent; background-position: 0;
  }
}
@mixin removeTag {
  .removeTag{
    @include functionIcon($functionIconLink); background-color: transparent; background-position: -17px 0px;
  }
}
@mixin moveTag {
  .moveTag {
    @include functionIcon($functionIconLink); background-color: transparent; background-position: -34px 0px;
  }
}
@mixin updateTag {
  .updateTag{
    @include functionIcon($functionIconLink); background-color: transparent; background-position: -50px 0px;
  }
}
@mixin mergeTag {
  .mergeTag{
    @include functionIcon($functionIconLink); background-color: transparent; background-position: -66px 0px;
  }
}
@mixin convertTag {
  .convertTag{
    @include functionIcon($functionIconLink); background-color: transparent; background-position: -107px 0px;
  }
}
@mixin printTag {
  .printTag{
    @include functionIcon($defaultIconLink); background-color: transparent; background-position: -160px -96px;
  }
}
@mixin closeButton {
  .closeButton{
    @include functionIcon($defaultIconLink); background-color: transparent; background-position: -97px -129px;
  }
}
@mixin editIssueCodeButtons {
  @include addTag;
  @include removeTag;
  @include moveTag;
  @include updateTag;
  @include mergeTag;
}
@mixin editKeywordButtons {
  @include addTag;
  @include removeTag;
  @include updateTag;
  @include mergeTag;
  @include convertTag;
}

@mixin iterator {
  @for $i from 1 through 10 {
    dl.#{$levelClassSlug}-#{$i}
    {
      // width: 100% - (2*$i);
      @if $i != 0
      {
        margin-left: 2%;
      }
      @if $i > 0
      {
        display:none;
      }
      
    }
    dt.#{$levelClassSlug}-#{$i}
    {
      @if $i == 0
      {
        width: 485px;
        margin: 10px 10px 0;
        .treeButton {
          display:none;
        }
        .tag {
          font-size: 14px;
          font-weight:bold;
        }
      }
      @if $i != 0 {
      }
    }
  }
}
@mixin in-and-out-hover-opacity($color) {
  background-color:rgba(lighten($color,10%),.6);
  &:hover {
    background-color:rgba($color,1);
  }
  &.active {
    background-color:rgba($color,.8);
    font-weight:bold;
  }
}
@mixin tag-lightness($color,$opacity) {
  background-color:rgba(lighten($color,15%),$opacity);
}
@mixin descriptionChange($lines) {
  height:20px*$lines;
  .tag {
    height:20px*$lines;
  }
  .transparancyBox {
    height: 20px*$lines;
    top: -20px*$lines;
  }
  .description {
    position:absolute;
    bottom:2px;
    left:2px;
  }
}
$default_rounded_amount: 5px;
// Round corner at position by amount.
@mixin round-corner($position, $amount: $default_rounded_amount){
  border-#{$position}-radius: $amount;
  -webkit-border-#{$position}-radius: $amount;
}
 
@mixin round-corner-mozilla($position, $amount: $default_rounded_amount){
  -moz-border-radius-#{$position}: $amount;
}
// Round left corners by amount
@mixin round-left-corners($amount: $default_rounded_amount){
  @include round-corner("top-left", $amount);
  @include round-corner("bottom-left", $amount);
  @include round-corner-mozilla("topleft", $amount);
  @include round-corner-mozilla("bottomleft", $amount);
} 
// Round right corners by amount
@mixin round-right-corners($amount: $default_rounded_amount){
  @include round-corner("top-right", $amount);
  @include round-corner("bottom-right", $amount);
  @include round-corner-mozilla("topright", $amount);
  @include round-corner-mozilla("bottomright", $amount);
} 
// Round top corners by amount
@mixin round-top-corners($amount: $default_rounded_amount){
  @include round-corner("top-left", $amount);
  @include round-corner("top-right", $amount);
  @include round-corner-mozilla("topleft", $amount);
  @include round-corner-mozilla("topright", $amount);
} 
// Round bottom corners by amount
@mixin round-bottom-corners($amount: $default_rounded_amount){
  @include round-corner("bottom-left", $amount);
  @include round-corner("bottom-right", $amount);
  @include round-corner-mozilla("bottomleft", $amount);
  @include round-corner-mozilla("bottomright", $amount);
} 
// Round all corners by amount
@mixin round-corners($amount: $default_rounded_amount){
  border-radius: $amount;
  -moz-border-radius: $amount;
  -webkit-border-radius: $amount;
}
@mixin addColors($color,$opacity) {
  @include tag-lightness($color,$opacity);
  dt.shaded {
    @include tag-lightness($color,($opacity+.05));
  }
  dt:hover {
    @include tag-lightness($color,($opacity+.45));
  }
  dt.active {
    @include tag-lightness($color,($opacity+.45));
  }
}
@mixin inset-shadow($horizontal:0, $vertical:1px, $blur:2px, $alpha:0.4) {
  -webkit-box-shadow: inset $horizontal $vertical $blur rgba(0, 0, 0, $alpha);
  -moz-box-shadow: inset $horizontal $vertical $blur rgba(0, 0, 0, $alpha);
  box-shadow: inset $horizontal $vertical $blur rgba(0, 0, 0, $alpha);
}
@import "extends";