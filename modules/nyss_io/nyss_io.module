<?php

//define(NYSSIODEBUG,false);
define(NYSSIODEBUG,true);

require_once(dirname(__FILE__) . '/nyss_lib.php');
require_once(dirname(__FILE__) . '/nyss_io.php');

function nyss_io_menu () {

  $items = array();

  $items['importdata'] = array (
    'title' => t('Import Data'),
    'page callback' => 'nyss_ioimportdata_page',
    'access arguments' => array('export print production files'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $items;
}

function nyss_ioimportdata_page() {

        return drupal_get_form('nyss_ioimport_form');
}
          
function nyss_ioimport_form() {

   $form = array();

   $form['#attributes'] = array('enctype' => "multipart/form-data");

   $form['csv'] = array(
     '#type' => 'file',
     '#title' => t('Upload a file'),
     '#size' => 40,
   );

   $form['servercsv'] = array(
     '#type' => 'textfield',
     '#title' => t('OR specify a filename on the server in the \'/data/importData\' dir'),
     '#size' => 40,
   );

   $form['sendemail'] = array(
     '#type' => 'checkbox',
     '#title' => t('Send summary email'),
     '#default_value' => 0,
   );

   $form['dryrun'] = array(
     '#type' => 'checkbox',
     '#title' => t('Dry Run (parses data but does not alter the instance)'),
     '#default_value' => 1,
   );

   $form['runnum'] = array(
     '#type' => 'select',
     '#title' => t('How many records to process in dry run mode (must be set to ALL for the real import)'),
     '#options' => array(
	     '10' => t('10'),
	     '100' => t('100'),
	     '500' => t('500'),
	     '1000' => t('1000'),
	     'All' => t('All'),
	),
     '#default_value' => '10',
   );
   
   $form['addtogroup'] = array(
     '#type' => 'textfield',
     '#title' => t('Add contacts to a group. If the group name does not exist, it will be created.'),
     '#size' => 40,
   );
   
   $form['boeimport'] = array(
     '#type' => 'checkbox',
     '#title' => t('Process as a BOE import.'),
     '#default_value' => 1,
   );
   
   $form['birthdateoverride'] = array(
     '#type' => 'checkbox',
     '#title' => t('Allow empty birthdate values to override existing values.'),
     '#default_value' => 0,
   );

   $form['import']['submit'] = array(
     '#type' => 'submit',
     '#value' => t('Submit'),
   );

   return $form;
}

function nyss_ioimport_form_validate($form, &$form_state) {

   nyss_iovalidateuploadform($form, $form_state);
}

function nyss_iovalidateuploadform($form, &$form_state) {

	if (!empty($form_state['values']['servercsv'])) {

		$form_state['values']['csv']['title'] = $form_state['values']['servercsv'];
    	$form_state['values']['csv']['file']->filepath = '/data/importData/'.$form_state['values']['servercsv'];
		if ( !file_exists($form_state['values']['csv']['file']->filepath ) ) {
			form_set_error('servercsv', 'No file by that name was found.');
		}
	
   	} else {
	
	   	$file = file_save_upload('csv');

	    if (!$file) {
	      	form_set_error('csv', 'You must select a valid file to upload.');
	    } else {
	      	// Manually add the uploaded file to the $form_state
	      	$form_state['values']['csv']['title'] = $file->filename;
	      	$form_state['values']['csv']['file'] = $file;
	    }
		
   	}
}

function nyss_ioimport_form_submit($form, &$form_state) {

	global $user;
	global $nyss_ioline;
	global $nyss_iototallines;

//nyss_out("debug",$form_state,true);

	civicrm_initialize( );
	require_once 'CRM/Core/Config.php';
	$config =& CRM_Core_Config::singleton();
	
	require_once 'CRM/Utils/String.php';

	$path = '/data/importData/';
	$logpath = $path.'logs/';
	if ( !file_exists($path) ) {
		mkdir( $path, 0775 );
	}
	if ( !file_exists($logpath) ) {
		mkdir( $logpath, 0775 );
	}

	$logFilename = "import." . mt_rand(1,9999999999999999).".log";
    $logFilePath = $logpath.$logFilename;
	$logFile = fopen($logFilePath, 'w');

	require_once(dirname(__FILE__) . '/nyss_io_definitions.inc');

	$filename = $form_state['values']['csv']['file']->filepath;

	$fo = new nyss_iofileobject($filename, "\t");
	$nyss_iototallines = $fo->countLines();

	//initialize some values
	$bImportData = array();
	$nyss_ioline = 0;
	$runnum=$form_state['values']['runnum'];
	$dryrun=$form_state['values']['dryrun'];
	if (!$dryrun) $dryrun=false;

	//get some civicrm values and flip so we can easily lookup values
    $aStates = array_flip(ioGetStates());
    $aGender = array_flip(ioGetOptions("gender"));
    $aPrefix = array_flip(ioGetOptions("individual_prefix"));
    $aSuffix = array_flip(ioGetOptions("individual_suffix"));
	//echo '<pre>'; print_r($aStates); echo '</pre>'; exit();
	//echo '<pre>'; print_r($aGender); echo '</pre>'; exit();
	//echo '<pre>'; print_r($aSuffix); echo '</pre>'; exit();
	//echo '<pre>'; print_r($aPrefix); echo '</pre>'; exit();

	nyss_out('status',"importing file with dryrun=$dryrun AND count=$runnum.<br>Import file: {$filename}.<br>Log File: {$logFilename}",true);
	
	//set includes based on column headers
	$columns = $fo->header;
	if ( array_key_exists('current_employer', $columns) ) { require_once 'CRM/Contact/BAO/Contact/Utils.php'; }
	if ( array_key_exists('keywords', $columns) ) {
		require_once 'api/v2/Tag.php';
		require_once 'api/v2/EntityTag.php';
		require_once 'CRM/Core/BAO/EntityTag.php';
	}
	if ( array_key_exists('note', $columns) ) { require_once 'api/v2/Note.php'; }
	
	//also create group here if set in form
	if ( !empty($form_state['values']['addtogroup']) ) {
		require_once 'api/v2/Group.php';
		require_once 'api/v2/GroupContact.php';
		$groupID = '';
		
		$groupname = $form_state['values']['addtogroup'];
		$groupparams = array( 'title' => $groupname );
    	$get_group =& civicrm_group_get( $groupparams );
		//nyss_out("debug", $get_group, true);
		
		if ( $get_group['is_error'] && !$dryrun ) {
			$params = array( 'title' => $groupname, 'is_active' => 1 );
				//nyss_out("debug", $params, true);
			$group = civicrm_group_add( $params );
				//nyss_out("debug", $group, true);
			$groupID = $group['result'];
		} else {
			$group = array_keys($get_group);
			$groupID = $group[0];
		}
		echo 'groupID: '.$groupID;
	}

  	while ($l = $fo->getLine()) {

		//nyss_out('debug', $l,true);

		//seconds to process each row
		set_time_limit (30);

		//increase line number
		++$nyss_ioline;

		if(is_numeric($runnum)) {
			if($form_state['values']['runnum']<=$nyss_ioline) {
				nyss_out('debug',"Stopping at {$nyss_ioline} lines.", true);
				break;
			}
		}
		
		if ($nyss_ioline%20==0) nyss_out('status', "processed {$nyss_ioline} lines", true);

		//fix the gender entries
		$l['gender'] = ( $l['gender'] ) ? $l['gender'] : $l['gender_id'];
		if ($l['gender']=='M') $l['gender'] = 'Male';
        if ($l['gender']=='F') $l['gender'] = 'Female';
		$l['gender_id'] = $l['gender'];

		//fix birthdate
		$d = $l['birth_date'];
		if ( !empty($d) && $d != 0 && $d != 19000101 && $d != 19010101 && $d > 19000000 ) { //remove errant records
			$l['birth_date'] = substr($d,0,4).'-'.substr($d,4,2).'-'.substr($d,6,2);
		} else {
			$l['birth_date'] = NULL;
		}
		
		//fix boe registration date
		$boe_reg = $l['boe_date_of_registration_24'];
		if ( !empty($boe_reg) && $boe_reg != 0 && $boe_reg != 19000101 && $boe_reg != 19010101 ) { //remove errant records
			$l['boe_date_of_registration_24'] = substr($boe_reg,0,4).'-'.substr($boe_reg,4,2).'-'.substr($boe_reg,6,2);
		} else {
			$l['boe_date_of_registration_24'] = NULL;
		}
		
		//fix prefixes
		$prefix_val = '';
		if ( array_key_exists( $l['prefix_id'], $aPrefix ) ) { //if a valid value, retain
			$prefix_val = $l['prefix_id'];
		} elseif ( array_key_exists( $l['prefix_id'], $nyss_ioprefixes ) ) { //check if in prefix map
			$prefix_val = $nyss_ioprefixes[$l['prefix_id']];
		} else { //if odd, ignore
			$prefix_val = '';
		}
		
		//fix suffixes
		$suffix_val = '';
		if ( array_key_exists( $l['suffix_id'], $aSuffix ) ) { //if a valid value, retain
			$suffix_val = $l['suffix_id'];
		} elseif ( array_key_exists( $l['suffix_id'], $nyss_iosuffixes ) ) { //check if in suffix map
			$suffix_val = $nyss_iosuffixes[$l['suffix_id']];
		} else { //if odd, ignore
			$suffix_val = '';
		}

		//set ids; accomodate both import field schemas
		$l['gender_id'] = ( $aGender[$l['gender']] ) ? $aGender[$l['gender']] : $aGender[$l['gender_id']];
		$l['state_province_id'] = ( $aStates[$l['st']] ) ? $aStates[$l['st']] : $aStates[$l['state_province_id']];
		$l['prefix_id'] = $aPrefix[$prefix_val];
		$l['suffix_id'] = $aSuffix[$suffix_val];
		
		//set the last import timestamp
		$l['last_import_57'] = date( 'Y-m-d H:i:s' );
		
		//look for existing related record in custom table
		if ( !empty($l['id']) ) {
			$sql = "SELECT id AS constinfo_id FROM civicrm_value_constituent_information_1 WHERE entity_id = {$l['id']}";
			$dao = &CRM_Core_DAO::executeQuery( $sql );
	        if ( $dao->fetch() ) $l['constinfo_id'] = $dao->constinfo_id;
			CRM_Core_DAO::freeResult( );
		}
		
		//process several fields for BOE imports
		if ( $form_state['values']['boeimport'] ) {
		
			//set all addresses as BOE type //TODO in future years should handle more intelligently
			$l['location_type_id'] = 6; 
		
			//set contact source to BOE
			//TODO in future years we will preserve source on update if exists
			$l['contact_source_60'] = 'boe';
		
			//set voter registration status to registered
			$l['voter_registration_status_23'] = 'registered';
		
		} //end BOE processing
		
		//fix street_unit
		//if street_unit value exists, and there is no "apt" text, prepend to value
		if ( $l['street_unit'] ) {
			$needle_found = 0;
			$unit_needles = array ( 'apt', 'unit', 'super', 'sup', 'supt', 'ste', 'rm', 'pvt', 'fl', 'bsmt' );
			foreach ( $unit_needles as $unit_needle ) {
				$needle_search = stripos( $l['street_unit'], $unit_needle );
				if ( $needle_search !== false ) { $needle_found = 1; }
			}
			if ( !$needle_found ) { $l['street_unit'] = 'Apt. '.$l['street_unit']; }
		}

		//form the street address; convert proper case first
		$so = convertProperCase( $l['street_number'], true );
		$sn = convertProperCase( $l['street_name'], true );
		$su = convertProperCase( $l['street_unit'], true );
		$l['street_address'] = $so.' '.$sn;
		if ( $su ) { $l['street_address'] = $l['street_address'].', '.$su; }

		//find an address if we don't have an addressID already
		if (!empty($l['id']) && empty($l['address_id'])) {
			$sql = "SELECT id as address_id from civicrm_address where contact_id like '{$l['id']}' AND street_number like '{$l['street_number']}' AND street_name like '{$l['street_name']}' AND city like '{$l['city']}' AND postal_code like '{$l['postal_cod']}'";
			$dao = &CRM_Core_DAO::executeQuery( $sql );
	        if ($dao->fetch()) $l['address_id'] = $dao->address_id;
			CRM_Core_DAO::freeResult( );
		}
		
		//strip leading/trailing/double spaces for all imported data
		foreach ( $l as $k => $v ) {
			$l[$k] = CRM_Utils_String::stripSpaces($v);
		}
		
		//nyss_out('debug', $l, true);

		/*------NOW IMPORT THE DATA-------------------------------------*/

		//import contact details
		nyss_ioimportData('civicrm_contact', $l, $dryrun, $logFile, $form_state);

		//import address details
		//set key correctly for ref
		$l['contact_id']=$l['id'];
		nyss_ioimportData('civicrm_address', $l, $dryrun, $logFile, $form_state);
		
		//import phone details
		//set key correctly for ref
		nyss_ioimportData('civicrm_phone', $l, $dryrun, $logFile, $form_state);
		
		//import email details
		//set key correctly for ref
		nyss_ioimportData('civicrm_email', $l, $dryrun, $logFile, $form_state);
		
		//import contact source details
		//set key correctly for ref
		$l['constinfo_entity_id'] = $l['id'];
		nyss_ioimportData('civicrm_value_constituent_information_1', $l, $dryrun, $logFile, $form_state);

        //import district details
        //set key correctly for ref (ID is for addresses)
        $l['entity_id'] = $l['address_id'];
        nyss_ioimportData('civicrm_value_district_information_7', $l, $dryrun, $logFile, $form_state);
		
		//process special fields using API/BAO
		//echo 'now begin processing special fields:<br />';
		if ( array_key_exists( 'current_employer', $l ) && !empty($l['current_employer']) ) {
			$sql = "SELECT c.id 
			        FROM civicrm_contact c 
			        WHERE c.organization_name = %1 AND c.contact_type = 'Organization' AND is_deleted = 0 
				    LIMIT 1";
            $sqlParams = array( 1 => array( $l['current_employer'], 'String' ) );
            if ( $orgID = CRM_Core_DAO::singleValueQuery( $sql, $sqlParams ) ) {
                $current_employer = $orgID;
            } else {
				$current_employer = convertProperCase($l['current_employer']);
			}
			if ( $dryrun ) {
				nyss_out('debug', $current_employer, true);
			} else {
				$organization = CRM_Contact_BAO_Contact_Utils::createCurrentEmployerRelationship( $l['id'], $current_employer );
			}
		}
		if ( array_key_exists( 'keywords', $l ) && !empty($l['keywords']) ) {
			$keywords = array();
			$keywords = explode( ',', str_replace(', ', ',', str_replace('"', '', $l['keywords'])) );
			if ( !$dryrun ) {
				foreach ( $keywords as $keyword ) {
					$params = array( 'name' => $keyword, 'parent_id' => '296' );
					$tag = civicrm_tag_get($params);
					//echo 'tag_get: '; nyss_out('debug', $tag, true);
					if ( $tag['is_error'] ) {
						echo 'creating tag: '.$keyword.'<br />';
						$tag = civicrm_tag_create($params);
						$tagid = $tag['tag_id'];
					} else {
						$tagid = $tag['id'];
					}
					
					//only add tag to contact if not already present
					$entityTags =& CRM_Core_BAO_EntityTag::getTag($l['id']);
					if ( !in_array($tagid, $entityTags) ) {
						$entityParams = array('tag_id' => $tagid, 'contact_id' => $l['id'] );
						//nyss_out('debug', $entityParams, true);
						$entityTag = civicrm_entity_tag_add( $entityParams );
					}
				} 
			} else {
				nyss_out('debug', $l['keywords'], true); 
			}
		}
		if ( array_key_exists( 'note', $l ) && !empty($l['note']) ) {
			require_once 'api/v2/Note.php';
			$params = array();
			$params = array(
                    'entity_table'  => 'civicrm_contact',
                    'entity_id'     => $l['id'],
                    'note'          => $l['note'],
                    'contact_id'    => $l['id'],
                    'modified_date' => date('Ymd'),
                    'subject'       => 'Import Note',
                    );
    		if ( $dryrun ) {
				nyss_out('debug', $l['note'], true);
			} else {
				$note = civicrm_note_create( $params );
			}
		}
		
		//add contact to group
		if ( !empty($form_state['values']['addtogroup']) ) {
			if ( !$dryrun ) {
				$params = array( 'contact_id' => $l['id'],
                    			 'group_id'   => $groupID );
    			//nyss_out('debug', $params, true);
				$groupcontact = civicrm_group_contact_add( $params );
				//nyss_out('debug', $groupcontact, true);
			}
		}
		
	}

	if ($form_state['values']['sendmail']==1) {

   		//now send a confirmation email
   		$message = array(
      		'to' => $user->mail,
      		'subject' => 'import Data Summary'.Date("Y-m-d H:i:s"). " filename: {$filename}",
      		'body' => 'download the import report here: '.urlencode( "http://".$_SERVER['HTTP_HOST'].'/nyss_getfile?file='.urlencode($filename)),
      		'headers' => array('From' => 'import@cms.nysenate.gov'),
   		);

   		drupal_mail_send($message);
  	}

  	nyss_out('status',"Imported $nyss_ioline lines. access the log file <a href=\"http://".$_SERVER['HTTP_HOST'].'/nyss_getfile?file='.urlencode($logFilename)."\">click here.</a>",true);

  	nyss_out('status','<a href="">click here</a> to continue and return to the import page.',true);

  	exit();

}

function nyss_ioimportData( $tbl, &$l, $dryrun, $logFile, $form_state ) {

	//nyss_out('debug', $tbl,true);
	//nyss_out('debug', $l,true);

    global $nyss_iofields;
	global $nyss_select;
	global $nyss_ioline;

	//build the select array once and store global for efficiency
	if ( empty($nyss_select) ) {

		$nyss_select = array();
		foreach ( $nyss_iofields as $table=>$tableDetails ) {

		  $tmp = array();
		  foreach ($tableDetails as $key=>$importField) {
		
			$tmp[] = "`{$importField['fld']}` as '{$key}'";

			if ($importField['PK']) {
				$nyss_select[$table]['PK']['importField'] = $key;
				$nyss_select[$table]['PK']['civiField'] = $importField['fld'];
			}
		  }

          $nyss_select[$table]['fields'] = implode(",",$tmp);
		}
		
	}
	
    $pkCivi = $nyss_select[$tbl]['PK']['civiField'];
    $pkImport = $nyss_select[$tbl]['PK']['importField'];

	nyss_out('debug', $l, true);

	//if we are being passed a key, this is going to be an update
	//otherwise it's an insert
	if ( !empty($l[$pkImport]) ) {

//nyss_out('status', 1, true);
//nyss_out('debug', $pkCivi, true);
//nyss_out('debug', $pkImport, true);
//nyss_out('debug', $l, true);

		//get the existing data
		$sql = "SELECT " . $nyss_select[$tbl]['fields'] . " FROM {$tbl} WHERE {$pkCivi}={$l[$pkImport]}";
//nyss_out('debug', $sql, true);

		$dao = &CRM_Core_DAO::executeQuery( $sql );

		if ( !$dao->fetch() ) nyss_out('error','no civirecord found. not importing.',true);

        $up = array();
	
		//compare the fields
		foreach( $l as $key=>$data ) {

            //apply handler if set
			if(isset($nyss_iofields[$tbl][$key]['handler'])) $data = $nyss_iofields[$tbl][$key]['handler']($data, true);
			
//echo 'existing: '.$dao->$key.'<br />';
//echo 'new: '.$data.'<br /><br />';
			//if the import data doesn't match civi data, update it
			//if ( isset($dao->$key) && $dao->$key<>$data ) { //this was preventing a fill action - if existing field was null
			if ( ( isset($nyss_iofields[$tbl][$key]) && $dao->$key<>$data ) ||
			     ( $form_state['values']['birthdateoverride'] && $key == 'birth_date' ) ) {
			
				//escape some sql fields
	            $data = str_replace("'","\'",$data);

				//add to the update statement
				if (!empty($data)) $up[] = "{$nyss_iofields[$tbl][$key]['fld']}='{$data}'";
				
				//if address is being updated, set lat/lon to null for reprocessing
				if ( $key = 'street_address' && 
		     		 ( empty($l['geo_code_1']) || empty($l['geo_code_2']) ) ) {
					$l['geo_code_1'] = NULL;
					$l['geo_code_2'] = NULL;
				}
			}
		}

		CRM_Core_DAO::freeResult( );

		//if there is something to update, do it!
		if (!empty($up)) {
			$sqlUP = "UPDATE {$tbl} SET ".implode(',',$up). " WHERE {$pkCivi}={$l[$pkImport]}";
			//print_r($sqlUP."<br>");

			if ( !$dryrun ) {
				$dao=&CRM_Core_DAO::executeQuery( $sqlUP );
		        CRM_Core_DAO::freeResult( );
			} else {
				//if ($tbl=='civicrm_value_constituent_information_1' || $tbl=='civicrm_value_district_information_7') {
				print_r($sqlUP."<br>"); //debug
				//}
			}
			fwrite($logFile, "line {$nyss_ioline}: updated record. " . $sqlUP. "\n");
		} else {
			fwrite($logFile, "line {$nyss_ioline}: nothing to update for $tbl record: " . implode(',',$l). "\n");
		}

	//otherwise just insert
	} else {

		$up = array();

		//first set a few additional values required for insert action
		require_once 'CRM/Utils/String.php';
		
		//contact record work
		if ( $tbl = 'civicrm_contact' ) {
			$l['contact_type'] = 'Individual';
			$prefixes = ioGetOptions("individual_prefix");
			$suffixes = ioGetOptions("individual_suffix");
			$suffix = ( $suffixes[$l['suffix_id']] ) ? ', '.$suffixes[$l['suffix_id']] : '';
			$l['middle_name'] = ( $l['mid'] ) ? $l['mid'] : $l['middle_name']; //account for both possible field names
			//need to propercase these values before constructing display and sort name
			$fnc = convertProperCase( $l['first_name'], true );
			$mnc = convertProperCase( $l['middle_name'], true );
			$lnc = convertProperCase( $l['last_name'], true );
			$display_name = $prefixes[$l['prefix_id']].' '.$fnc.' '.$mnc.' '.$lnc.$suffix;
			$l['display_name'] = nyss_stripSpaces( $display_name );
			if ( !empty($l['display_name']) ) $l['sort_name'] = $lnc.', '.$fnc.' '.$mnc.' '.$lnc.$suffix;
		}
		
		//only set these if the corresponding data columns exist in the import file
		if ( array_key_exists('street_address', $l) && !empty($l['street_address']) ) {
			if ( $form_state['values']['boeimport'] ) $l['location_type_id'] = 6; //set address type to BOE
			$l['address_is_primary'] = 1; //set to primary
			$l['country_id'] = 1228; //assume US
		}
		if ( array_key_exists('phone', $l) ) {
			$l['phone_type_id'] = 1; //set to phone
			$l['phone_location_type_id'] = 1; //set to home
			$l['phone_is_primary'] = 1; //set to primary
		}
		if ( array_key_exists('email', $l) ) {
			$l['email_location_type_id'] = 1; //set to home
			$l['email_is_primary'] = 1; //set to primary
		}
		
		//nyss_out('debug', $l, true); exit();
		
		//set up the insert
		foreach($l as $key=>$data) {

			//unset if no data
			if ( empty($data) ) {
				unset($l[$key]);
				continue;
			}
			
			//apply handler if set
            if(isset($nyss_iofields[$tbl][$key]['handler'])) $data = $nyss_iofields[$tbl][$key]['handler']($data, true);

            //make sure we're only processing the records for that table
            if (!isset($nyss_iofields[$tbl][$key])) continue;

			$up = array();

            //skip if required values not found
            if (empty($data) && $nyss_iofields[$tbl][$key]['required']) {
            	$skip=true;
                break;
            }

  			//skip if no data
			if (empty($data)) continue;
			
 			$data = str_replace("'","\'",$data);

			$insertKeys[] = "`{$nyss_iofields[$tbl][$key]['fld']}`";
			$insertData[] = "'{$data}'";
		}
		
		//nyss_out('debug', $l, true); exit();

		if ($skip) return;

		if ( $insertKeys && $insertData ) {
			$sqlINSERT = "INSERT INTO {$tbl} (".implode(',',$insertKeys).") VALUES (".implode(',',$insertData).")";
			//nyss_out('debug', $sqlINSERT, true); exit();
		}
		
		if ( !$dryrun ) {
			$dao = & CRM_Core_DAO::executeQuery( $sqlINSERT, CRM_Core_DAO::$_nullArray );
	        CRM_Core_DAO::freeResult( );

            $dao = & CRM_Core_DAO::executeQuery( "SELECT LAST_INSERT_ID() as lastid", CRM_Core_DAO::$_nullArray );
			$dao->fetch();
			$l[$pkImport]=$dao->lastid;

	        CRM_Core_DAO::freeResult( );
		} else {
			//if ($tbl=='civicrm_value_constituent_information_1') {
			print_r($sqlINSERT."<br>"); //debug
			//}
		}
		
		fwrite($logFile, "line {$nyss_ioline}: inserted record. " . $sqlINSERT . "\n");
	}
}

function ioGetOptions($strGroup)
{
  $session =& CRM_Core_Session::singleton();

  $dao = &CRM_Core_DAO::executeQuery("SELECT id from civicrm_option_group where name='".$strGroup."';", CRM_Core_DAO::$_nullArray);
  $dao->fetch();
  $optionGroupID = $dao->id;

  $dao = &CRM_Core_DAO::executeQuery("SELECT name, label, value from civicrm_option_value where option_group_id=$optionGroupID;", CRM_Core_DAO::$_nullArray);

  $options = array();

  while ($dao->fetch()) {
    $name = (strlen($dao->label) > 0) ? $dao->label : $dao->name;
    $options[$dao->value] = $name;
  }

  return $options;
} // ioGetOptions()

function ioGetStates()
{
  $session =& CRM_Core_Session::singleton();

  $dao = &CRM_Core_DAO::executeQuery("SELECT id, abbreviation FROM civicrm_state_province WHERE country_id = 1228", CRM_Core_DAO::$_nullArray); //lookup US states only

  $options = array();

  while ($dao->fetch()) {
    $options[$dao->id] = $dao->abbreviation;
  }

  return $options;
} // ioGetStates()

function convertProperCase( $string, $skipMixed = false ) {

	require_once 'CRM/Utils/String.php';
	
	//if mixed case, don't do anything
    if ($skipMixed && preg_match('/[a-z]/', $string)) return $string;

    // list of words we want to force
    $forceWords = array('of', 'a', 'the', 'and', 'an', 'or', 'nor', 'but', 'is', 'if', 'then',
                    'else', 'when', 'at', 'from', 'by', 'on', 'off', 'for', 'in', 'out', 'over', 'to',
                    'into', 'with', 'II', 'IV', 'A-Level', "'s", 'UK', 'VI', '<i>', 'III', 'VII', 'PO');

    // punctuation used to determine that the following letter
    // should be capitalised
    $punctuation = array('.', '-', ':', '!', '\'', '-', '?');

	$string = CRM_Utils_String::stripSpaces( ucwords(strtolower($string)) );

	$words = explode(' ', $string);

	foreach ($words as $word) {
	
		$replace = array();
	
		//trim any non-word chars and replace with nothing for easier matching
		$cleanWord = preg_replace("/[^\w]/", '', $word);
		if (!empty($cleanWord)) $replace = preg_grep( "/$cleanWord/i", $forceWords);

		if (isset($replace[0])) $word=str_replace($cleanWord,$replace[0],$word);

		$fixedWords[] = $word;
	}

	$string = implode(' ',$fixedWords);

    return $string;
}
