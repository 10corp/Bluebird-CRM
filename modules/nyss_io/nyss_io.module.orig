<?php

//define(NYSSIODEBUG,false);
define(NYSSIODEBUG,true);

require_once(dirname(__FILE__) . '/nyss_lib.php');
require_once(dirname(__FILE__) . '/nyss_io.php');

function nyss_io_menu () {

  $items = array();

  $items['importdata'] = array (
    'title' => t('Import Data'),
    'page callback' => 'nyss_ioimportdata_page',
    'access arguments' => array('export print production files'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $items;
}

function nyss_ioimportdata_page() {

        return drupal_get_form('nyss_ioimport_form');
}
          
function nyss_ioimport_form() {

   $form = array();

   $form['#attributes'] = array('enctype' => "multipart/form-data");

   $form['csv'] = array(
     '#type' => 'file',
     '#title' => t('Upload a file'),
     '#size' => 40,
   );

   $form['servercsv'] = array(
     '#type' => 'textfield',
     '#title' => t('OR specify a filename on the server in the \'/tmp\' dir'),
     '#size' => 10,
   );

   $form['sendemail'] = array(
     '#type' => 'checkbox',
     '#title' => t('send summary email'),
     '#default_value' => 1,
   );

   $form['dryrun'] = array(
     '#type' => 'checkbox',
     '#title' => t('Dry Run (parses data but does not alter the instance)'),
     '#default_value' => 1,
   );

   $form['runnum'] = array(
     '#type' => 'select',
     '#title' => t('How many records to process in dry run mode (must be set to ALL for the real import)'),
     '#options' => array(
	     '10' => t('10'),
	     '100' => t('100'),
	     '500' => t('500'),
	     '1000' => t('1000'),
	     'All' => t('All'),
	),
     '#default_value' => '10',
   );

   $form['import']['submit'] = array(
     '#type' => 'submit',
     '#value' => t('Submit'),
   );

   return $form;
}

function nyss_ioimport_form_validate($form, &$form_state) {

   nyss_iovalidateuploadform($form, $form_state);
}

function nyss_iovalidateuploadform($form, &$form_state) {

   $file = file_save_upload('csv');

    if (!$file) {
      form_set_error('upload', 'You must select a valid file to upload.');
    } else {
      // Manually add the uploaded file to the $form_state
      $form_state['values']['csv']['title'] = $file->filename;
      $form_state['values']['csv']['file'] = $file;
    }
}

function nyss_ioimport_form_submit($form, &$form_state) {

	global $user;
	global $nyss_ioline;
	global $nyss_iototallines;

//nyss_out("debug",$form_state,true);

        civicrm_initialize( );
        require_once 'CRM/Core/Config.php';
        $config =& CRM_Core_Config::singleton();

	$path = $config->uploadDir.'printProduction/';
        if ( !file_exists($path) ) {
                mkdir( $path, 0775 );
        }

        $logFilename = "import." . mt_rand(1,9999999999999999).".log";
        $logFilePath = $path . $logFilename;
	$logFile = fopen($logFilePath, 'w');

	require_once(dirname(__FILE__) . '/nyss_io_definitions.inc');

	$filename = $form_state['values']['csv']['file']->filepath;
	$fo = new nyss_iofileobject($filename, "\t");

	$nyss_iototallines = $fo->countLines();

	//initialize some values
	$bImportData = array();
	$nyss_ioline = 0;
	$runnum=$form_state['values']['runnum'];
	$dryrun=$form_state['values']['dryrun'];
	if (!$dryrun) $dryrun=false;

	//get some civicrm values and flip so we can easily lookup values
        $aStates = array_flip(getStates());
        $aGender = array_flip(getOptions("gender"));
        $aSuffix = array_flip(getOptions("individual_suffix"));
        $aPrefix = array_flip(getOptions("individual_prefix"));

	nyss_out('status',"importing file with dryrun=$dryrun AND count=$runnum.<br>Import file: {$filename}.<br>Log File: {$logFilename}",true);

  	while ($l = $fo->getLine()) {

		//nyss_out('debug', $l,true);

		//seconds to process each row
		set_time_limit (30);

		//increase line number
		++$nyss_ioline;

		if(is_numeric($runnum)) {

			if($form_state['values']['runnum']<=$nyss_ioline) {

				nyss_out('debug',"Stopping at {$nyss_ioline} lines.", true);
				break;
			}
		}
		
		if ($nyss_ioline%20==0) nyss_out('status', "processed {$nyss_ioline} lines", true);

		//import contact details
		$l['gender']=$aGender[$l['gender']];
		$contactID = nyss_ioimportData('civicrm_contact', $l, $dryrun, $logFile);
//echo $l['id'].' '.$contactID;
		//import address details
		//set key correctly for ref
		$l['contact_id']=$contactID;
		$l['st'] = $aState[$l['st']];
		nyss_ioimportData('civicrm_address', $l, $dryrun, $logFile);
		
		//import phone details
		//set key correctly for ref
		$l['contact_id']=$contactID;
		nyss_ioimportData('civicrm_phone', $l, $dryrun, $logFile);
		
		//import email details
		//set key correctly for ref
		$l['contact_id']=$contactID;
		$addressID = nyss_ioimportData('civicrm_email', $l, $dryrun, $logFile);

                //import district details
                //set key correctly for ref (DI is for addresses)
                $l['entity_id']=$addressID;
                nyss_ioimportData('civicrm_value_district_information_7', $l, $dryrun, $logFile);
	}

  if ($form_state['values']['sendmail']==1) {

   //now send a confirmation email
   $message = array(
      'to' => $user->mail,
      'subject' => 'import Data Summary'.Date("Y-m-d H:i:s"). " filename: {$filename}",
      'body' => 'download the import report here: '.urlencode( "http://".$_SERVER['HTTP_HOST'].'/nyss_getfile?file='.urlencode($filename)),
      'headers' => array('From' => 'import@cms.nysenate.gov'),
   );

   drupal_mail_send($message);
  }

  nyss_out('status',"Imported $nyss_ioline lines. access the log file <a href=\"http://".$_SERVER['HTTP_HOST'].'/nyss_getfile?file='.urlencode($logFilename)."\">click here.</a>",true);

  nyss_out('status','<a href="">click here</a> to continue to return to the import page.',true);

  exit();

}

function nyss_ioimportData($tbl, $l, $dryrun, $logFile) {

        global $nyss_iofields;
	global $nyss_select;
	global $nyss_ioline;
	
        civicrm_initialize( );
        require_once 'CRM/Core/Config.php';
        $config =& CRM_Core_Config::singleton();

	//build the select array once and store global for efficiency
	if (empty($nyss_select)) {

		$nyss_select =array();
		foreach ($nyss_iofields as $table=>$tableDetails) {

		  $tmp = array();
		  foreach ($tableDetails as $key=>$importField) {
		
			$tmp[] = "`{$importField['fld']}` as '{$key}'";

			if ($importField['PK']) {
				$nyss_select[$table]['PK']['importField'] = $key;
				$nyss_select[$table]['PK']['civiField'] = $importField['fld'];
			}
		  }

                  $nyss_select[$table]['fields'] = implode(",",$tmp);
		}
		
	}
	
	//if we are being passed a key, this is going to be an update
	//otherwise it's an insert

	if (!empty($l[$nyss_select[$tbl]['PK']['importField']])) {

		$pkCivi = $nyss_select[$tbl]['PK']['civiField'];
		$pkImport = $nyss_select[$tbl]['PK']['importField'];

		//get the existing data
		$sql = "SELECT " . $nyss_select[$tbl]['fields'] . " FROM {$tbl} WHERE {$pkCivi}={$l[$pkImport]}";
		$dao = &CRM_Core_DAO::executeQuery( $sql, CRM_Core_DAO::$_nullArray );

		if (!$dao->fetch()) nyss_out('error','no civirecord found. not importing.',true);

                $up = array();
	
		//compare the fields
		foreach($l as $key=>$data) {

			//if the import data doesn't match civi data, update it
			if (isset($dao->$key) && $dao->$key<>$data) {

				//escape some sql fields
	                        $data = str_replace("'","\'",$data);

				//add to the update statement
				if (!empty($data)) $up[] = "{$nyss_iofields[$tbl][$key]['fld']}='{$data}'";
			}
		}

		//if there is something to update, do it!
		if (!empty($up)) {
		
			$sqlUP = "UPDATE {$tbl} SET ".implode(',',$up). " WHERE {$pkCivi}={$l[$pkImport]}";
print_r($sqlUP."<br>");

			if (!$dryrun) {
				$dao=&CRM_Core_DAO::executeQuery( $sqlUP, CRM_Core_DAO::$_nullArray );
			}
			fwrite($logFile, "line {$nyss_ioline}: updated record. " . $sqlUPDATE. "\n");
		} else {
		
			fwrite($logFile, "line {$nyss_ioline}: nothing to update for $tbl record: " . implode(',',$l). "\n");
		}

	//otherwise just insert
	} else {

		$up = array();
		
		//set up the insert
		foreach($l as $key=>$data) {

			$up = array();

			//skip if no data		
			if (empty($data)) continue;

			//make sure we're only processing the records for that table
			if (!isset($nyss_iofields[$tbl][$key])) continue;
	
 			$data = str_replace("'","\'",$data);

			$insertKeys[] = "`{$nyss_iofields[$tbl][$key]['fld']}`";
			$insertData[] = "'{$data}'";
		}

		$sqlINSERT = "INSERT INTO {$tbl} (".implode(',',$insertKeys). ") VALUES(".implode(',',$insertData).")";
print_r($sqlINSERT."<br>");
		if (!$dryrun) {
			$dao = & CRM_Core_DAO::executeQuery( $sqlINSERT, CRM_Core_DAO::$_nullArray );
//print_r($dao);
                        $dao = & CRM_Core_DAO::executeQuery( "SELECT LAST_INSERT_ID() as lastid", CRM_Core_DAO::$_nullArray );
			$dao->fetch();
//print_r($dao);
			$l[$pkImport]=$dao->lastid;
		}
		fwrite($logFile, "line {$nyss_ioline}: inserted record. " . $sqlINSERT . "\n");
	}
	
	return $l[$pkImport];
}

function getOptions($strGroup)
{
  $session =& CRM_Core_Session::singleton();

  $dao = &CRM_Core_DAO::executeQuery("SELECT id from civicrm_option_group where name='".$strGroup."';", CRM_Core_DAO::$_nullArray);
  $dao->fetch();
  $optionGroupID = $dao->id;

  $dao = &CRM_Core_DAO::executeQuery("SELECT name, label, value from civicrm_option_value where option_group_id=$optionGroupID;", CRM_Core_DAO::$_nullArray);

  $options = array();

  while ($dao->fetch()) {
    $name = (strlen($dao->label) > 0) ? $dao->label : $dao->name;
    $options[$dao->value] = $name;
  }

  return $options;
} // getOptions()

function getStates()
{
  $session =& CRM_Core_Session::singleton();

  $dao = &CRM_Core_DAO::executeQuery("SELECT id, abbreviation from civicrm_state_province", CRM_Core_DAO::$_nullArray);

  $options = array();

  while ($dao->fetch()) {
    $options[$dao->id] = $dao->abbreviation;
  }

  return $options;
} // getStates()

function convertProperCase( $string ) {
 
     // list of words we don't want to capitalize
     $smallWords = array('of', 'a', 'the', 'and', 'an', 'or', 'nor', 'but',
                         'is', 'if', 'then', 'else', 'when', 'at', 'from',
                         'by', 'on', 'off', 'for', 'in', 'out', 'over', 'to', 
                         'into', 'with');
 
     // special words that should be written as-is
     $specialWords = array('II', 'IV', 'A-Level', "'s", 'UK', 'VI', '<i>', 'III', 'VII');
 
     // punctuation used to determine that the following letter 
     // should be capitalised
     $punctuation = array('.', '-', ':', '!', '\'', '-', '?');
 
     // replacements
     $replacements = array( array("'", "\'") );
 
     // replace any non-letters or numbers with spaces so we 
     // know what the actual words are
     $cleanString = preg_replace("/[^\w]/", ' ', $string);
 
     // the original string split into an array of individual 
     // characters so we can replace the modified characters
     $originalStringSplit = str_split($string);
 
     // split the string of letters and spaces only into an array
     $allWords = explode(' ', $cleanString);
 
     // go through each element in the array and check whether 
     // the word appears in the short words list
     // if it is not, we need to capitalize the word
     foreach($allWords as $key => $word) {
          if(!in_array($word, $smallWords)){
               $allWords[$key] = ucfirst($word);
          }
     }
 
     // convert the array back to a string
     $allWords = implode(' ', $allWords);
 
     // the title-cased string split into characters so we can 
     // replace them original characters with them
     $titleStringSplit = str_split($allWords);
 
     // check through each character and replace the one stored 
     // in the original string if it is a letter
     foreach($titleStringSplit as $key => $char) {
          if($char != " ") {
               $originalStringSplit[$key] = $char;
          }
     }
 
     // join all the characters back into a string
     $titleString = implode('', $originalStringSplit);
 
     // make the first letter after certain punctuation capitalized, 
     // regardless of the normal rules. I.e. "Shakespeare: The Bard"
     foreach($punctuation as $char) {
          // match anything which starts with the punctuation type that 
          // we are checking for until the first letter which follows it
          // and replace that with a capitalized version of the string
          // I.e.
          // : the => |: t| => : The
          // Twentieth-century => |-c| => Twentieth-Century
          $titleString = preg_replace("/(" . preg_quote($char) . "\s*[a-zA-Z])/ie", "strtoupper('\\1')", $titleString);
     }
 
     // capitalize the very first letter of the sentence, as it may 
     // appear after punctuation which we would not normally
     // use to determine whether a word should be capitalised
     $titleString = preg_replace("/(^[^a-zA-Z]*[a-zA-Z])/ie", "strtoupper('\\1')", $titleString);
 
     // find and replace text
     foreach($replacements as $replacement) {
          $find = $replacement[0];
          $replace = $replacement[1];
          $titleString = str_ireplace($find, $replace, $titleString);
     }
 
     // sort out any "special" words last so they are not 
     // overwritten with our previous rules
     foreach($specialWords as $specialWord) {
          // check for each special word, regardless of case and 
          // replace it with the word stored in the array
          $titleString = preg_replace("/\b" . $specialWord . "\b/i", $specialWord, $titleString);
     }
 
     return $titleString;
<<<<<<< HEAD

}
=======
}
>>>>>>> b70a97b739daff40c5aa70a179aaeed63e8e538a
