<?php 

function nyss_dedupe_civicrm_dupeQuery ($o, $table, &$tableQueries){
//CRM_Core_Error::debug('o', $o); exit();
//CRM_Core_Error::debug('table', $table);
//CRM_Core_Error::debug('tableQueries', $tableQueries); exit();

	//don't run these during user account/contact creation
	if ( !$o->noRules && $table == 'table' ) {
	
		if ( $o->name=='Level 1 (fname + mname + lname + suffix + street + postal)' ) {
		//indiv strict rule 1
		//CREATE INDEX individualStrict1 ON civicrm_contact(first_name,last_name,middle_name,suffix_id);
			//first unset existing queries
			foreach ( $tableQueries as $key=>$dontCare ) {
				unset( $tableQueries[$key] );
			}
			if ( empty($o->params) ) {
				//run rules
				$tableQueries['civicrm_contact.last_name.5'] = "
SELECT t1.id id1, t2.id id2, 5 weight 
FROM civicrm_contact t1 
  JOIN civicrm_contact t2 ON ( t1.first_name = t2.first_name AND
                               t1.last_name = t2.last_name AND
                               IFNULL(t1.middle_name,0) = IFNULL(t2.middle_name,0) AND
                               IFNULL(t1.suffix_id,0) = IFNULL(t2.suffix_id,0) ) 
  INNER JOIN civicrm_address a1 on t1.id=a1.contact_id 
  INNER JOIN civicrm_address a2 on t2.id=a2.contact_id AND 
             a1.postal_code = a2.postal_code AND
	         a1.street_address = a2.street_address
WHERE t1.contact_type = 'Individual' 
  AND t2.contact_type = 'Individual' 
  AND t1.id <> t2.id 
  AND t1.last_name IS NOT NULL 
  AND t1.first_name IS NOT NULL 
  AND a1.postal_code IS NOT NULL
  AND a1.street_address IS NOT NULL";
  			} else {
				//inline and import
				
				//construct abbreviation and punctuation replacements list for street_address
				$abbrevs = array( 'street'    => 'st',
								  'road'      => 'rd',
								  'boulevard' => 'blvd',
								  'avenue'    => 'ave',
								  'terrace'   => 'ter',
								  'parkway'   => 'pkwy',
								  'west'      => 'w',
								  'east'      => 'e',
								  'north'     => 'n',
								  'south'     => 's',
								  'apartment' => '#',
								  'apt'       => '#',
								  '.'         => '',
								  ','         => '',
								  '-'         => '',
								  ':'         => '',
								  ';'         => '',
								);
				
				//first ensure that all match fields exist in the array; construct NULL value if not
				$contact =& $o->params['civicrm_contact'];
				$contactflds = array ( 'first_name', 'middle_name', 'last_name', 'suffix_id' );
				foreach ( $contactflds as $contactfld ) {
					if ( !array_key_exists($contactfld, $contact) ) {
						$contact[$contactfld] = "IS NULL";
						$$contactfld = "IS NULL";
					} else {
						$$contactfld = "= '$contact[$contactfld]'";
					}
				}
				$address =& $o->params['civicrm_address'];
				$addressflds = array ( 'street_address', 'postal_code' );
				foreach ( $addressflds as $addressfld ) {
					if ( !array_key_exists($addressfld, $address) ) {
						$address[$addressfld] = "IS NULL";
						$$addressfld = "IS NULL";
					} else {
						if ( $addressfld == 'street_address' ) {
							//handle street_address cleaning
							$street_address_sql = 'TRIM(LCASE(street_address))';
							$street_address_php = trim(strtolower($address[$addressfld]));
							foreach ( $abbrevs as $longname => $abbrev ) {
								$street_address_sql = "REPLACE( $street_address_sql, '$longname', '$abbrev' )";
								$street_address_php = str_replace( $longname, $abbrev, $street_address_php );
							}
							
							$$addressfld = "= '$street_address_php'";
						} else {
							$$addressfld = "= '$address[$addressfld]'";
						}
					}
				}
				
				//CRM_Core_Error::debug('o', $o); exit();
				
				$tableQueries['civicrm_contact.last_name.5'] = "
SELECT t1.id id1, 5 weight 
FROM civicrm_contact t1 
  INNER JOIN civicrm_address a1 on t1.id=a1.contact_id 
WHERE t1.contact_type     = 'Individual'
  AND t1.last_name        $last_name 
  AND t1.first_name       $first_name
  AND t1.middle_name      $middle_name
  AND t1.suffix_id        $suffix_id
  AND a1.postal_code      $postal_code
  AND $street_address_sql $street_address";
  				
				//CRM_Core_Error::debug('tableQueries', $tableQueries); exit();

			}

		} elseif ( $o->name=='Level 3 (street + lname + fname + city + suffix)' && empty($o->params) ) {
		//indiv rule 3
		//create index individualFuzzy3 on civicrm_contact(first_name,middle_name,last_name,suffix_id);
			//first unset existing queries
			foreach ( $tableQueries as $key=>$dontCare ) {
				unset( $tableQueries[$key] );
			}
			//now set custom query; make sure weight matches what is configured in system
  			$tableQueries['civicrm_contact.last_name.5'] = "
SELECT t1.id id1, t2.id id2, 5 weight 
FROM civicrm_contact t1 
  JOIN civicrm_contact t2 ON ( t1.first_name = t2.first_name AND 
                               t1.last_name = t2.last_name AND 
                               IFNULL(t1.middle_name,0) = IFNULL(t2.middle_name,0) AND
                               IFNULL(t1.suffix_id,0) = IFNULL(t2.suffix_id,0) ) 
  INNER JOIN civicrm_address a1 on t1.id=a1.contact_id 
  INNER JOIN civicrm_address a2 on t2.id=a2.contact_id AND a1.street_address=a2.street_address AND a1.city=a2.city
WHERE t1.contact_type = 'Individual' 
  AND t2.contact_type = 'Individual' 
  AND t1.id <> t2.id  
  AND t1.last_name IS NOT NULL 
  AND t1.first_name IS NOT NULL 
  AND a1.street_address IS NOT NULL
  AND a1.city IS NOT NULL";

		} 
		//CRM_Core_Error::debug('tableQueries', $tableQueries); exit();
	
	}

//CRM_Core_Error::debug($o);exit();	
}
