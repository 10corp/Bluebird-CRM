<?php

define('BASE_SUBSCRIPTION_GROUP', 'Bluebird_Mail_Subscription');
define('FILTER_ALL', 0);
define('FILTER_IN_SD_ONLY', 1);
define('FILTER_IN_SD_OR_NO_SD', 2);


function nyss_mail_civicrm_alterMailParams( &$params, $context )
{
    require_once 'SmtpApiHeader.php';
    //CRM_Core_Error::debug_var('alterMailParams params', $params);

    /* Re-write any URLs in the message body of the form:
    **   senator.crm*.nysenate.gov/sites/senator.crm*.nysenate.gov/pubfiles
    ** into:
    **   pubfiles.nysenate.gov/crm(dev|test)?/senator/
    */
    $bodyvalues = array( 'text', 'html' );
    foreach ( $bodyvalues as $bodyvalue ) {
        $params[$bodyvalue] = preg_replace( '#[a-z0-9_-]+\.crm(dev|test)?\.nysenate\.gov/sites/([a-z0-9_-]+)\.(crm(dev|test)?)\.nysenate\.gov/pubfiles/#i', 'pubfiles.nysenate.gov/$3/$2/', $params[$bodyvalue] );
    }

    $hdr = new SmtpApiHeader();

    //universal settings
    $bbconfig = get_bluebird_instance_config();
    if ( !empty($bbconfig['senator.email.replyto']) ) {
        $replyto = $bbconfig['senator.email.replyto'];
    } elseif ( !empty($bbconfig['senator.email']) ) {
        $replyto = $bbconfig['senator.email'];
    } else {
        $replyto = $bbconfig['smtp.subuser'];
    }

    //set some values based on context
    if ( $context == 'civimail' ) {
        if (!isset($params['event_queue_id']) || empty($params['event_queue_id'])) {
            CRM_Core_Error::debug_var('alterMailParams params: event_queue_id not found',$params);
        }

        $params['Return-Path'] = '';
        $params['List-Unsubscribe'] = '';
        $params['Reply-To'] = $replyto;

        $test = 0;
        if ( isset($params['job_id']) ) {
            $jid   = $params['job_id'];
            $mid   = CRM_Core_DAO::singleValueQuery("SELECT mailing_id FROM civicrm_mailing_job WHERE id = $jid;");
            $mname = CRM_Core_DAO::singleValueQuery("SELECT name FROM civicrm_mailing WHERE id = $mid;");
            $test  = CRM_Core_DAO::singleValueQuery("SELECT is_test FROM civicrm_mailing_job WHERE id = $jid;");
            unset($params['job_id']);
        }

        if ( isset($params['event_queue_id']) ) {
            $event_queue_id = $params['event_queue_id'];
            unset($params['event_queue_id']);
        }

        //5354
        if ( isset($params['contact_id']) ) {
            $contactID = $params['contact_id'];
            unset($params['contact_id']);
            $params['X-clientid'] = $contactID;
        }

        //Sendgrid headers
        $hdr->setCategory("BluebirdMail: $mname (ID: $mid)");
        $hdr->setUniqueArgs(array('mailing_id'    => $mid,
                                  'job_id'        => $jid,
                                  'instance'      => $bbconfig['shortname'],
                                  'install_class' => $bbconfig['install_class'],
                                  'servername'    => $bbconfig['servername'],
                                  'queue_id'      => $event_queue_id,
                                  'is_test'       => $test
                           ));
    } else {
        //$params['replyTo'] = $replyto;
        // Sendgrid SMTP-API
        // For non-Civimail messages, disable subscription/click/open tracking
        $hdr->setCategory("Bluebird Activity");
        $hdr->addFilterSetting('subscriptiontrack', 'enable', 0);
        $hdr->addFilterSetting('clicktrack', 'enable', 0);
        $hdr->addFilterSetting('opentrack', 'enable', 0);
    }

    // Prevent Sendgrid from dropping any of our messages.
    $hdr->addFilterSetting('bypass_list_management', 'enable', 1);

    $params['X-SMTPAPI'] = $hdr->asJSON();

    //CRM_Core_Error::debug('session',$_SESSION);
    //CRM_Core_Error::debug('params',$params);
    //CRM_Core_Error::debug_var('mname',$mname);
    //exit();
}


function nyss_mail_civicrm_buildForm( $formName, &$form ) {

    if ( $formName == 'CRM_Mailing_Form_Group' && $form->_searchBasedMailing ) {

        //get base mailing group, add to option list, set as default, then freeze field
        $params       = array ( 'name' => BASE_SUBSCRIPTION_GROUP );
        $groupObjects = CRM_Contact_BAO_Group::getGroups( $params );

        $groupID      = $groupObjects[0]->id;
        $groupTitle   = $groupObjects[0]->title;
        $baseGroup    =& $form->getElement('baseGroup');
        $baseGroup->addOption( $groupTitle, $groupID );

        $defaults['baseGroup'] = $groupID;
        $form->setDefaults( $defaults );

        $baseGroup->freeze();

    }

    if ( $formName == 'CRM_Mailing_Form_Group' ) {

        $mailingID = CRM_Utils_Request::retrieve('mid', 'Integer', $form, false, null );

        //4628
        $form->addElement('checkbox', 'all_emails', ts('Send to all contact emails?'));

        //4879
        $form->add('select', 'exclude_ood',  ts( 'Send only to emails matched with in-district postal addresses'),
                   array(FILTER_ALL => 'No District Filtering',
                         FILTER_IN_SD_ONLY => 'In-District Only',
                         FILTER_IN_SD_OR_NO_SD => 'In-District and Unknowns'), 
                   false);

        if ( $mailingID ) {
            $defaults['all_emails']   = CRM_Core_DAO::singleValueQuery("SELECT all_emails FROM civicrm_mailing WHERE id = $mailingID");
            $defaults['dedupe_email'] = CRM_Core_DAO::singleValueQuery("SELECT dedupe_email FROM civicrm_mailing WHERE id = $mailingID");
            $defaults['exclude_ood']  = CRM_Core_DAO::singleValueQuery("SELECT exclude_ood FROM civicrm_mailing WHERE id = $mailingID");
        } else {
            $defaults['dedupe_email'] = true;
        }

        $form->setDefaults( $defaults );
    }

    if ( $formName == 'CRM_Mailing_Form_Test' ) {
        //change button text
        $buttons =& $form->getElement('buttons');
        foreach ( $buttons->_elements as $key => $button ) {
            if ( $button->_attributes['value'] == 'Inform Scheduler' ) {
                $buttons->_elements[$key]->_attributes['value'] = 'Submit for Scheduling';
            }
        }
    }

    if ( $formName == 'CRM_Mailing_Form_Schedule' ) {
        //change button text
        $buttons =& $form->getElement('buttons');
        foreach ( $buttons->_elements as $key => $button ) {
            if ( $button->_attributes['value'] == 'Submit Mailing' ) {
                $buttons->_elements[$key]->_attributes['value'] = 'Submit for Approval';
            }
        }
    }

    if ( $formName == 'CRM_Mailing_Form_Group' ||
         $formName == 'CRM_Mailing_Form_Upload' ||
         $formName == 'CRM_Mailing_Form_Test' ||
         $formName == 'CRM_Mailing_Form_Schedule' ) {
        CRM_Utils_System::setTitle( 'New Mass Email' );

        //NYSS 4557
        //CRM_Core_Error::debug_var('form',$form);
        $session =& CRM_Core_Session::singleton();
        if ( $form->_finalValues['name'] ) {
            $form->assign('mailingName', $form->_finalValues['name']);
            $session->set('mailingName', $form->_finalValues['name']);
        } elseif ( $session->get('mailingName') ) {
            $form->assign('mailingName', $session->get('mailingName'));
        }
    }

    if ( $formName == 'CRM_Mailing_Form_Search' ) {
        $parent = $form->controller->getParent();
        $title  = $parent->getVar('_title');

        if ( $title == 'Draft and Unscheduled Mailings' ) {
            CRM_Utils_System::setTitle( 'Draft and Unscheduled Email' );
        } elseif ( $title == 'Scheduled and Sent Mailings' ) {
            CRM_Utils_System::setTitle( 'Scheduled and Sent Email' );
        } elseif ( $title == 'Archived Mailings' ) {
            CRM_Utils_System::setTitle( 'Archived Email' );
        }

        //CRM_Core_Error::debug($parent);
    }

    //CRM_Core_Error::debug($formName);
    //CRM_Core_Error::debug($form);
}

function nyss_mail_civicrm_postProcess( $formName, &$form ) {

    if ( $formName == 'CRM_Mailing_Form_Group' ) {

        $mailingID    = $form->_mailingID;
        $submitValues = $form->_submitValues;
        $dedupeEmails = $submitValues['dedupe_email'];

        //add exclude_ood to mailing record
        $excludeOOD = ( isset($submitValues['exclude_ood']) && $submitValues['exclude_ood'] ) ? $submitValues['exclude_ood'] : FILTER_ALL;

        //exclude_ood will be set from the config file initially, so we overwrite the form values
        $bbconfig   = get_bluebird_instance_config();

        $excludeOOD = FILTER_ALL;

        if (isset($bbconfig['email.filter.district'])) {
            $filter_district = $bbconfig['email.filter.district'];
            switch ($filter_district) {
                case "1": case "strict": case "in_sd":
                    $excludeOOD = FILTER_IN_SD_ONLY;
                    break;
                case "2": case "fuzzy": case "in_sd_or_no_sd":
                    $excludeOOD = FILTER_IN_SD_OR_NO_SD;
                    break;
                default:
                    $excludeOOD = FILTER_ALL;
            } 
        }

        $sqlParams  = array( 1 => array( $mailingID,  'Integer' ),
                             2 => array( $excludeOOD, 'Integer' ));

        CRM_Core_DAO::executeQuery( "UPDATE civicrm_mailing SET exclude_ood = %2 WHERE id = %1;", $sqlParams );

        //4628, 4879
        if ( $form->_submitValues['all_emails'] ) {
            _addAllEmails( $mailingID, $dedupeEmails, $excludeOOD );
        }

        if ( $excludeOOD != FILTER_ALL ) {
            _excludeOOD( $mailingID, $dedupeEmails, $excludeOOD );
        }

        //add email seed group as last step in the process
        _addEmailSeeds( $mailingID );

        //recalculate the total recipients
        if ($form->_submitValues['all_emails'] || $excludeOOD != FILTER_ALL) {
            require_once 'CRM/Mailing/BAO/Mailing.php';
            $count = CRM_Mailing_BAO_Recipients::mailingSize( $mailingID );
            $form->set('count', $count);
            $form->assign('count', $count);
        }
        //CRM_Core_Error::debug('postProcess Group form', $form); exit();
    }

//CRM_Core_Error::debug($form); exit();
} //postProcess

function nyss_mail_civicrm_pageRun( &$page ) {

    //CRM_Core_Error::debug('page', $page);

    //expose url/open tracking to mailing report
    //need to do manually since we are not using native tracking tools
    if ( $page->getVar('_name') == 'CRM_Mailing_Page_Report' ) {

        $smarty =& CRM_Core_Smarty::singleton( );
        $rpt    =& $smarty->get_template_vars( 'report' );
        //CRM_Core_Error::debug('rpt', $rpt);

        $rpt['mailing']['url_tracking']  = 1;
        $rpt['mailing']['open_tracking'] = 1;

        $smarty->assign_by_ref( 'report', $rpt );
    }

} //end pageRun

//4628
function _addAllEmails( $mailingID, $dedupeEmails = false, $excludeOOD = FILTER_ALL) {

    require_once 'CRM/Mailing/BAO/Mailing.php';

    $sql = "
INSERT INTO civicrm_mailing_recipients
    (mailing_id, email_id, contact_id)
SELECT %1, e.id, e.contact_id 
FROM civicrm_email e
WHERE  e.on_hold = 0
  AND  e.contact_id IN
       ( SELECT contact_id FROM civicrm_mailing_recipients mr WHERE mailing_id = %1 )
  AND  e.id NOT IN ( SELECT email_id FROM civicrm_mailing_recipients mr WHERE mailing_id = %1 )
";

    if ($dedupeEmails && $excludeOOD == FILTER_ALL) {
        $sql .= " AND e.email NOT IN ( SELECT e.email
                                       FROM   civicrm_mailing_recipients mr
                                         JOIN civicrm_email e
                                           ON mr.email_id = e.id
                                       WHERE  mr.mailing_id = %1 ) ";
    }
    $params = array( 1 => array( $mailingID, 'Integer' ) );
    //CRM_Core_Error::debug('params',$params); exit();

    $dao = CRM_Core_DAO::executeQuery( $sql, $params );

    //remove onHold as we didn't do it earlier
    CRM_Mailing_BAO_Mailing::removeOnHold( (int) $mailingID );

} //_addAllEmails

//4879
function _excludeOOD( $mailingID, $dedupeEmails = false, $excludeOOD ) {

    //determine what SD we are in
    $bbconfig = get_bluebird_instance_config();
    $district = $bbconfig['district'];

    if ( empty($district) ) { return; }

    //create temp table to store contacts confirmed to be in district
    $tempTbl = "tmpExcludeOOD_$mailingID";
    $sql = "CREATE TEMPORARY TABLE $tempTbl( contact_id INT NOT NULL, PRIMARY KEY(contact_id) ) ENGINE=MyISAM;";
    CRM_Core_DAO::executeQuery($sql);

    $sql = "INSERT INTO $tempTbl 
            SELECT DISTINCT mr.contact_id
            FROM civicrm_mailing_recipients mr
            JOIN civicrm_address a
              ON mr.contact_id = a.contact_id
            JOIN civicrm_value_district_information_7 di
              ON a.id = di.entity_id
            WHERE mailing_id = $mailingID
              AND ny_senate_district_47 = $district;";
    CRM_Core_DAO::executeQuery($sql);

    //also include unknowns if option enabled
    if ( $excludeOOD == FILTER_IN_SD_OR_NO_SD ) {

        //include where no district is known or no address is present
        $sql = "INSERT INTO $tempTbl
                SELECT mr.contact_id
                FROM civicrm_mailing_recipients mr
                  LEFT JOIN civicrm_address a ON mr.contact_id = a.contact_id
                  LEFT JOIN civicrm_value_district_information_7 di ON a.id = di.entity_id
                WHERE mr.mailing_id = $mailingID
                GROUP BY mr.contact_id
                HAVING COUNT(di.ny_senate_district_47) = 0";
        CRM_Core_DAO::executeQuery($sql);
    }

    //now remove contacts from the recipients table that are not found in the inclusion table
    $sql = "DELETE FROM civicrm_mailing_recipients
            USING civicrm_mailing_recipients
            LEFT JOIN $tempTbl
              ON civicrm_mailing_recipients.contact_id = $tempTbl.contact_id
            WHERE civicrm_mailing_recipients.mailing_id = $mailingID
              AND $tempTbl.contact_id IS NULL;";
    CRM_Core_DAO::executeQuery($sql);

    //cleanup
    CRM_Core_DAO::executeQuery("DROP TABLE $tempTbl");

    //if not deduping emails, return now
    if ( !$dedupeEmails ) {
        return;
    }

    //if dedupeEmails, we need to handle that now, as it was skipped earlier in the process
    $tempTbl = "tmpDedupeEmails_$mailingID";
    $sql = "CREATE TEMPORARY TABLE $tempTbl( email_id INT NOT NULL, PRIMARY KEY(email_id) ) ENGINE=MyISAM;";
    CRM_Core_DAO::executeQuery($sql);

    $sql = "INSERT INTO $tempTbl 
            SELECT mr.email_id
            FROM civicrm_mailing_recipients mr
              JOIN civicrm_email e
                ON mr.email_id = e.id
            WHERE mailing_id = $mailingID
            GROUP BY e.email;";
    CRM_Core_DAO::executeQuery($sql);

    //now remove contacts from the recipients table that are not found in the inclusion table
    $sql = "DELETE FROM civicrm_mailing_recipients
            USING civicrm_mailing_recipients
            LEFT JOIN $tempTbl
              ON civicrm_mailing_recipients.email_id = $tempTbl.email_id
            WHERE civicrm_mailing_recipients.mailing_id = $mailingID
              AND $tempTbl.email_id IS NULL;";
    CRM_Core_DAO::executeQuery($sql);

    //cleanup
    CRM_Core_DAO::executeQuery("DROP TABLE $tempTbl");

} //_excludeOOD

function _addEmailSeeds( $mailingID ) {

    $gid = CRM_Core_DAO::singleValueQuery( "SELECT id FROM civicrm_group WHERE name LIKE 'Email_Seeds';" );

    if ( !$gid ) {
        return;
    }

    $sql = "INSERT INTO civicrm_mailing_recipients ( mailing_id, contact_id, email_id )
            SELECT $mailingID, e.contact_id, e.id
            FROM civicrm_group_contact gc
            JOIN civicrm_email e
              ON gc.contact_id = e.contact_id
              AND gc.group_id = $gid
              AND gc.status = 'Added'
              AND e.on_hold = 0
              AND ( e.is_primary = 1 OR e.is_bulkmail = 1 )
            JOIN civicrm_contact c
              ON gc.contact_id = c.id
            LEFT JOIN civicrm_mailing_recipients mr
              ON gc.contact_id = mr.contact_id
              AND mr.mailing_id = $mailingID
            WHERE mr.id IS NULL
              AND c.is_deleted = 0;";
    //CRM_Core_Error::debug($sql);exit();
    CRM_Core_DAO::executeQuery($sql);

} //_addEmailSeeds
