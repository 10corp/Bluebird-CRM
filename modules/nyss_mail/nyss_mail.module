<?php

define('BASE_SUBSCRIPTION_GROUP', 'Bluebird_Mail_Subscription');

function nyss_mail_civicrm_alterMailParams( &$params, $context )
{
    require_once 'SmtpApiHeader.php';
    //CRM_Core_Error::debug($params);

    /* Re-write any URLs in the message body of the form:
    **   senator.crm*.nysenate.gov/sites/senator.crm*.nysenate.gov/pubfiles
    ** into:
    **   pubfiles.nysenate.gov/crm(dev|test)?/senator/
    */
    $bodyvalues = array( 'text', 'html' );
    foreach ( $bodyvalues as $bodyvalue ) {
        $params[$bodyvalue] = preg_replace( '#[a-z0-9_-]+\.crm(dev|test)?\.nysenate\.gov/sites/([a-z0-9_-]+)\.(crm(dev|test)?)\.nysenate\.gov/pubfiles/#i', 'pubfiles.nysenate.gov/$3/$2/', $params[$bodyvalue] );
    }

    $hdr = new SmtpApiHeader();

    //universal settings
    $bbconfig = get_bluebird_instance_config();
    if ( !empty($bbconfig['senator.email.replyto']) ) {
        $replyto = $bbconfig['senator.email.replyto'];
    } elseif ( !empty($bbconfig['senator.email.from']) ) {
        $replyto = $bbconfig['senator.email.from'];
    } else {
        $replyto = $bbconfig['smtp.subuser'];
    }

    //set some values based on context
    if ( $context == 'civimail' ) {

        $params['Return-Path'] = '';
        $params['List-Unsubscribe'] = '';
        $params['Reply-To'] = $replyto;

        if ( isset($params['job_id']) ) {
            $jid = $params['job_id'];
            $mid = CRM_Core_DAO::singleValueQuery("SELECT mailing_id FROM civicrm_mailing_job WHERE id = $jid;");
            $mname = CRM_Core_DAO::singleValueQuery("SELECT name FROM civicrm_mailing WHERE id = $mid;");
            unset($params['job_id']);
        }

        if ( isset($params['event_queue_id']) ) {
            $event_queue_id = $params['event_queue_id'];
            unset($params['event_queue_id']);
        }

        //Sendgrid headers
        $hdr->setCategory("BluebirdMail: $mname (ID: $mid)");
        $hdr->setUniqueArgs(array('mailing_id' => $mid,
                                  'job_id' => $jid,
                                  'instance' => $bbconfig['shortname'],
                                  'install_class' => $bbconfig['install_class'],
                                  'servername' => $bbconfig['servername'],
                                  'queue_id' => $event_queue_id));
        $hdr->addFilterSetting('subscriptiontrack', 'enable', 1);
        $hdr->addFilterSetting('subscriptiontrack', "text/plain", "If you would like to stop receiving emails from your Senator, click here: <% %>.");
        $hdr->addFilterSetting('subscriptiontrack', "text/html", '<p style="text-align: center;font-size:10px;">If you would like to stop receiving emails from your Senator, <% click here %>.</p>');

    } else {

        //$params['replyTo'] = $replyto;

        //Sendgrid headers: disable unsubscribe for non-CiviMail email
        $hdr->setCategory("Bluebird Activity");
        $hdr->addFilterSetting('subscriptiontrack', 'enable', 0);
        $hdr->addFilterSetting('clicktrack', 'enable', 0);
        $hdr->addFilterSetting('opentrack', 'enable', 0);

    }

    $hdr->addFilterSetting('domainkeys', 'enable', 0);
    $params['X-SMTPAPI'] = $hdr->asJSON();

    //CRM_Core_Error::debug('session',$_SESSION);
    //CRM_Core_Error::debug('params',$params);
    //CRM_Core_Error::debug_var('mname',$mname);
    //exit();
}


function nyss_mail_civicrm_buildForm( $formName, &$form ) {

    if ( $formName == 'CRM_Mailing_Form_Group' && $form->_searchBasedMailing ) {

        //get base mailing group, add to option list, set as default, then freeze field
        $params = array ( 'name' => BASE_SUBSCRIPTION_GROUP );
        $groupObjects = CRM_Contact_BAO_Group::getGroups( $params );

        $groupID = $groupObjects[0]->id;
        $groupTitle = $groupObjects[0]->title;
        $baseGroup =& $form->getElement('baseGroup');
        $baseGroup->addOption( $groupTitle, $groupID );

        $defaults['baseGroup'] = $groupID;
        $form->setDefaults( $defaults );

        $baseGroup->freeze();

    }

    if ( $formName == 'CRM_Mailing_Form_Group' ) {
        $defaults['dedupe_email'] = true;
        $form->setDefaults( $defaults );
    }

    if ( $formName == 'CRM_Mailing_Form_Test' ) {
        //change button text
        $buttons =& $form->getElement('buttons');
        foreach ( $buttons->_elements as $key => $button ) {
            if ( $button->_attributes['value'] == 'Inform Scheduler' ) {
                $buttons->_elements[$key]->_attributes['value'] = 'Submit for Scheduling';
            }
        }
    }

    if ( $formName == 'CRM_Mailing_Form_Schedule' ) {
        //change button text
        $buttons =& $form->getElement('buttons');
        foreach ( $buttons->_elements as $key => $button ) {
            if ( $button->_attributes['value'] == 'Submit Mailing' ) {
                $buttons->_elements[$key]->_attributes['value'] = 'Submit for Approval';
            }
        }
    }

    if ( $formName == 'CRM_Mailing_Form_Group' ||
         $formName == 'CRM_Mailing_Form_Upload' ||
         $formName == 'CRM_Mailing_Form_Test' ||
         $formName == 'CRM_Mailing_Form_Schedule' ) {
        CRM_Utils_System::setTitle( 'New Mass Email' );
    }

    if ( $formName == 'CRM_Mailing_Form_Search' ) {
        $parent = $form->controller->getParent();
        $title  = $parent->getVar('_title');

        if ( $title == 'Draft and Unscheduled Mailings' ) {
            CRM_Utils_System::setTitle( 'Draft and Unscheduled Email' );
        } elseif ( $title == 'Scheduled and Sent Mailings' ) {
            CRM_Utils_System::setTitle( 'Scheduled and Sent Email' );
        } elseif ( $title == 'Archived Mailings' ) {
            CRM_Utils_System::setTitle( 'Archived Email' );
        }

        //CRM_Core_Error::debug($parent);
    }

    //CRM_Core_Error::debug($formName);
    //CRM_Core_Error::debug($form);
}

function nyss_mail_civicrm_mailingGroups( &$form, &$groups, &$mailings ) {

    //get seed group ID
    $gid = CRM_Core_DAO::singleValueQuery( "SELECT id FROM civicrm_group WHERE name LIKE 'Email_Seeds';" );

    if ( $form->_flagSubmitted && $gid ) {
        //add group to form selection after submission
        $form->_submitValues['includeGroups'][] = $gid;
    } elseif ( array_key_exists($gid, $groups) ) {
        //unset seed group on initial display so there's no confusion
        unset($groups[$gid]);
    }
}

?>
