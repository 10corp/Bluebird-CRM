<?php

define('BASE_SUBSCRIPTION_GROUP', 'Bluebird_Mail_Subscription');
define('FILTER_ALL', 0);
define('FILTER_IN_SD_ONLY', 1);
define('FILTER_IN_SD_OR_NO_SD', 2);


//5581
function nyss_mail_custom_theme()
{
  $allowedPaths = array(
    'civicrm/nyss/subscription/manage',
    'civicrm/nyss/subscription/view',
    'civicrm/nyss/subscription/expired',
  );

  if (in_array($_GET['q'], $allowedPaths)) {
    return 'BluebirdPublic';
  }
  else {
    return null;
  }
} // nyss_mail_custom_theme()


function nyss_mail_civicrm_config(&$config)
{
  //establish session and ensure userID based construction if in backend
  $session = CRM_Core_Session::singleton();
  $contactID = $session->get('userID');
  $isAdmin = ($config->userFramework == 'Joomla' &&
              strpos($config->userFrameworkBaseURL, 'administrator'));

  if ($isAdmin && !$contactID) {
    return;
  }

  $dirRoot = dirname(__FILE__).DIRECTORY_SEPARATOR;

  //prepend extension php include path
  $include_path = $dirRoot .'php'. PATH_SEPARATOR . get_include_path();
  set_include_path($include_path);

  //prepend extension template path
  $template =& CRM_Core_Smarty::singleton();
  $templateDir = $dirRoot .'tpl'.DIRECTORY_SEPARATOR;
  array_unshift($template->template_dir, $templateDir);
  return;
} // nyss_mail_civicrm_config()


function nyss_mail_civicrm_alterMailParams(&$params, $context)
{
  require_once 'SmtpApiHeader.php';
  //CRM_Core_Error::debug_var('params', $params);
  //CRM_Core_Error::debug_var('context', $context);

  /* Re-write any URLs in the message body of the form:
   *   <sitename>/sites/<sitename>/pubfiles
   *   where <sitename> is <senatorShortname>.crm(dev|test)?.nysenate.gov
   * into:
   *   pubfiles.nysenate.gov/crm(dev|test)?/senator/
  */
  $bodyvalues = array('text', 'html');
  foreach ($bodyvalues as $bodyvalue) {
    if (isset($params[$bodyvalue])) {
      $params[$bodyvalue] = preg_replace('#[a-z0-9_-]+\.crm(dev|test)?\.nysenate\.gov/sites/([a-z0-9_-]+)\.(crm(dev|test)?)\.nysenate\.gov/pubfiles/#i', 'pubfiles.nysenate.gov/$3/$2/', $params[$bodyvalue]);
    }
  }

  // Confirm that <html>, <head>, <body> elements are present, and add them
  // if necessary.
  $params['html'] = fixup_html_message($params['html']);

  $hdr = new SmtpApiHeader();

  //universal settings
  $bbconfig = get_bluebird_instance_config();
  //CRM_Core_Error::debug_var('bbconfig', $bbconfig);

  if (isset($bbconfig['senator.email'])) {
    $senator_email = $bbconfig['senator.email'];
  }
  else {
    $senator_email = '';
  }

  if (!empty($bbconfig['senator.email.replyto'])) {
    $replyto = $bbconfig['senator.email.replyto'];
  }
  elseif ($senator_email != '') {
    $replyto = $senator_email;
  }
  else {
    $replyto = $bbconfig['smtp.subuser'];
  }

  // NYSS 5579 - Construct the whitelisting language and add to e-mail body.
  // NYSS 7423 - Allow location of whitelisting blurb to be configurable.
  // 7804 suppress if viewing html
  if ($context == 'civimail' && !empty($params['contact_id'])) {
    if (isset($bbconfig['email.whitelist.text'])) {
      $whitelist_txt = $bbconfig['email.whitelist.text'];
    }
    else {
      $whitelist_txt = 'To ensure delivery of emails to your inbox, please add %SENATOR_EMAIL% to your email address book.';
    }
    $whitelist_txt = str_replace('%SENATOR_EMAIL%', $senator_email, $whitelist_txt);

    if (isset($bbconfig['email.whitelist.location']) &&
      $bbconfig['email.whitelist.location'] == "bottom"
    ) {
      $params['text'] = $params['text']."\n\n".$whitelist_txt;
      $params['html'] = preg_replace('#(\s*</body>)#', "\n<p style=\"text-align:center; font-size:10px;\">$whitelist_txt</p>$1", $params['html'], 1);
    }
    else {
      $params['text'] = $whitelist_txt."\n\n".$params['text'];
      $params['html'] = preg_replace('/(<body( [^>]*)?>\s*)/', "$1<p style=\"text-align:center; font-size:10px;\">$whitelist_txt</p>\n<br/>\n", $params['html'], 1);
    }
  }

  // Prevent Sendgrid from dropping any of our messages.
  $hdr->addFilterSetting('bypass_list_management', 'enable', 1);

  //set character encoding
  //$params['Content-Transfer-Encoding'] = 'Quoted-Printable';

  //set some values based on context
  if ($context == 'civimail') {
    if (empty($params['event_queue_id']) && empty($params['is_test'])) {
      CRM_Core_Error::debug_var('params: event_queue_id not found', $params);
    }

    $params['Return-Path'] = '';
    $params['List-Unsubscribe'] = '';
    $params['Reply-To'] = $replyto;

    $test = $event_queue_id = $jid = $mid = $mname = 0;
    if (isset($params['job_id'])) {
      $jid = $params['job_id'];
      $mJob = CRM_Core_DAO::executeQuery("SELECT mailing_id, is_test FROM civicrm_mailing_job WHERE id = {$jid};");
      while ($mJob->fetch()) {
        $mid = $mJob->mailing_id;
        $test = $mJob->is_test;
      }
      $mJob->free();

      $m = CRM_Core_DAO::executeQuery("SELECT name, hash FROM civicrm_mailing WHERE id = {$mid};");
      while ($m->fetch()) {
        $mname = $m->name;
        $hash = $m->hash;
      }

      unset($params['job_id']);
    }

    if (isset($params['event_queue_id'])) {
      $event_queue_id = $params['event_queue_id'];
      unset($params['event_queue_id']);
    }

    //5354
    if (isset($params['contact_id'])) {
      $contactID = $params['contact_id'];
      unset($params['contact_id']);
      $params['X-clientid'] = $contactID;
    }

    //7701 - append link for hosted email
    $env = explode('.', $bbconfig['base.domain']);
    if (!empty($mid)) {
      $viewID = ($hash) ? $hash : $mid;
      $url = "http://pubfiles.nysenate.gov/{$env[0]}/{$bbconfig['shortname']}/view/{$viewID}";
      //$url = CRM_Utils_System::url('civicrm/mailing/view', 'reset=1&id='.$viewID, true);

      //4864
      $fblink = '';
      if ($bbconfig['email.include_facebook']) {
        $fburl = "https://www.facebook.com/sharer/sharer.php?u={$url}";
        $fbimg = "http://pubfiles.nysenate.gov/{$env[0]}/{$bbconfig['shortname']}/common/images/social_media/facebook_share_68x25.png";
        $fblink = "<a href='{$fburl}' target=_blank>Share on Facebook.</a>&nbsp;&nbsp;<a href='{$fburl}' target=_blank><img src='{$fbimg}' height='20' align='middle'></a>";
      }

      $params['text'] .= "\n\nClick here to view this email in your browser: {$url} | Share on Facebook: {$fb}";
      $params['html'] = preg_replace('#(\s*</body>)#', "\n<p style=\"text-align:center; font-size:10px;\"><a href='{$url}' target=_blank>Click here</a> to view this email in your browser. {$fblink}</p>$1", $params['html'], 1);
    }

    //5581 subscription management link
    if (!empty($contactID) && !empty($mid) && $bbconfig['email.include_subscriptions']) {
      $cs = CRM_Contact_BAO_Contact_Utils::generateChecksum($contactID);
      $url = "http://pubfiles.nysenate.gov/{$env[0]}/{$bbconfig['shortname']}/subscription/manage/{$event_queue_id}/{$cs}";

      $params['text'] .= "\n\nClick here to manage your email subscription settings: {$url}";
      $params['html'] = preg_replace('#(\s*</body>)#', "\n<p style=\"text-align:center; font-size:10px;\"><a href='{$url}' target=_blank>Click here</a> to manage email subscription settings or to unsubscribe.</p>$1", $params['html'], 1);

      //disable optout via sendgrid as we are handling through the subscription page
      $hdr->addFilterSetting('subscriptiontrack', 'enable', 0);
    }

    //7803 if viewing html, insert FB share image
    if (empty($params['contact_id'])) {
      $imgRoot = $bbconfig['data.rootdir'].'/'.$bbconfig['data_dirname'].'/pubfiles/';
      $fbShareFolder = 'images/template';
      $fbShareImage = 'fb_share_thumb.png';

      if (!file_exists($imgRoot.$fbShareFolder.'/'.$fbShareImage)) {
        $fbShareFolder = 'common/images';
        $fbShareImage = 'nysenate_logo_200.png';
      }
      $fbShare = "http://pubfiles.nysenate.gov/{$env[0]}/{$bbconfig['shortname']}/{$fbShareFolder}/{$fbShareImage}";

      //append to the head block as meta tag
      $params['html'] = preg_replace('#(\s*</head>)#', "
        \n<meta property='og:image' content={$fbShare} />
        \n<meta property='og:title' content='{$params['Subject']}' />
        \n<link rel='image_src' type='image/png' href='{$fbShare}' />
      $1", $params['html'], 1);
    }

    //Sendgrid headers
    $hdr->setCategory("BluebirdMail: $mname (ID: $mid)");
    $hdr->setUniqueArgs(array(
      'instance' => $bbconfig['shortname'],
      'install_class' => $bbconfig['install_class'],
      'servername' => $bbconfig['servername'],
      'mailing_id' => $mid,
      'job_id' => $jid,
      'queue_id' => $event_queue_id,
      'is_test' => $test
      )
    );
  }
  else {
    //$params['replyTo'] = $replyto;
    // Sendgrid SMTP-API
    // For non-Civimail messages, disable subscription/click/open tracking
    $hdr->setCategory('Bluebird Activity');
    $hdr->setUniqueArgs(array(
      'instance' => $bbconfig['shortname'],
      'install_class' => $bbconfig['install_class'],
      'servername' => $bbconfig['servername']
    ));
    $hdr->addFilterSetting('subscriptiontrack', 'enable', 0);
    $hdr->addFilterSetting('clicktrack', 'enable', 0);
    $hdr->addFilterSetting('opentrack', 'enable', 0);
  }

  $params['headers']['X-SMTPAPI'] = $hdr->asJSON();

  //CRM_Core_Error::debug('session', $_SESSION);
  //CRM_Core_Error::debug_var('params', $params);
  //CRM_Core_Error::debug_var('mname', $mname);

  return;
} //nyss_mail_civicrm_alterMailParams()


function nyss_mail_civicrm_buildForm($formName, &$form)
{
  if ($formName == 'CRM_Mailing_Form_Group' && $form->_searchBasedMailing) {
    //get base mailing group, add to option list, set as default, freeze field
    $params = array ('name' => BASE_SUBSCRIPTION_GROUP);
    $groupObjects = CRM_Contact_BAO_Group::getGroups($params);
    $groupID = $groupObjects[0]->id;
    $groupTitle = $groupObjects[0]->title;
    $baseGroup =& $form->getElement('baseGroup');
    $baseGroup->addOption($groupTitle, $groupID);
    $defaults['baseGroup'] = $groupID;
    $form->setDefaults($defaults);
    $baseGroup->freeze();
  }

  if ($formName == 'CRM_Mailing_Form_Group') {
    $mailingID = CRM_Utils_Request::retrieve('mid', 'Integer', $form, false, null );

    //4628
    $form->addElement('checkbox', 'all_emails', ts('Send to all contact emails?'));

    //4879
    $form->add('select', 'exclude_ood', ts('Send only to emails matched with in-district postal addresses'),
      array(
        FILTER_ALL => 'No District Filtering',
        FILTER_IN_SD_ONLY => 'In-District Only',
        FILTER_IN_SD_OR_NO_SD => 'In-District and Unknowns'),
      false);

    //5581 mailing category options
    $mCats = array('' => '- select -');
    $opts = CRM_Core_DAO::executeQuery("
      SELECT ov.label, ov.value
      FROM civicrm_option_value ov
      JOIN civicrm_option_group og
        ON ov.option_group_id = og.id
        AND og.name = 'mailing_categories'
      ORDER BY ov.label
    ");
    while ($opts->fetch()) {
      $mCats[$opts->value] = $opts->label;
    }
    $form->add('select', 'category', 'Mailing Category', $mCats, false);

    if ($mailingID) {
      $m = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_mailing WHERE id = {$mailingID}");
      while ($m->fetch()) {
        $defaults = array(
          'all_emails' => $m->all_emails,
          'dedupe_email' => $m->dedupe_email,
          'exclude_ood' => $m->exclude_ood,
          'category' => $m->category,
        );
      }
    }
    else {
      $defaults['dedupe_email'] = true;
    }

    //CRM_Core_Error::debug_var('defaults', $defaults);
    $form->setDefaults($defaults);
  }

  if ($formName == 'CRM_Mailing_Form_Test') {
    //change button text
    $buttons =& $form->getElement('buttons');
    foreach ($buttons->_elements as $key => $button) {
      if ($button->_attributes['value'] == 'Inform Scheduler') {
        $buttons->_elements[$key]->_attributes['value'] = 'Submit for Scheduling';
      }
    }
  }

  if ($formName == 'CRM_Mailing_Form_Schedule') {
    //change button text
    $buttons =& $form->getElement('buttons');
    foreach ($buttons->_elements as $key => $button) {
      if ($button->_attributes['value'] == 'Submit Mailing') {
        $buttons->_elements[$key]->_attributes['value'] = 'Submit for Approval';
      }
    }
  }

  if ($formName == 'CRM_Mailing_Form_Group' ||
    $formName == 'CRM_Mailing_Form_Upload' ||
    $formName == 'CRM_Mailing_Form_Test' ||
    $formName == 'CRM_Mailing_Form_Schedule'
  ) {
    CRM_Utils_System::setTitle('New Mass Email');

    //NYSS 4557
    //CRM_Core_Error::debug_var('form', $form);
    $session =& CRM_Core_Session::singleton();
    if (!empty($form->_finalValues['name'])) {
      $form->assign('mailingName', $form->_finalValues['name']);
      $session->set('mailingName', $form->_finalValues['name']);
    }
    elseif ($session->get('mailingName')) {
      $form->assign('mailingName', $session->get('mailingName'));
    }
  }

  if ($formName == 'CRM_Mailing_Form_Search') {
    $parent = $form->controller->getParent();
    $title  = $parent->getVar('_title');

    if ($title == 'Draft and Unscheduled Mailings') {
      CRM_Utils_System::setTitle('Draft and Unscheduled Email');
    }
    elseif ($title == 'Scheduled and Sent Mailings') {
      CRM_Utils_System::setTitle('Scheduled and Sent Email');
    }
    elseif ($title == 'Archived Mailings') {
      CRM_Utils_System::setTitle('Archived Email');
    }
    //CRM_Core_Error::debug($parent);
  }

  //5581 - optimized opt out
  if ($formName == 'CRM_Profile_Form_Edit' &&
      $form->getVar('_ufGroupName') == 'Mass_Email_Subscriptions') {
    $cid = $form->getVar('_id');

    //get contact display name
    $displayName = civicrm_api('contact', 'getvalue', array('version'=>3, 'id'=>$cid, 'return'=>'display_name'));
    $form->assign('display_name', $displayName);

    //get senator name
    $bbconfig = get_bluebird_instance_config();
    $form->assign('senatorFormal', $bbconfig['senator.name.formal']);

    $contactEmails = array();
    $sql = "
      SELECT *
      FROM civicrm_email
      WHERE contact_id = {$cid}
    ";
    $email = CRM_Core_DAO::executeQuery($sql);

    $locTypes = civicrm_api('location_type', 'get', array('version' => 3));
    //CRM_Core_Error::debug_var('$locTypes', $locTypes);
    $lt = array();
    foreach ($locTypes['values'] as $lt_id => $lt_val) {
      if ($lt_val['is_active']) {
        $lt[$lt_id] = $lt_val['display_name'];
      }
    }
    //CRM_Core_Error::debug_var('$lt', $lt);

    $holdOptions = array(
      1 => ts('On Hold Bounce'),
      2 => ts('On Hold Opt Out'),
    );
    $blockId = 0;

    //get category options
    $mCats = array();
    $opts = CRM_Core_DAO::executeQuery("
      SELECT ov.label, ov.value
      FROM civicrm_option_value ov
      JOIN civicrm_option_group og
        ON ov.option_group_id = og.id
        AND og.name = 'mailing_categories'
      ORDER BY ov.label
    ");
    while ($opts->fetch()) {
      $mCats[$opts->value] = $opts->label;
    }

    $defaults = array();
    while ($email->fetch()) {
      $contactEmails[$email->id] = array(
        'location_type_id' => $lt[$email->location_type_id],
        'email' => $email->email,
        'is_primary' => $email->is_primary,
        'on_hold' => CRM_Utils_Array::value($email->on_hold, $holdOptions, ''),
        'hold_date' => $email->hold_date,
        'mailing_categories' => $email->mailing_categories,
      );

      /*$form->addElement('text', "email[$blockId][email]", ts('Email'),
        CRM_Core_DAO::getAttribute('CRM_Core_DAO_Email', 'email'));
      $form->addElement('select', "email[$blockId][location_type_id]", '',
        CRM_Core_PseudoConstant::get('CRM_Core_DAO_Address', 'location_type_id'));
      $form->addElement('select', "email[$blockId][on_hold]", '', $holdOptions);*/

      $form->add('select',
                 "email[{$email->id}][mailing_categories]",
                 ts('Subscription Opt-Outs'),
                 $mCats,
                 false,
                 array(
                   'id' => 'subscription-optout-'.$email->id,
                   'multiple' => 'multiple',
                   'title' => ts('- select -')
                 )
      );

      //set defaults
      $defaults["email[{$email->id}][mailing_categories]"] = $email->mailing_categories;
    }
    //CRM_Core_Error::debug_var('$contactEmails', $contactEmails);
    $form->assign('emails', $contactEmails);
    $form->setDefaults($defaults);
  }

  //CRM_Core_Error::debug_var('formName', $formName);
  //CRM_Core_Error::debug_var('form', $form);
} // nyss_mail_civicrm_buildForm()


function nyss_mail_civicrm_postProcess($formName, &$form)
{
  if ($formName == 'CRM_Mailing_Form_Group') {
    $mailingID = $form->getVar('_mailingID');
    $submitValues = $form->_submitValues;
    //CRM_Core_Error::debug_var('submitValues', $submitValues);

    $dedupeEmails = $submitValues['dedupe_email'];
    $mailingCat = CRM_Utils_Array::value('category', $submitValues, null);

    //add exclude_ood to mailing record
    $excludeOOD = (!empty($submitValues['exclude_ood'])) ? $submitValues['exclude_ood'] : FILTER_ALL;

    //exclude_ood is set from config file initially, so overwrite form values
    $bbconfig = get_bluebird_instance_config();

    $excludeOOD = FILTER_ALL;
    if (isset($bbconfig['email.filter.district'])) {
      $filter_district = $bbconfig['email.filter.district'];
      switch ($filter_district) {
        case "1": case "strict": case "in_sd":
          $excludeOOD = FILTER_IN_SD_ONLY;
          break;
        case "2": case "fuzzy": case "in_sd_or_no_sd":
          $excludeOOD = FILTER_IN_SD_OR_NO_SD;
          break;
        default:
          $excludeOOD = FILTER_ALL;
      }
    }

    $sqlParams  = array(
      1 => array($mailingID, 'Integer'),
      2 => array($excludeOOD, 'Integer'),
    );
    CRM_Core_DAO::executeQuery("UPDATE civicrm_mailing SET exclude_ood = %2 WHERE id = %1;", $sqlParams);

    //5581
    if ($mailingCat) {
      $sqlParams  = array(
        1 => array($mailingID, 'Integer'),
        2 => array($mailingCat, 'Integer'),
      );
      CRM_Core_DAO::executeQuery("UPDATE civicrm_mailing SET category = %2 WHERE id = %1;", $sqlParams);
    }

    //4628, 4879
    if ($form->_submitValues['all_emails']) {
      _addAllEmails($mailingID, $dedupeEmails, $excludeOOD);
    }

    if ($excludeOOD != FILTER_ALL) {
      _excludeOOD($mailingID, $dedupeEmails, $excludeOOD);
    }

    //5581
    if ($mailingCat) {
      _excludeCategoryOptOut($mailingID, $mailingCat);
    }

    //add email seed group as last step in the process
    _addEmailSeeds($mailingID);

    //recalculate the total recipients
    if ($form->_submitValues['all_emails'] || $excludeOOD != FILTER_ALL || $mailingCat) {
      $count = CRM_Mailing_BAO_Recipients::mailingSize($mailingID);
      $form->set('count', $count);
      $form->assign('count', $count);
    }

    //5996 set default header/footer if save later on step 1
    $buttonName = $form->controller->getButtonName();
    if ($buttonName == '_qf_Group_submit') {
      $mailing = new CRM_Mailing_DAO_Mailing();
      $mailing->id = $mailingID;
      $mailing->find(true);
      if (empty($mailing->header_id) || empty($mailing->footer_id)) {
        //get default header/footer
        $componentFields = array(
          'header_id' => 'Header',
          'footer_id' => 'Footer',
        );
        foreach ($componentFields as $componentVar => $componentType) {
          $mailing->$componentVar = CRM_Mailing_PseudoConstant::defaultComponent($componentType, '');
        }
        $mailing->created_date = date('YmdHis', strtotime($mailing->created_date));
        $mailing->save();
      }
      //CRM_Core_Error::debug_var('$mailing', $mailing);
    }

    //disable click through/opens/replies
    $mailing = new CRM_Mailing_DAO_Mailing();
    $mailing->id = $mailingID;
    $mailing->find(true);
    $mailing->url_tracking = 0;
    $mailing->forward_replies = 0;
    $mailing->auto_responder = 0;
    $mailing->open_tracking = 0;
    $mailing->created_date = date('YmdHis', strtotime($mailing->created_date));
    $mailing->visibility = 'Public Pages';
    $mailing->save();

    //CRM_Core_Error::debug('postProcess Group form', $form); exit();
  }

  //5581
  if ($formName == 'CRM_Profile_Form_Edit' &&
      $form->getVar('_ufGroupName') == 'Mass_Email_Subscriptions') {
    $vals = $form->_submitValues;
    $cid = $form->getVar('_id');
    //CRM_Core_Error::debug_var('vals', $vals);

    $allEmails = CRM_Core_DAO::executeQuery("
      SELECT id
      FROM civicrm_email
      WHERE contact_id = {$cid}
    ");

    while ($allEmails->fetch()) {
      $mCatsList = '';
      if (isset($vals['email'][$allEmails->id])) {
        $mCatsList = implode(',', $vals['email'][$allEmails->id]['mailing_categories']);
      }
      CRM_Core_DAO::executeQuery("
        UPDATE civicrm_email
        SET mailing_categories = '{$mCatsList}'
        WHERE id = {$allEmails->id}
      ");
    }

    if (!empty($vals['note'])) {
      $form->assign('noteText', $vals['note']);
    }
  }
  //CRM_Core_Error::debug($form); exit();
} //nyss_mail_civicrm_postProcess()


function nyss_mail_civicrm_pageRun(&$page)
{
  //CRM_Core_Error::debug_var('page', $page);

  //expose url/open tracking to mailing report
  //need to do manually since we are not using native tracking tools
  if ($page->getVar('_name') == 'CRM_Mailing_Page_Report') {
    $smarty =& CRM_Core_Smarty::singleton();
    $rpt =& $smarty->get_template_vars('report');
    //CRM_Core_Error::debug('rpt', $rpt);

    $rpt['mailing']['url_tracking'] = 1;
    $rpt['mailing']['open_tracking'] = 1;

    $smarty->assign_by_ref('report', $rpt);

    //7860 include mailing category on report page
    $mailingID = $page->_mailing_id;
    if ( $mailingID ) {
      $category = CRM_Core_DAO::singleValueQuery("
        SELECT ov.label
        FROM civicrm_mailing m
        JOIN civicrm_option_value ov
          ON m.category = ov.value
          AND ov.option_group_id = (SELECT id FROM civicrm_option_group WHERE name = 'mailing_categories')
        WHERE m.id = {$mailingID}
      ");

      if ( $category ) {
        $page->assign('mailing_category', $category);
      }
    }

  }

  //5567 fix title
  if ($page->getVar('_name') == 'CRM_Mailing_Page_Event') {
    $event = CRM_Utils_Array::value('event', $_GET);
    if ($event == 'unsubscribe') {
      CRM_Utils_System::setTitle(ts('Opt-out Requests'));
    }
  }

  //5581
  if ($page->getVar('_name') == 'CRM_Profile_Page_View') {
    $gid = CRM_Core_DAO::singleValueQuery("
      SELECT id
      FROM civicrm_uf_group
      WHERE name = 'Mass_Email_Subscriptions'
    ");

    if ($page->getVar('_gid') == $gid) {
      CRM_Utils_System::setTitle('Mass Email Subscriptions');

      //get all emails
      $cid = $page->getVar('_id');

      //get contact display name
      $displayName = civicrm_api('contact', 'getvalue', array('version'=>3, 'id'=>$cid, 'return'=>'display_name'));
      $page->assign('display_name', $displayName);

      //get senator name
      $bbconfig = get_bluebird_instance_config();
      $page->assign('senatorFormal', $bbconfig['senator.name.formal']);

      $contactEmails = array();
      $sql = "
        SELECT *
        FROM civicrm_email
        WHERE contact_id = {$cid}
      ";
      $email = CRM_Core_DAO::executeQuery($sql);

      $locTypes = civicrm_api('location_type', 'get', array('version' => 3));
      //CRM_Core_Error::debug_var('$locTypes', $locTypes);
      $lt = array();
      foreach ($locTypes['values'] as $lt_id => $lt_val) {
        if ($lt_val['is_active']) {
          $lt[$lt_id] = $lt_val['display_name'];
        }
      }
      //CRM_Core_Error::debug_var('$lt', $lt);

      $holdOptions = array(
        1 => ts('On Hold Bounce'),
        2 => ts('On Hold Opt Out'),
      );

      //get category options
      $mCats = array();
      $opts = CRM_Core_DAO::executeQuery("
        SELECT ov.label, ov.value
        FROM civicrm_option_value ov
        JOIN civicrm_option_group og
          ON ov.option_group_id = og.id
          AND og.name = 'mailing_categories'
        ORDER BY ov.label
      ");
      while ($opts->fetch()) {
        $mCats[$opts->value] = $opts->label;
      }

      while ($email->fetch()) {
        $contactEmails[$email->id] = array(
          'location_type_id' => $lt[$email->location_type_id],
          'email' => $email->email,
          'is_primary' => $email->is_primary,
          'on_hold' => CRM_Utils_Array::value($email->on_hold, $holdOptions, ''),
          'hold_date' => $email->hold_date,
        );
        $cats = explode(',', $email->mailing_categories);
        $catsLabel = array();
        foreach ($cats as $cat) {
          $catsLabel[] = $mCats[$cat];
        }
        $contactEmails[$email->id]['mailing_categories'] = implode(', ', $catsLabel);
      }
      $page->assign('emails', $contactEmails);
    }
  }//5581
}//nyss_mail_civicrm_pageRun()


function nyss_mail_civicrm_alterTemplateFile($formName, &$form, $context, &$tplName)
{
  //CRM_Core_Error::debug_var('$formName', $formName);
  //CRM_Core_Error::debug_var('$form', $form);
  //CRM_Core_Error::debug_var('$context', $context);
  //CRM_Core_Error::debug_var('$tplName', $tplName);

  if ($formName == 'CRM_Profile_Form_Edit' &&
      $form->getVar('_ufGroupName') == 'Mass_Email_Subscriptions') {
    $tplName = 'CRM/NYSS/Subscription.tpl';
  }

  //5581
  if ($formName == 'CRM_Profile_Page_View') {
    $gid = CRM_Core_DAO::singleValueQuery("
      SELECT id
      FROM civicrm_uf_group
      WHERE name = 'Mass_Email_Subscriptions'
    ");

    if ($form->getVar('_gid') == $gid) {
      $tplName = 'CRM/NYSS/SubscriptionView.tpl';
    }
  }
}//alterTemplateFile


//4628
function _addAllEmails($mailingID, $dedupeEmails = false, $excludeOOD = FILTER_ALL)
{
  require_once 'CRM/Mailing/BAO/Mailing.php';

  $sql = "
INSERT INTO civicrm_mailing_recipients
  (mailing_id, email_id, contact_id)
SELECT DISTINCT %1, e.id, e.contact_id
FROM civicrm_email e
JOIN civicrm_mailing_recipients mr
  ON e.contact_id = mr.contact_id
  AND mr.mailing_id = %1
  AND e.on_hold = 0
WHERE e.id NOT IN (
  SELECT email_id
  FROM civicrm_mailing_recipients mr
  WHERE mailing_id = %1
)
";

  if ($dedupeEmails && $excludeOOD == FILTER_ALL) {
    $sql .= "
      AND e.email NOT IN (
        SELECT e.email
        FROM civicrm_mailing_recipients mr
          JOIN civicrm_email e
          ON mr.email_id = e.id
        WHERE mr.mailing_id = %1
      )
    ";
  }
  $params = array(1 => array($mailingID, 'Integer'));
  //CRM_Core_Error::debug('params',$params); exit();

  $dao = CRM_Core_DAO::executeQuery($sql, $params);

  //remove onHold as we didn't do it earlier
  CRM_Mailing_BAO_Mailing::removeOnHold((int)$mailingID);
} //_addAllEmails()


//4879
function _excludeOOD($mailingID, $dedupeEmails = false, $excludeOOD)
{
  //determine what SD we are in
  $bbconfig = get_bluebird_instance_config();
  $district = $bbconfig['district'];

  if (empty($district)) {
    return;
  }

  //create temp table to store contacts confirmed to be in district
  $tempTbl = "nyss_temp_excludeOOD_$mailingID";
  $sql = "CREATE TEMPORARY TABLE $tempTbl(contact_id INT NOT NULL, PRIMARY KEY(contact_id)) ENGINE=MyISAM;";
  CRM_Core_DAO::executeQuery($sql);

  $sql = "
    INSERT INTO $tempTbl
    SELECT DISTINCT mr.contact_id
    FROM civicrm_mailing_recipients mr
    JOIN civicrm_address a
      ON mr.contact_id = a.contact_id
    JOIN civicrm_value_district_information_7 di
      ON a.id = di.entity_id
    WHERE mailing_id = $mailingID
      AND ny_senate_district_47 = $district;";
  CRM_Core_DAO::executeQuery($sql);

  //also include unknowns if option enabled
  if ($excludeOOD == FILTER_IN_SD_OR_NO_SD) {
    //include where no district is known or no address is present
    $sql = "
      INSERT INTO $tempTbl
      SELECT mr.contact_id
      FROM civicrm_mailing_recipients mr
      LEFT JOIN civicrm_address a
        ON mr.contact_id = a.contact_id
      LEFT JOIN civicrm_value_district_information_7 di
        ON a.id = di.entity_id
      WHERE mr.mailing_id = $mailingID
      GROUP BY mr.contact_id
      HAVING COUNT(di.ny_senate_district_47) = 0";
    CRM_Core_DAO::executeQuery($sql);
  }

  //now remove contacts from the recipients table that are not found in the inclusion table
  $sql = "
    DELETE FROM civicrm_mailing_recipients
    USING civicrm_mailing_recipients
    LEFT JOIN $tempTbl
      ON civicrm_mailing_recipients.contact_id = $tempTbl.contact_id
    WHERE civicrm_mailing_recipients.mailing_id = $mailingID
      AND $tempTbl.contact_id IS NULL;";
  CRM_Core_DAO::executeQuery($sql);

  //cleanup
  CRM_Core_DAO::executeQuery("DROP TABLE $tempTbl");

  //if not deduping emails, return now
  if (!$dedupeEmails) {
    return;
  }

  //if dedupeEmails, handle that now, as it was skipped earlier in the process
  $tempTbl = "nyss_temp_dedupe_emails_$mailingID";
  $sql = "CREATE TEMPORARY TABLE $tempTbl (email_id INT NOT NULL, PRIMARY KEY(email_id)) ENGINE=MyISAM;";
  CRM_Core_DAO::executeQuery($sql);

  $sql = "
    INSERT INTO $tempTbl
    SELECT mr.email_id
    FROM civicrm_mailing_recipients mr
    JOIN civicrm_email e
      ON mr.email_id = e.id
    WHERE mailing_id = $mailingID
    GROUP BY e.email;";
  CRM_Core_DAO::executeQuery($sql);

  //now remove contacts from the recipients table that are not found in the inclusion table
  $sql = "
    DELETE FROM civicrm_mailing_recipients
    USING civicrm_mailing_recipients
    LEFT JOIN $tempTbl
      ON civicrm_mailing_recipients.email_id = $tempTbl.email_id
    WHERE civicrm_mailing_recipients.mailing_id = $mailingID
      AND $tempTbl.email_id IS NULL;";
  CRM_Core_DAO::executeQuery($sql);

  //cleanup
  CRM_Core_DAO::executeQuery("DROP TABLE $tempTbl");
} // _excludeOOD()

//5581
function _excludeCategoryOptOut($mailingID, $mailingCat)
{
  $sql = "
    DELETE FROM civicrm_mailing_recipients
    USING civicrm_mailing_recipients
    JOIN civicrm_email
      ON civicrm_mailing_recipients.email_id = civicrm_email.id
    WHERE FIND_IN_SET({$mailingCat}, civicrm_email.mailing_categories)
      AND civicrm_mailing_recipients.mailing_id = $mailingID
  ";
  //CRM_Core_Error::debug_var('sql', $sql);
  CRM_Core_DAO::executeQuery($sql);
}//_excludeCategoryOptOut


function _addEmailSeeds($mailingID)
{
  $gid = CRM_Core_DAO::singleValueQuery("SELECT id FROM civicrm_group WHERE name LIKE 'Email_Seeds';");

  if (!$gid) {
    return;
  }

  $sql = "
    INSERT INTO civicrm_mailing_recipients ( mailing_id, contact_id, email_id )
    SELECT $mailingID, e.contact_id, e.id
    FROM civicrm_group_contact gc
    JOIN civicrm_email e
      ON gc.contact_id = e.contact_id
      AND gc.group_id = $gid
      AND gc.status = 'Added'
      AND e.on_hold = 0
      AND ( e.is_primary = 1 OR e.is_bulkmail = 1 )
    JOIN civicrm_contact c
      ON gc.contact_id = c.id
    LEFT JOIN civicrm_mailing_recipients mr
      ON gc.contact_id = mr.contact_id
      AND mr.mailing_id = $mailingID
    WHERE mr.id IS NULL
      AND c.is_deleted = 0;";
  //CRM_Core_Error::debug($sql);exit();
  CRM_Core_DAO::executeQuery($sql);
} // _addEmailSeeds()


function fixup_html_message($m)
{
  $added_tags = '';

  // The <body> tag is typically in the header template, while the </body>
  // tag is in the footer template.  So check for both separately.
  if (stripos($m, '<body') === false) {
    $m = '<body style="font-family:arial; font-size:14px; color:#505050; background-color:#ffffff;" leftmargin="0" topmargin="0" marginheight="0" marginwidth="0" offset="0">'."\n$m";
    $added_tags .= ' BODY';
  }
  if (stripos($m, '</body>') === false) {
    $m .= "\n</body>";
    $added_tags .= ' /BODY';
  }

  // The <head> and </head> tags are typically both in the header template.
  if (stripos($m, '<head') === false) {
    $m = "<head>\n<title>New York State Senate</title>\n</head>\n$m";
    $added_tags .= ' HEAD TITLE /TITLE /HEAD';
  }
  else if (stripos($m, '</head>') === false) {
    $m = str_ireplace('<body', "</head>\n<body", $m);
    $added_tags .= ' /HEAD';
  }

  // The <html> and </html> tags are separated in the header & footer templates.
  if (stripos($m, '<html>') === false) {
    $m = "<html>\n$m";
    $added_tags .= ' HTML';
  }
  if (stripos($m, '</html>') === false) {
    $m .= "\n</html>";
    $added_tags .= ' /HTML';
  }

  if (!empty($added_tags)) {
    $m .= "\n<!-- AutoInserted Tags: $added_tags -->";
  }
  return $m;
} // fixup_html_message()

