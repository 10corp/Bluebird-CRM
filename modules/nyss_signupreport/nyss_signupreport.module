<?php
$this_dir = dirname(__FILE__);
$root_dir = realpath("$this_dir/../..");
require_once realpath("$root_dir/civicrm/scripts/script_utils.php");
require_once realpath("$root_dir/civicrm/scripts/bluebird_config.php");
error_reporting(E_ALL);
ini_set('display_errors', true);
function nyss_signupreport_menu() {
  $items = array();
  $items['nyss_signupreport'] = array (
    'title' => 'NYSS Web Signup Report',
    'page callback' => 'nyss_signupreport_page',
    'access callback' => TRUE,
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['nyss_signupreport_download'] = array (
    'page callback' => 'nyss_signupreport_download_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}
function nyss_signupreport_page($args = 'all') {
  $instance = new Instance();
  return $instance->write_template();
}
function nyss_signupreport_download_page() {

  $instance = new Instance();
  $filename = $_GET['filename'];
  $file = $instance->entries["$filename"];
  $filesize = filesize($file);
  // header("Pragma: public");
  // header("Expires: 0");
  // header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
  // header('Content-Disposition: attachment; filename="' .$filename. '"');
  // echo $filesize;
  // echo $file;
  // echo $filename;
  if (!is_dir($instance->path) || !is_readable($instance->path)) {
    die("Inexistant or inaccessible folder. $this->file");
  } else {
    if (file_exists($file)) {
      header("Pragma: public", true);
      header("Expires: 0"); // set expiration time
      header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
      header("Content-Type: application/force-download");
      header("Content-Type: application/octet-stream");
      header("Content-Type: application/download");
      header("Content-Disposition: attachment; filename=".basename($file));
      header("Content-Transfer-Encoding: binary");
      header("Content-Length: ".filesize($file));
      ob_clean();
      flush();
      die(readfile($file));
    } 
    else {
      error_log("Error: File not Found.");
      die("Error: File not found.");
    }
    
  }
}

class Instance {
  public $output = "";
  function __construct() {
    $instance_cfg = get_bluebird_instance_config();
    $this->data_root = $instance_cfg["data.rootdir"];
    $this->data_instance_name = $instance_cfg["data_dirname"];
    $this->signups_dirname = $instance_cfg["signups.reports.dirname"];
    foreach (get_object_vars($this) as $k => $v) {
      $this->chop_trailing_slash($k,$v);
    }
    $this->get_path();
  }
  public function write_template() {
    $out = "<div id='nyss-web-signup-reports'>";
    $out .= "<div class='headers'><div class='filepath'>File Name</div><div class='modtime'>Last Modified</div><div class='filesize'>File Size</div></div>";
    foreach ($this->entries as $k => $v) {
      $out .= "<div class='entry'>";
      $out .= "<div class='filepath'>".$this->convert_path_to_link($k)."</div>";
      $out .= "<div class='modtime'>".date ('F d Y H:i:s', filemtime($v))."</div>";
      $out .= "<div class='filesize'>".$this->filesize_formatted($v)."</div>";
      $out .= "</div>";
    }
    $out .= "</div>";
    return $this->output = $out;
  }
  public function convert_path_to_link($k) {
    return l(t($k), 'nyss_signupreport_download', array('query' => array('filename' => $k)));
  }
  private function get_path() {
    $root = realpath($_SERVER["DOCUMENT_ROOT"]);
    $this->path = "$root/../../../..$this->data_root/$this->data_instance_name/$this->signups_dirname";
    if (!is_dir($this->path) || !is_readable($this->path))
      die("Inexistant or inaccessible folder. $this->path");
    if ($handle = opendir($this->path)) {
      $this->entries = array();
      while(false !== ($entry = readdir($handle))) {
        if ($entry != "." && $entry != "..") {
          $this->entries["$entry"] = "$this->path/$entry";
        }
      }
      closedir($handle);
    }
  }
  private function filesize_formatted($path) {
    $size = filesize($path);
    $units = array( 'B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB');
    $power = $size > 0 ? floor(log($size, 1024)) : 0;
    $ret = number_format($size / pow(1024, $power), 2, '.', ',') . ' ' . $units[$power];
    if($power == 0) {
      $ret = number_format($size / pow(1024, $power), 0, '.', ',') . ' ' . $units[$power];
    }
    return $ret;
  }
  private function chop_trailing_slash($k,$v) {
    if(substr($v,-1) == "/")  {
      $this->$k  = substr($v,0,-1);
    }
  }
}