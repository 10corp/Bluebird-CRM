<?php

$this_dir = dirname(__FILE__);
$root_dir = realpath("$this_dir/../..");
require_once realpath("$root_dir/civicrm/scripts/script_utils.php");
require_once realpath("$root_dir/civicrm/scripts/bluebird_config.php");


function nyss_signupreport_menu()
{
  $items = array();
  $items['nyss_signupreport'] = array(
    'title' => 'NYSS Web Signup Report',
    'page callback' => 'nyss_signupreport_page',
    'access callback' => TRUE,
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['nyss_signupreport_download'] = array(
    'page callback' => 'nyss_signupreport_download_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}


function nyss_signupreport_page($args = 'all')
{
  $instance = new Instance();
  return $instance->generate_template();
}


function nyss_signupreport_download_page()
{
  $instance = new Instance();
  $filename = $_GET['filename'];
  $filepath = $instance->entries[$filename];
  $filesize = filesize($filepath);

  if (file_exists($filepath)) {
    header("Pragma: public", true);
    header("Expires: 0"); // set expiration time
    header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
    header("Content-Type: application/octet-stream");
    header("Content-Disposition: attachment; filename=\"$filename\"");
    header("Content-Transfer-Encoding: binary");
    header("Content-Length: $filesize");
    ob_clean();
    flush();
    die(readfile($filepath));
  } 
  else {
    error_log("ERROR: $filepath: File not found");
    die("ERROR: $filepath: File not found");
  }
}


class Instance
{
  function __construct()
  {
    $bbcfg = get_bluebird_instance_config();
    $signups_path = $bbcfg['data.rootdir'].'/'.$bbcfg['data_dirname'].'/'.$bbcfg['signups.reports.dirname'];
    $this->entries = $this->get_reports($signups_path);
  }


  public function generate_template()
  {
    $out = "<div id='nyss-web-signup-reports'>\n"
          ."<div class='headers'><div class='filepath'>File Name</div><div class='modtime'>Last Modified</div><div class='filesize'>File Size</div></div>";

    foreach ($this->entries as $k => $v) {
      $filelink = $this->convert_path_to_link($k);
      $filemodtime = date('F d Y H:i:s', filemtime($v));
      $filesize = $this->filesize_formatted($v);

      $out .= "<div class='entry'>\n"
           ."<div class='filepath'>$filelink</div>\n"
           ."<div class='modtime'>$filemodtime</div>\n"
           ."<div class='filesize'>$filesize</div>\n"
           ."</div>\n";
    }
    $out .= "</div>\n";
    return $out;
  }


  public function convert_path_to_link($k)
  {
    return l(t($k), 'nyss_signupreport_download', array('query' => array('filename' => $k)));
  }


  private function get_reports($reportdir)
  {
    $entries = array();
    if (is_dir($reportdir) && is_readable($reportdir)) {
      if ($handle = opendir($reportdir)) {
        while (false !== ($entry = readdir($handle))) {
          if ($entry != "." && $entry != "..") {
            $entries[$entry] = "$reportdir/$entry";
          }
        }
        closedir($handle);
      }
      else {
        echo "Unable to read directory: $reportdir\n";
      }
    }
    else {
      echo "Non-existant or inaccessible directory: $reportdir\n";
    }
    return $entries;
  }


  private function filesize_formatted($path)
  {
    $size = filesize($path);
    $units = array('B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB');
    $power = $size > 0 ? floor(log($size, 1024)) : 0;
    $decimals = $power == 0 ? 0 : 2;
    $num = number_format($size / pow(1024, $power), $decimals, '.', ',');
    return $num.' '.$units[$power];
  }

}
