<?php

require_once dirname(__FILE__).'/../../civicrm/scripts/bluebird_config.php';


function nyss_signupreport_menu()
{
  $items = array();
  $items['signupreports'] = array(
    'title' => t('Web Signup Reports - Weekly Signups from NYSenate.gov'),
    'page callback' => 'nyss_signupreport_page',
    'access arguments' => array('access CiviCRM')
  );
  $items['signupreports_download'] = array(
    'page callback' => 'nyss_signupreport_download_page',
    'access arguments' => array('access CiviCRM')
  );
  return $items;
}


function nyss_signupreport_page($args = 'all')
{
  $instance = new Instance();
  return $instance->generate_template();
}


function nyss_signupreport_download_page()
{
  $filename = $_GET['filename'];

  if (!$filename) {
    die("ERROR: No filename was specified");
  }

  $instance = new Instance();
  $instance->download_file($filename);
  // There is no return from download_file().  The script dies there.
}



class Instance
{
  function __construct()
  {
    $bbcfg = get_bluebird_instance_config();
    $signups_path = $bbcfg['data.rootdir'].'/'.$bbcfg['data_dirname'].'/'.$bbcfg['signups.reports.dirname'];
    $this->file_entries = $this->get_file_entries($signups_path);
  }


  public function generate_template()
  {
    $entries = $this->file_entries;
    $out = "<div id='nyss-web-signup-reports'>\n"
          ."<div class='headers'><div class='filepath'>File Name</div><div class='modtime'>Last Modified</div><div class='filesize'>File Size</div></div>";

    foreach ($entries as $filename => $entry) {
      $filelink = $this->convert_path_to_link($filename);
      $formatted_modtime = date('F d Y H:i:s', $entry['mtime']);
      $formatted_size = $this->filesize_formatted($entry['size']);

      $out .= "<div class='entry'>\n"
           ."<div class='filepath'>$filelink</div>\n"
           ."<div class='modtime'>$formatted_modtime</div>\n"
           ."<div class='filesize'>$formatted_size</div>\n"
           ."</div>\n";
    }
    $out .= "</div>\n";
    return $out;
  }


  public function download_file($filename)
  {
    $file_entry = $this->file_entries[$filename];

    if (!$file_entry) {
      die("ERROR: $filename: Not found in list of signup reports");
    }

    $filepath = $file_entry['path'];
    $filesize = $file_entry['size'];

    if (file_exists($filepath)) {
      header("Pragma: public", true);
      header("Expires: 0"); // set expiration time
      header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
      header("Content-Type: application/octet-stream");
      header("Content-Disposition: attachment; filename=\"$filename\"");
      header("Content-Transfer-Encoding: binary");
      header("Content-Length: $filesize");
      ob_clean();
      flush();
      die(readfile($filepath));
    } 
    else {
      die("ERROR: $filepath: File not found");
    }
  }


  private function get_file_entries($dir)
  {
    $entries = array();
    if (is_dir($dir) && is_readable($dir)) {
      if ($handle = opendir($dir)) {
        while (false !== ($entry = readdir($handle))) {
          if ($entry != '.' && $entry != '..') {
            $fpath = $dir.'/'.$entry;
            $entries[$entry] = array('name' => $entry,
                                     'mtime' => filemtime($fpath),
                                     'size' => filesize($fpath),
                                     'path' => $fpath);
          }
        }
        closedir($handle);
      }
      else {
        echo "Unable to read directory: $dir\n";
      }
    }
    else {
      echo "Non-existent or inaccessible directory: $dir\n";
    }

    uasort($entries, 'Instance::compare_mtime');
    return $entries;
  }


  private static function compare_mtime($a, $b)
  {
    if ($a['mtime'] == $b['mtime']) {
      return 0;
    }
    return ($a['mtime'] > $b['mtime']) ? -1 : 1;
  }


  private function convert_path_to_link($k)
  {
    return l(t($k), 'signupreports_download', array('query' => array('filename' => $k)));
  }


  private function filesize_formatted($size)
  {
    $units = array('B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB');
    $power = $size > 0 ? floor(log($size, 1024)) : 0;
    $decimals = $power == 0 ? 0 : 2;
    $num = number_format($size / pow(1024, $power), $decimals, '.', ',');
    return $num.' '.$units[$power];
  }

}
