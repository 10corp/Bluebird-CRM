<?php
/**
 * NYSS #7893
 *
 * Add delta log facilities.  In generic logging summary report, the log is drawn
 * real-time from a series of queries dumping into a temporary table.  The delta
 * log makes this a permanent table, with additional triggers on all potential
 * source tables to populate it in real time.
 */
function nyss_deltalog_civicrm_triggerInfo(&$triggers, $tableName=NULL) {
  // just for easy reference
  $log_prefix = "log_civicrm_";

  // add the changelog summary trigger
  $trigger_sql = "IF NEW.`log_user_id` IS NULL THEN " .
                 "SET NEW.`log_user_id` = @civicrm_user_id; " .
                 "END IF; " .
                 "SET NEW.`log_change_seq`=nyss_fnGetChangelogSequence();";
  $triggers[] = array(
    'table' => 'nyss_changelog_summary',
    'event' => 'insert',
    'when'  => 'before',
    'sql'   => $trigger_sql
  );

  // add the changelog detail trigger
  /* **** IMPORTANT
      This trigger expects to receive the altered_contact_id in place of
      the log_change_seq field.  The change_seq is generated from a session
      variable, and does not need to be passed in the original insert.  On
      the other hand, the summary table needs the altered_contact_id, but
      the detail has no where to store it.  The log_change_seq field is used
      as a temporary delivery mechanism.  Sloppy, but it works. */
  // see /scripts/delta-log-triggers.sql for commented version
  $trigger_sql =  "SET @this_altered_contact_id=NEW.`log_change_seq`; " .
                  "SET @this_log_action=NEW.`log_action`; " .
                  "SET @this_log_type_label=''; " .
                  "CASE NEW.`log_type` " .
                    "WHEN 'log_civicrm_email' THEN SET @this_log_type_label='Contact'; " .
                    "WHEN 'log_civicrm_phone' THEN SET @this_log_type_label='Contact'; " .
                    "WHEN 'log_civicrm_address' THEN SET @this_log_type_label='Contact'; " .
                    "WHEN 'log_civicrm_openid' THEN SET @this_log_type_label='Contact'; " .
                    "WHEN 'log_civicrm_im' THEN SET @this_log_type_label='Contact'; " .
                    "WHEN 'log_civicrm_website' THEN SET @this_log_type_label='Contact'; " .
                    "WHEN 'log_civicrm_value_constituent_information_1' THEN SET @this_log_type_label='Contact'; " .
                    "WHEN 'log_civicrm_value_district_information_7' THEN SET @this_log_type_label='Contact'; " .
                    "WHEN 'log_civicrm_activity_for_target' THEN SET @this_log_type_label='Activity'; " .
                    "WHEN 'log_civicrm_activity_for_assignee' THEN SET @this_log_type_label='Activity'; " .
                    "WHEN 'log_civicrm_activity_for_source' THEN SET @this_log_type_label='Activity'; " .
                    "WHEN 'log_civicrm_group_contact' THEN " .
                      "BEGIN " .
                        "SET @this_log_type_label='Group'; " .
                        "IF NEW.`log_action` = 'Update' THEN " .
                          "SET @this_log_action = 'Update'; " .
                        "ELSEIF NEW.`log_action` = 'Insert' THEN " .
                          "SET @this_log_action = 'Added'; " .
                        "END IF; " .
                      "END; " .
                    "ELSE " .
                      "BEGIN " .
                        "SET @rev_type = REVERSE(NEW.`log_type`); " .
                        "SET @this_log_type_label=REVERSE(SUBSTR(@rev_type,1,LOCATE('_',@rev_type)-1)); " .
                      "END; " .
                  "END CASE; " .
                  "SET @this_log_type_label = CONCAT(UCASE(LEFT(@this_log_type_label,1)),SUBSTR(@this_log_type_label,2)); " .
                  "IF @nyss_changelog_sequence IS NULL THEN " .
                    "BEGIN " .
                      "INSERT INTO `nyss_changelog_summary` " .
                      "(`log_action_label`,`log_type_label`,`altered_contact_id`, `log_conn_id`) " .
                      "VALUES " .
                      "(@this_log_action, @this_log_type_label, @this_altered_contact_id, CONNECTION_ID()); " .
                    "END; " .
                  "ELSE " .
                    "BEGIN " .
                      "UPDATE `nyss_changelog_summary` " .
                        "SET `log_action_label`='Update' " .
                        "WHERE `log_change_seq`=@nyss_changelog_sequence; " .
                    "END; " .
                  "END IF; " .
                  "SET NEW.`log_change_seq` = @nyss_changelog_sequence; ";
  $triggers[] = array(
    'table' => 'nyss_changelog_detail',
    'event' => 'insert',
    'when'  => 'before',
    'sql'   => $trigger_sql
  );


  // every table will need three triggers - one for each type of event
  $actions = array('Insert','Update','Delete');

  // begin standard tables
  // the "standard" tables are those that relate directly to civicrm_contact
  // i.e., no need for further joins in order to discover the altered contact_id
  // a table list in the form of array ('table_name' => 'contact_id_field')
  $table_list = array(
                      'contact'       => 'id',
                      'email'         => 'contact_id',
                      'phone'         => 'contact_id',
                      'address'       => 'contact_id',
                      'group_contact' => 'contact_id',
                      'relationship'  => 'contact_id_a',
                      );

  // add any "direct relation" custom tables to the standard tables list
  $sql = "SELECT table_name FROM civicrm_custom_group WHERE extends IN " .
         "('Individual','Household','Organization','Contact');";
  $dao = CRM_Core_DAO::executeQuery($sql);
  while ($dao->fetch()) {
    // remove the beginning 'civicrm_' for easier reference
    $tname = preg_replace('/^civicrm_/', '', $dao->table_name, 1);
    // each of these custom tables uses entity_id to relate back to civicrm_contact
    $table_list[$tname] = 'entity_id';
  }
  // construct the "standard table" triggers
  $sql = "INSERT IGNORE INTO `nyss_changelog_detail` (" .
            "`log_id`, `log_action`, `log_table_name`, " .
            "`log_type`, `log_conn_id`, `log_change_seq`" .
          ") VALUES (" .
            "NEW.`id`, '{{log_action}}', 'log_civicrm_{{table_name}}', " .
            "'log_civicrm_{{table_name}}', CONNECTION_ID(), NEW.`{{contact_id}}`" .
          ");";
  foreach ($table_list as $k=>$v) {
    foreach ($actions as $one_action) {
      $search = array('{{log_action}}','{{table_name}}','{{contact_id}}');
      $replace = array($one_action,$k,$v);
      if ($one_action == 'Delete') {
        $search[] = "NEW.";
        $replace[] = "OLD.";
      }
      $onesql = str_replace($search,$replace,$sql);
      $triggers[] = array(
        'table' => "civicrm_{$k}",
        'event' => strtolower($one_action),
        'when'  => 'after',
        'sql'   => $onesql,
      );
    }
  }
  // end standard tables

  // begin special table triggers
  // these tables need intermediary joins to find the altered contact_id
  // also, other manipulations may be necessary (e.g., log_type)
  // this section includes tables created for custom data points (civicrm_custom_group)
  // $special_tables array('table_name' => 'trigger_sql')
  $special_tables = array();

  // begin civicrm_note
  $special_tables['note'] =
         "SET @trigger_contact_id = 0; " .
         "SET @trigger_tname = 'note'; " .
         "IF NEW.`entity_table` = 'civicrm_contact' THEN " .
            "SET @trigger_contact_id = NEW.`entity_id`; " .
         "ELSEIF NEW.`entity_table` = 'civicrm_note' THEN " .
            "BEGIN " .
              "SELECT a.`entity_id` INTO @trigger_contact_id FROM civicrm_note a " .
              "WHERE a.`entity_table`='civicrm_contact' AND a.`id`=NEW.`entity_id`; " .
              "SET @trigger_tname = 'note_comment'; " .
            "END; " .
         "ELSE SET @trigger_contact_id = 0; " .
         "END IF; " .
         "IF @trigger_contact_id > 0 THEN " .
            "INSERT INTO nyss_changelog_detail ( " .
              "`log_id`, `log_action`, `log_table_name`, " .
              "`log_type`, `log_conn_id`, `log_change_seq` " .
            " ) VALUES ( " .
              "NEW.id, '{{log_action}}', '$log_prefix{{table_name}}', " .
              "CONCAT('$log_prefix',@trigger_tname), CONNECTION_ID(), @trigger_contact_id " .
            ");" .
         "END IF; ";
  // end civicrm_note

  // begin civicrm_entity_tag
  $special_tables['entity_tag'] =
         "SET @trigger_contact_id = 0; " .
         "IF NEW.entity_table = 'civicrm_contact' THEN " .
            "SET @trigger_contact_id = NEW.entity_id; " .
         "ELSE SET @trigger_contact_id = 0; " .
         "END IF; " .
         "IF @trigger_contact_id > 0 THEN " .
            "INSERT INTO nyss_changelog_detail ( " .
              "`log_id`, `log_action`, `log_table_name`, " .
              "`log_type`, `log_conn_id`, `log_change_seq` " .
            " ) VALUES ( " .
              "NEW.id, '{{log_action}}', '$log_prefix{{table_name}}', " .
              "'$log_prefix{{table_name}}', CONNECTION_ID(), @trigger_contact_id " .
            ");" .
         "END IF; ";
  // end civicrm_entity_tag

  // begin civicrm_case
  $special_tables['case'] =
         "INSERT INTO nyss_changelog_detail (" .
            "`log_id`, `log_action`, `log_table_name`, " .
            "`log_type`, `log_conn_id`, `log_change_seq` " .
         ") SELECT " .
            "NEW.id, '{{log_action}}', '$log_prefix{{table_name}}', " .
            "'$log_prefix{{table_name}}', CONNECTION_ID(), b.contact_id " .
         "FROM civicrm_case_contact b WHERE b.case_id = NEW.id;";
  // end civicrm_case

  // begin civicrm_activity and tables related to "Activity"
  // list of tables dependent on activity entities
  $add_table_list = array('activity');
  $sql = "SELECT table_name FROM civicrm_custom_group WHERE extends = 'Activity';";
  $dao = CRM_Core_DAO::executeQuery($sql);
  while ($dao->fetch()) {
    // remove the beginning 'civicrm_' for easier reference
    $add_table_list[] = preg_replace('/^civicrm_/', '', $dao->table_name, 1);
  }
  // the special SQL for activity-based triggers
  $sql = "INSERT INTO nyss_changelog_detail (" .
            "`log_id`, `log_action`, `log_table_name`, " .
            "`log_type`, `log_conn_id`, `log_change_seq` " .
         ") SELECT " .
            "NEW.id, '{{log_action}}', '$log_prefix{{table_name}}', " .
            "CONCAT( " .
              "'$log_prefix{{table_name}}_for_', " .
              "CASE b.record_type_id " .
                "WHEN 1 THEN 'target' " .
                "WHEN 2 THEN 'source' " .
                "WHEN 3 THEN 'assigned' " .
                "ELSE 'unknown' " .
              "END " .
            "), " .
            "CONNECTION_ID(), " .
            "b.contact_id " .
         "FROM civicrm_activity_contact b " .
         "WHERE b.activity_id = NEW.{{contact_field}}; ";
  // add each table to the special tables array
  foreach ($add_table_list as $k) {
    // civicrm_activity is keyed on `id`.  All the others are on `entity_id`
    $onesql = str_replace('{{contact_field}}', $k=='activity' ? 'id' : 'entity_id', $sql);
    $special_tables[$k] = $onesql;
  }
  // end civicrm_activity and tables related to "Activity"

  // begin tables related to "Address"
  $sql = "SELECT table_name FROM civicrm_custom_group WHERE extends = 'Address';";
  $dao = CRM_Core_DAO::executeQuery($sql);
  // the special trigger SQL for each address-based triggers
  $sql = "INSERT INTO nyss_changelog_detail (" .
            "`log_id`, `log_action`, `log_table_name`, " .
            "`log_type`, `log_conn_id`, `log_change_seq` " .
         ") SELECT " .
            "NEW.id, '{{log_action}}', '$log_prefix{{table_name}}', " .
            "'$log_prefix{{table_name}}', CONNECTION_ID(), b.contact_id " .
         "FROM civicrm_address b WHERE b.id = NEW.entity_id;";
  while ($dao->fetch()) {
    // remove the beginning 'civicrm_' for easier reference
    $tname = preg_replace('/^civicrm_/', '', $dao->table_name, 1);
    $special_tables[$tname] = $sql;
  }
  // end tables related to "Address"

  // construct the "special table" triggers
  foreach ($special_tables as $k=>$v) {
    foreach ($actions as $one_action) {
      $search = array('{{log_action}}','{{table_name}}');
      $replace = array($one_action,$k);
      if ($one_action == 'Delete') {
        $search[] = "NEW.";
        $replace[] = "OLD.";
      }
      $onesql = str_replace($search,$replace,$v);
      $triggers[] = array(
        'table' => "civicrm_$k",
        'event' => strtolower($one_action),
        'when'  => 'after',
        'sql' => $onesql,
      );
    }
  }
  // end special table triggers
}