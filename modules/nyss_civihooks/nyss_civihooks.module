<?php 

function nyss_civihooks_menu() {

  $items = array();

  $items['nyss_getfile'] = array (
    'title' => t('NYSS Retrieve file'),
    'page callback' => 'nyss_civihooks_getfile',
    'access arguments' => array('export print production files'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $items;
}

function nyss_civihooks_perm() {

	return array('export print production files');
	
}

function nyss_civihooks_getfile() {
	
	civicrm_initialize( );
	require_once 'CRM/Core/Config.php';
	$config =& CRM_Core_Config::singleton();

	$file 	  = $_REQUEST['file'];
	$fullpath = $config->uploadDir.'printProduction/'.$file;
	//echo "fullpath: $fullpath file: $file";
//exit;	
	if ( !file_exists($fullpath) || !$file ) {
		echo "No file provided. Make sure you have entered the full URL.<br />";
		exit();
	}
	
	$headers = array ("Pragma: public",
					  "Expires: 0",
					  "Cache-Control: no-cache,must-revalidate, post-check=0, pre-check=0",
					  "Cache-Control: public",
					  "Content-Description: File Transfer",
					  "Content-Type: application/csv",
					  "Content-Disposition: attachment; filename=".basename($fullpath),
					  "Expires: Mon, 26 Jul 1997 05:00:00 GMT",
					  'Content-Length: '.filesize($fullpath)
					 );

	//don't use this, seems to cause problems...
	//file_transfer( $fullpath, $headers );

	//spit out the header
	foreach ($headers as $header) header($header);

        $fh = fopen($fullpath, "r");

        if (!$fh) {

                echo "no file provided. file requested is: $fullpath";
                exit;
        }

        while (!feof($fh)) {
              echo fread($fh, 1024);
              ob_flush();
        }
        fclose($fh);
}

function nyss_civihooks_civicrm_contactListQuery( &$query, $name, $context, $id ) {

//echo $query;

	//office staff group ID to use for activity assignees and case roles
	$groupID = '3';
	
	//LCD - limit activity assignees to office staff group
    if ( $context == 'activity_assignee' && $groupID ) {

		$query = str_replace("\n", " ", $query);
        $splitQuery = explode(" ",$query);
        $selectClause = $fromClause = $whereClause = $orderByClause = null ;
        $select = $from = $where = null;
        foreach( $splitQuery as $key => $value ) {
            if( !strcasecmp( $value , 'SELECT')) {
                continue;
            }
            if( !strcasecmp( $value , 'FROM')) {
                $select = true;
                continue;
            } 
            if( !strcasecmp( $value , 'WHERE')) { 
                $from = true;
                continue;
            }
            if( !strcasecmp( $value , 'ORDER')) { 
                $where = true;
            }
            if( !$select ) {
                $selectClause = $selectClause.' '.$value;
            } else if( !$from ) {
                $fromClause = $fromClause.' '.$value;
            } else if( !$where){
                $whereClause = $whereClause.' '.$value;
            } else {
                $orderByClause = $orderByClause.' '.$value;
            }
        }      

        $fromClause .= " INNER JOIN civicrm_group_contact cgc ON cgc.contact_id = cc.id ";
        $whereClause = " ($whereClause) AND cgc.group_id IN ($groupID) AND cgc.status = 'Added'";   
        $query = "SELECT $selectClause FROM $fromClause WHERE $whereClause $orderByClause";

    } elseif ( $context == 'caseview' && $groupID ) { //case roles
		$query = "SELECT id, data 
				  FROM (
				   	SELECT cc.id as id, CONCAT_WS( ' :: ', sort_name, email ) as data, sort_name
				   	FROM civicrm_contact cc 
					  LEFT JOIN civicrm_email eml ON ( cc.id = eml.contact_id AND eml.is_primary = 1 )  
					  LEFT JOIN civicrm_address sts ON ( cc.id = sts.contact_id AND sts.is_primary = 1 )
					  INNER JOIN civicrm_group_contact cgc ON cgc.contact_id = cc.id     
					WHERE sort_name LIKE '%$name%' 
					  AND cc.is_deleted = 0 
					  AND cgc.group_id IN ($groupID)
					  AND cgc.status = 'Added'
   					LIMIT 0, 10
     			  ) t
				  ORDER BY sort_name";
	}
	
    return $query;

}

function nyss_civihooks_civicrm_buildForm( $formName, &$form ) {

	//Limit case roles available to add new role dialog to only those that apply to cases
	if ( $formName=='CRM_Case_Form_CaseView' ) {

		$caserelationships = array( '13' => 'Case Manager is',
									'8'  => 'Case Coordinator is',
									'15' => 'Support Staff is',
									'14' => 'Non-District Staff is'
								  );
		$form->add('select', 'role_type',  ts( 'Relationship Type' ), array( '' => ts( '- select type -' ) ) + $caserelationships );

	}
	
	//Limit import file size to 1MB
	if ( $formName =='CRM_Import_Form_DataSource' ) {
		
		$uploadFileSize = 1048576;
        $uploadSize = round(($uploadFileSize / (1024*1024)), 2);
        $form->assign('uploadSize', $uploadSize);
		$form->add('file', 'uploadFile', ts('Import Data File'), 'size=30 maxlength=60', true);
        
		$form->setMaxFileSize($uploadFileSize);
        $form->addRule('uploadFile', ts('File size should be less than %1 MBytes (%2 bytes)', array(1 => $uploadSize, 2 => $uploadFileSize)), 'maxfilesize', $uploadFileSize);
        $form->addRule('uploadFile', ts('Input file must be in CSV format'), 'utf8File');
        $form->addRule('uploadFile', ts('A valid file must be uploaded.'), 'uploadedfile');
		$form->_rules['uploadFile'][1]['message'] = 'File size should be less than 1 MBytes (1048576 bytes)';

	}
	
	//Construct some arrays and values to be passed to the tag tab
	if ( $formName == 'CRM_Tag_Form_Tag' ) {
	
		$contactId = $form->getVar( '_entityID' );
		
		//Construct list of tags, comma-separated
		//CRM_Core_Error::debug($form);
		$contactTags = CRM_Core_BAO_EntityTag::getContactTags( $contactId );
        if ( !empty( $contactTags ) ) {
            $contactTagsList = implode( ', ', $contactTags );
        }
		$form->assign( 'contactTagsList', $contactTagsList );
		
		//Construct list of issue codes, comma-separated
		$contactIssueCodes = CRM_Core_BAO_EntityTag::getChildEntityTags( 291, $contactId );
        foreach ( $contactIssueCodes as $contactIssueCode ) {
			$contactIssueCode_item[] = $contactIssueCode['name'];
		}
		$contactIssueCode_list = implode( ', ', $contactIssueCode_item );
		$form->assign( 'contactIssueCode_list', $contactIssueCode_list );
		
		//Construct list of Legislative Positions
		$legpositions = CRM_Core_BAO_EntityTag::getChildEntityTagDetails( 292, $contactId );
		//CRM_Core_Error::debug($legpositions);
		foreach ( $legpositions as $legposition ) {
			if ( $legposition['description'] && $legposition['description'] != "No description available." ) {
				$legpos_description[] = $legposition['description'];
			}
		}
		$legpos_list = implode( ', ', $legpos_description );
		$form->assign( 'legpositions', $legpositions );
		$form->assign( 'legpos_description', $legpos_description );
		$form->assign( 'legpos_list', $legpos_list );
	
	}
	
	//set English as default preferred language
	if ( $formName == 'CRM_Contact_Form_Contact' ) {
		
		$defaults['preferred_language'] = 'en';
        $form->setDefaults( $defaults );
		
	}
	
} //close buildForm

function nyss_civihooks_civicrm_searchTasks( $objectType, &$tasks ) {
	
	unset($tasks[19]); //remove pdf letter creation task, #2284
	unset($tasks[24]); //remove delete permanently task, #2373
	
}

function nyss_civihooks_civicrm_pre( $op, $objectName, $objectId, &$objectRef ) {
	
	//NYSS #2729 strip line break
	if ( ( $op == 'edit' || $op == 'create' ) && 
		 ( $objectName == 'Individual' || $objectName == 'Organization' || $objectName == 'Household' ) ) {

		foreach ( $objectRef['email'] as $key => $block ) {
			if ( $block['signature_html'] == '<br />' ) {
				$objectRef['email'][$key]['signature_html'] = NULL;
			}
		}

	}
	
}

