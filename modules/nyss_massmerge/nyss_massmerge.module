<?php 

function nyss_massmerge_civicrm_merge( $type, &$data, $mainId = NULL, $otherId = NULL, $tables = NULL ) {

	switch( $type ) {
	
		case 'batch':
			_resolveConflicts( $data, $mainId, $otherId );
			break;
		
		case 'sqls':
			//log the merge against both records
			_logMerge( $mainId, $otherId );
			break;

		default:
	
	}
	
	return;
}

//helper to resolve some conflicts when in batch mode
function _resolveConflicts( &$data, $mainId, $otherId ) {

	$conflicts =& $data['fields_in_conflict'];
	$rows      =& $data['old_migration_info']['rows'];
	
	//if org names sans space/punctation are equal, merge
	if ( array_key_exists( 'move_organization_name', $conflicts ) ) {
		if ( _cleanVal($rows['move_organization_name']['main']) == 
		     _cleanVal($rows['move_organization_name']['other']) ) {
			//unset from the conflicts array
			//we don't know which value to retain, so we default to main
			unset($conflicts['move_organization_name']);
		}
	}
	
	//if external ids in conflict, just keep main value
	if ( array_key_exists( 'move_external_identifier', $conflicts ) ) {
		unset($conflicts['move_external_identifier']);
	}
	
	//if do not mail or do not email, uncheck value for retention and proceed with merge
	if ( array_key_exists( 'move_do_not_mail', $conflicts ) ) {
		$rows['move_do_not_mail']['main'] = $rows['move_do_not_mail']['other'] = 0;
		unset($conflicts['move_do_not_mail']);
	}
	if ( array_key_exists( 'move_do_not_email', $conflicts ) ) {
		$rows['move_do_not_email']['main'] = $rows['move_do_not_email']['other'] = 0;
		unset($conflicts['move_do_not_email']);
	}
	
	//if greeting in conflict and one is custom, retain formula option
	if ( array_key_exists( 'move_addressee', $conflicts ) ) {
		_fixGreeting( 'move_addressee', $rows, $conflicts );
	}
	if ( array_key_exists( 'move_email_greeting', $conflicts ) ) {
		_fixGreeting( 'move_email_greeting', $rows, $conflicts );
	}
	if ( array_key_exists( 'move_postal_greeting', $conflicts ) ) {
		_fixGreeting( 'move_postal_greeting', $rows, $conflicts );
	}	

} //_resolveConflicts

//helper to strip spaces and punctuation so we normalize comparison
function _cleanVal( $string ) {

	$string = preg_replace( '/[\W]+/', '', $string );
	$string = strtolower( $string );

	return $string;
} //_cleanVal

//helper to work out greeting field custom vs formula
function _fixGreeting( $gType, &$rows, &$conflicts ) {

	$gMain  =& $rows[$gType]['main'];
	$gOther =& $rows[$gType]['other'];

	//we only perform fixup if one is customized and the other is not
	if ( _isCustom($gMain) && !_isCustom($gOther) ) {
		$gMain = $gOther;
		unset($conflicts[$gType]);
	} elseif ( !_isCustom($gMain) && _isCustom($gOther) ) {
		$gOther = $gMain;
		unset($conflicts[$gType]);
	}
}

//determine if we have a custom greeting value
function _isCustom( $value ) {

	//if the value is 'Customized' or we don't have braces, then custom
	if ( $value == 'Customized' ||
	     !preg_match("/[\{\}]/", $value) ) {
		return true;
	} else {
		return false;
	}
}

function _logMerge( $mainId, $otherId ) {

	require_once 'CRM/Core/BAO/Log.php';
	
	$session = & CRM_Core_Session::singleton();
    $cid = $session->get('userID');
	
	$logParams = array( 'entity_table'  => 'civicrm_contact',
            	        'entity_id'     => $mainId,
            	        'modified_id'   => $cid,
            	        'modified_date' => date('YmdHis'),
            	        );
    
	$logMainMsg  = array( 'data' => "Contact $otherId was merged into this contact." );
	$logOtherMsg = array( 'data' => "Contact was merged into contact $mainId." );
	
	CRM_Core_BAO_Log::add( $logParams + $logMainMsg );
	CRM_Core_BAO_Log::add( $logParams + $logOtherMsg );
	
	return;
	
}

?>