<?php 

define( 'DEBUG', 1 );

function nyss_massmerge_civicrm_merge( $type, &$data, $mainId = NULL, $otherId = NULL, $tables = NULL ) {

    switch( $type ) {

        case 'batch':
            if ( !empty($data['fields_in_conflict']) ) {
                _resolveConflicts( $data, $mainId, $otherId );
            }
            break;

        case 'sqls':
            //log the merge against both records
            _logMerge( $mainId, $otherId );
            break;

        default:

    }

    return;
}

//helper to resolve some conflicts when in batch mode
function _resolveConflicts( &$data, $mainId, $otherId ) {

    _mD( 'data', $data, 2 );

    $conflicts =& $data['fields_in_conflict'];
    $rows      =& $data['old_migration_info']['rows'];

    //if org names sans space/punctation are equal, merge
    if ( array_key_exists( 'move_organization_name', $conflicts ) ) {
        if ( _cleanVal($rows['move_organization_name']['main']) == 
             _cleanVal($rows['move_organization_name']['other']) ) {
            //unset from the conflicts array
            //we don't know which value to retain, so we default to main
            unset($conflicts['move_organization_name']);
        }
    }

    //if external ids in conflict, just keep main value
    if ( array_key_exists( 'move_external_identifier', $conflicts ) ) {
        unset($conflicts['move_external_identifier']);
    }

    //if do not mail or do not email, uncheck value for retention and proceed with merge
    if ( array_key_exists( 'move_do_not_mail', $conflicts ) ) {
        $rows['move_do_not_mail']['main'] = $rows['move_do_not_mail']['other'] = 0;
        unset($conflicts['move_do_not_mail']);
    }
    if ( array_key_exists( 'move_do_not_email', $conflicts ) ) {
        $rows['move_do_not_email']['main'] = $rows['move_do_not_email']['other'] = 0;
        unset($conflicts['move_do_not_email']);
    }

    //if greeting in conflict and one is custom, retain formula option
    if ( array_key_exists( 'move_addressee', $conflicts ) ) {
        _fixGreeting( 'move_addressee', $rows, $conflicts, $data );
    }
    if ( array_key_exists( 'move_email_greeting', $conflicts ) ) {
        _fixGreeting( 'move_email_greeting', $rows, $conflicts, $data );
    }
    if ( array_key_exists( 'move_postal_greeting', $conflicts ) ) {
        _fixGreeting( 'move_postal_greeting', $rows, $conflicts, $data );
    }
    if ( array_key_exists( 'move_addressee_custom', $conflicts ) ) {
        _fixGreeting( 'move_addressee_custom', $rows, $conflicts, $data );
    }

    //if case insensitive fname/mname/lname match or value sans space matches, 
    //try to find mixed case and retain
    if ( array_key_exists( 'move_last_name', $conflicts ) ) {
        _fixName( 'move_last_name', $rows, $conflicts );
    }
    if ( array_key_exists( 'move_first_name', $conflicts ) ) {
        _fixName( 'move_first_name', $rows, $conflicts );
    }
    if ( array_key_exists( 'move_middle_name', $conflicts ) ) {
        _fixName( 'move_middle_name', $rows, $conflicts );
    }

    //if one record type is BOE, retain above other values
    if ( array_key_exists( 'move_custom_61', $conflicts ) ) {
        _fixRT( $rows, $conflicts );
    }

    _mD('post-processed rows', $rows, 2);
    _mD('post-processed data', $data, 2);

    //let's log any remaining conflicts for later review
    if ( !empty($conflicts) ) {
        $conflictDetails = array();
        foreach ( $conflicts as $fld => $dontcare ) {
            $conflictDetails[$fld] = array ( 'mainId'         => $mainId,
                                             'mainId value'   => $rows[$fld]['main'],
                                             'otherId'        => $otherId,
                                             'otherId value'  => $rows[$fld]['other'],
                                             );
        }
        _mD('merge conflict details', $conflictDetails);
    }

    return;

} //_resolveConflicts

//helper to strip spaces and punctuation so we normalize comparison
function _cleanVal( $string ) {

    $string = preg_replace( '/[\W]+/', '', $string );
    $string = strtolower( $string );

    return $string;
} //_cleanVal

//helper to work out greeting field custom vs formula
function _fixGreeting( $gType, &$rows, &$conflicts, &$data ) {

    $gMain  =& $rows[$gType]['main'];
    $gOther =& $rows[$gType]['other'];

    //first perform fixup if one is customized and the other is not
    if ( _isCustom($gMain) && !_isCustom($gOther) ) {
        $gMain = $gOther;
        unset($conflicts[$gType]);
        return;
    } elseif ( !_isCustom($gMain) && _isCustom($gOther) ) {
        $gOther = $gMain;
        unset($conflicts[$gType]);
        return;
    }

    //we know at this point that the values conflict and one is not a formula
    //the other value could be a Dear Friend(s) selection
    //we will retain the custom value as it's more likely to be a meaningful value
    if ( $gMain == 'Customized' ) {

        $gOther = $gMain;
        $rows[$gType.'_custom']['other'] = $rows[$gType.'_custom']['main'];
        unset($conflicts[$gType]);
        return;

    } elseif ( $gOther == 'Customized' ) {

        $gMain = $gOther;
        $rows[$gType.'_custom']['main'] = $rows[$gType.'_custom']['other'];
        unset($conflicts[$gType]);
        return;
    }

    //another scenario is where values are customized and variance is
    //due to other field values used to construct a cached value
    //consider middle initial:
    if ( isset($rows['move_middle_name']) &&
         strpos($gType, '_custom') &&
         $rows['move_middle_name']['main'] != $rows['move_middle_name']['other'] ) {

        if ( strlen($rows[$gType]['main']) > strlen($rows[$gType]['other']) ) {
            $rows[$gType]['other'] = $rows[$gType]['main'];
        } else {
            $rows[$gType]['main']  = $rows[$gType]['other'];
        }

        _mD("custom greeting conflicted. retained: ", $rows[$gType]['main'], 2);
        unset($conflicts[$gType]);
        return;
    }

    return;
}

//helper to clean up and compare name fields
//our algorithms will give preference to the main value
function _fixName( $name, &$rows, &$conflicts ) {

    $nMain   =& $rows[$name]['main'];
    $nOther  =& $rows[$name]['other'];
    $mWeight = $oWeight = 0;

    //first find if we have a cleaned match, else return
    if ( _cleanVal($nMain) != _cleanVal($nOther) ) {
        return;
    }

    //determine if mixed case +1
    if ( $nMain != strtolower($nMain) &&
         $nMain != strtoupper($nMain) ) {

        $mWeight++;
        _mD('nMain is mixed case', $nMain, 2);
    } 
    if ( $nOther != strtolower($nOther) &&
         $nOther != strtoupper($nOther) ) {

        $oWeight++;
        _mD('nOther is mixed case', $nOther, 2);
    }

    //determine if value has spaces -1
    if ( !preg_match("/\s/", $nMain) ) {
        $mWeight++;
        _mD('nMain has no spaces', $nMain, 2);
    }
    if ( !preg_match("/\s/", $nOther) ) {
        $oWeight++;
        _mD('nOther has no spaces', $nOther, 2);
    }

    //determine if value has punctuation +1
    if ( preg_match("/\p{P}/", $nMain) ) {
        $mWeight++;
        _mD('nMain has punctuation', $nMain, 2);
    }
    if ( preg_match("/\p{P}/", $nOther) ) {
        $oWeight++;
        _mD('nOther has punctuation', $nOther, 2);
    }

    //take value with greater weight and set other to match
    if ( $mWeight >= $oWeight ) {
        $nOther = $nMain;
    } else {
        $nMain = $nOther;
    }

    //unset element from conflict
    _mD("$name value retained:", $nMain, 2);
    unset($conflicts[$name]);
} //_fixName

//if either of the RT values is Board of Election, set and merge
function _fixRT( &$rows, &$conflicts ) {

    $rtMain  =& $rows['move_custom_61']['main'];
    $rtOther =& $rows['move_custom_61']['other'];

    if ( $rtMain == 'Board of Election' ||
         $rtOther == 'Board of Election' ) {

        $rtMain = $rtOther = 'Board of Election';
        unset($conflicts['move_custom_61']);
    }
} //_fixRT

//determine if we have a custom greeting value
function _isCustom( $value ) {

    //if the value is 'Customized' or we don't have braces, then custom
    if ( $value == 'Customized' ||
         !preg_match("/[\{\}]/", $value) ) {
        return true;
    } else {
        return false;
    }
}

function _logMerge( $mainId, $otherId ) {

    $session =& CRM_Core_Session::singleton();
    $cid     = $session->get('userID');
    $date    = date('YmdHis');

    //handle with straight sql as it's faster than using the BAO
    $sql = "INSERT INTO civicrm_log ( entity_table, entity_id, data, modified_id, modified_date ) VALUES
            ( 'civicrm_contact', $mainId, 'Contact $otherId was merged into this contact.', $cid, $date ),
            ( 'civicrm_contact', $otherId, 'Contact was merged into contact $mainId.', $cid, $date )";
    CRM_Core_DAO::executeQuery($sql);

	return;
}

//allows us to condition all logging based on a constant
function _mD( $msg, $var, $level = 1 ) {

    if ( $level <= DEBUG ) {
        CRM_Core_Error::debug_var( $msg, $var );
    }

    return;
} //_mD
