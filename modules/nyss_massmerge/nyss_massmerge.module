<?php 

define('DEBUG', 1);

function nyss_massmerge_civicrm_merge($type, &$data, $mainId = NULL, $otherId = NULL, $tables = NULL) {
  /*Civi::log()->debug('nyss_massmerge_civicrm_merge', array(
    'type' => $type,
    'data' => $data,
    'mainId' => $mainId,
    'otherId' => $otherId,
    'tables' => $tables,
  ));*/

  switch($type) {
    case 'batch':
      if (!empty($data['fields_in_conflict'])) {
        _resolveConflicts($data, $mainId, $otherId);
      }
      _mD('post-processed batch data', $data, 2);
      break;

    case 'sqls':
      //log the merge against the retained record
      _logMerge($mainId, $otherId);
      break;

    default:
  }
  return;
}

/**
 * @param $data
 * @param $mainId
 * @param $otherId
 *
 * helper to resolve some conflicts when in batch mode
 *
 * $conflicts =& $data['fields_in_conflict'] = list of fields in conflict
 * $rows =& $data['migration_info']['rows'] = list of all fields with main/other vals
 *
 * options for altering data:
 * 1. set $conflicts = NEW VALUE
 * 2. unset($conflicts[field]) = remove conflict (proceed without concern)
 * 3. set $rows[field]
 * 3. unset($conflicts[field]) && $data[migration_info][main_details] = NEW VALUE
 *    - remove conflict and fix value
 */
function _resolveConflicts(&$data, $mainId, $otherId) {
  _mD('data', $data, 2);

  $conflicts =& $data['fields_in_conflict'];
  $rows =& $data['migration_info']['rows'];

  //if org names sans space/punctation are equal, merge
  if (array_key_exists('move_organization_name', $conflicts)) {
    if (_cleanVal($rows['move_organization_name']['main']) ==
      _cleanVal($rows['move_organization_name']['other'])
    ) {
      //unset from the conflicts array
      //we don't know which value to retain, so we default to main
      unset($conflicts['move_organization_name']);
    }
  }

  //if job_title sans space/punctation are equal, merge
  if (array_key_exists('move_job_title', $conflicts)) {
    if (_cleanVal($rows['move_job_title']['main']) ==
      _cleanVal($rows['move_job_title']['other'])
    ) {
      //unset from the conflicts array
      //we don't know which value to retain, so we default to main
      unset($conflicts['move_job_title']);
    }
  }

  //if external ids in conflict, just keep main value
  if (array_key_exists('move_external_identifier', $conflicts)) {
    unset($conflicts['move_external_identifier']);
  }

  //if do not mail/do not email/do not trade, uncheck value for retention and proceed with merge
  if (array_key_exists('move_do_not_mail', $conflicts)) {
    $conflicts['move_do_not_mail'] = 0;
  }
  if (array_key_exists('move_do_not_email', $conflicts)) {
    $conflicts['move_do_not_email'] = 0;
  }
  if (array_key_exists('move_do_not_trade', $conflicts)) {
    $conflicts['move_do_not_trade'] = 0;
  }

  //if opt-out, set to yes
  if (array_key_exists('move_is_opt_out', $conflicts)) {
    $conflicts['move_is_opt_out'] = 1;
  }

  //if greeting in conflict and one is custom, retain formula option
  if (array_key_exists('move_addressee', $conflicts)) {
    _fixGreeting('move_addressee', $rows, $conflicts, $data);
  }
  if (array_key_exists('move_email_greeting', $conflicts)) {
    _fixGreeting('move_email_greeting', $rows, $conflicts, $data);
  }
  if (array_key_exists('move_postal_greeting', $conflicts)) {
    _fixGreeting('move_postal_greeting', $rows, $conflicts, $data);
  }
  if (array_key_exists('move_addressee_custom', $conflicts)) {
    _fixGreeting('move_addressee_custom', $rows, $conflicts, $data);
  }

  //if case insensitive fname/mname/lname match or value sans space matches,
  //try to find mixed case and retain
  if (array_key_exists('move_last_name', $conflicts)) {
    _fixName('move_last_name', $rows, $conflicts);
  }
  if (array_key_exists('move_first_name', $conflicts)) {
    _fixName('move_first_name', $rows, $conflicts);
  }
  if (array_key_exists('move_middle_name', $conflicts)) {
    _fixName('move_middle_name', $rows, $conflicts);
  }

  //if one record type is BOE, retain above other values
  if (array_key_exists('move_custom_61', $conflicts)) {
    _fixRT($data, $conflicts);
  }

  //11494 select later value for BOE date of registration
  if (array_key_exists('move_custom_24', $conflicts)) {
    if (strtotime($rows['move_custom_24']['other']) > strtotime($rows['move_custom_24']['main'])) {
      $conflicts['move_custom_24'] = $rows['move_custom_24']['other'];
    }
    else {
      $conflicts['move_custom_24'] = $rows['move_custom_24']['main'];
    }
  }

  //11494 if move_location_address_0 sans space/punctation are equal, merge
  if (array_key_exists('move_location_address_0', $conflicts)) {
    //_mD('move_location_address_0 rows', $rows);
    if (_cleanVal($rows['move_location_address_0']['main']) ==
      _cleanVal($rows['move_location_address_0']['other'])
    ) {
      unset($conflicts['move_location_address_0']);
    }
    else {
      //TODO do more intelligent comparison of values; specifically postal +4
    }
  }

  //if contact source custom field conflicts and one or other is BOE, retain that
  if (array_key_exists('move_custom_60', $conflicts) &&
    ($rows['move_custom_60']['main'] == 'BOE' || $rows['move_custom_60']['other'] == 'BOE')
  ) {
    $rows['move_custom_60']['main'] =
      $rows['move_custom_60']['other'] =
      $conflicts['move_custom_60'] = 'BOE';
  }

  //phone blocks
  _fixLocationBlocks($data, 'phone');

  //email blocks
  _fixLocationBlocks($data, 'email');

  //TODO IM?

  //let's log any remaining conflicts for later review
  if (in_array(NULL, $conflicts, TRUE)) {
    $conflictDetails = array();
    foreach ($conflicts as $fld => $value) {
      if ($value === NULL) {
        $conflictDetails[$fld] = array(
          'mainId' => $mainId,
          'mainId value' => $rows[$fld]['main'],
          'otherId' => $otherId,
          'otherId value' => $rows[$fld]['other'],
        );
      }
      else {
        $conflictDetails[$fld] = "Mergeable to: $value";
      }
    }
    _mD('merge conflict details', $conflictDetails);
  }

  return;

} //_resolveConflicts

//helper to strip spaces and punctuation so we normalize comparison
function _cleanVal($string) {

  $string = preg_replace('/[\W]+/', '', $string);
  $string = strtolower($string);

  return $string;
} //_cleanVal

//helper to work out greeting field custom vs formula
function _fixGreeting($gType, &$rows, &$conflicts, &$data) {

  $gMain =& $rows[$gType]['main'];
  $gOther =& $rows[$gType]['other'];

    //check if casing/punctuation is only difference
	if (_cleanVal($gMain) == _cleanVal($gOther)) {
    //unset from the conflicts array
    unset($conflicts[$gType]);
    return;
  }

  //perform fixup if one is customized and the other is not
  if (_isCustom($gMain) && !_isCustom($gOther)) {
    $conflicts[$gType] = $gOther;
    return;
  }
  elseif (!_isCustom($gMain) && _isCustom($gOther)) {
    $conflicts[$gType] = $gMain;
    return;
  }

  //we know at this point that the values conflict and one is not a formula
  //the other value could be a Dear Friend(s) selection
  //we will retain the custom value as it's more likely to be a meaningful value
  if ($gMain == 'Customized') {
    $conflicts[$gType] = $gMain;
    $conflicts[$gType.'_custom'] = $rows[$gType.'_custom']['main'];
    return;
  }
  elseif ($gOther == 'Customized') {
    $conflicts[$gType] = $gOther;
    $conflicts[$gType.'_custom'] = $rows[$gType.'_custom']['other'];
    return;
  }

  //another scenario is where values are customized and variance is
  //due to other field values used to construct a cached value
  //consider middle initial:
  if (isset($rows['move_middle_name']) &&
    strpos($gType, '_custom') &&
    $rows['move_middle_name']['main'] != $rows['move_middle_name']['other']
  ) {

    if (strlen($rows[$gType]['main']) > strlen($rows[$gType]['other'])) {
      $conflicts[$gType] = $rows[$gType]['main'];
    }
    else {
      $conflicts[$gType] = $rows[$gType]['other'];
    }

    _mD("custom greeting conflicted. retained: ", $rows[$gType]['main'], 2);
    return;
  }

  return;
}

//helper to clean up and compare name fields
//our algorithms will give preference to the main value
function _fixName($name, &$rows, &$conflicts) {
  $nMain = $rows[$name]['main'];
  $nOther = $rows[$name]['other'];
  $mWeight = $oWeight = 0;

  //first find if we have a cleaned match, else return
  if (_cleanVal($nMain) != _cleanVal($nOther)) {
    return;
  }

  //determine if mixed case +1
  if ($nMain != strtolower($nMain) &&
    $nMain != strtoupper($nMain)
  ) {
    $mWeight++;
    _mD('nMain is mixed case', $nMain, 2);
  }
  if ($nOther != strtolower($nOther) &&
    $nOther != strtoupper($nOther)
  ) {
    $oWeight++;
    _mD('nOther is mixed case', $nOther, 2);
  }

  //determine if value has spaces -1
  if (!preg_match("/\s/", $nMain)) {
    $mWeight++;
    _mD('nMain has no spaces', $nMain, 2);
  }
  if (!preg_match("/\s/", $nOther)) {
    $oWeight++;
    _mD('nOther has no spaces', $nOther, 2);
  }

  //determine if value has punctuation +1
  if (preg_match("/\p{P}/", $nMain)) {
    $mWeight++;
    _mD('nMain has punctuation', $nMain, 2);
  }
  if (preg_match("/\p{P}/", $nOther)) {
    $oWeight++;
    _mD('nOther has punctuation', $nOther, 2);
  }

  //take value with greater weight and set other to match
  if ($oWeight > $mWeight) {
    $nMain = $nOther;
  }

  //update element in conflict array
  _mD("$name value retained:", $nMain, 2);
  $conflicts[$name] = $nMain;

  return;
} //_fixName

//if either of the RT values is Board of Election, set and merge
function _fixRT(&$data, &$conflicts) {
  $rows =& $data['migration_info']['rows'];
  $rtMain = $rows['move_custom_61']['main'];
  $rtOther = $rows['move_custom_61']['other'];
  //_mD("rtOther", $rtOther, 2);
  //_mD("rtMain", $rtMain, 2);

  if ($rtMain == 'Board of Election' ||
    $rtOther == 'Board of Election'
  ) {
    $conflicts['move_custom_61'] = 1; //value for BOE record type option
  }
  else {
    //compare modified date to determine which is more recent
    try {
      $mainModified = civicrm_api3('contact', 'getvalue', [
        'id' => $data['migration_info']['main_details']['contact_id'],
        'return' => 'modified_date',
      ]);
      $otherModified = civicrm_api3('contact', 'getvalue', [
        'id' => $data['migration_info']['other_details']['contact_id'],
        'return' => 'modified_date',
      ]);
      $recordTypeOpts = civicrm_api3('contact', 'getoptions',
        array('field' => 'custom_61'));
      //_mD("mainModified: $mainModified", strtotime($mainModified), 2);
      //_mD("otherModified: $otherModified", strtotime($otherModified), 2);
      //_mD("recordTypeOpts", $recordTypeOpts, 2);

      if (strtotime($otherModified) > strtotime($mainModified)) {
        $conflicts['move_custom_61'] = array_search($rtOther, $recordTypeOpts['values']);
      }
      else {
        $conflicts['move_custom_61'] = array_search($rtMain, $recordTypeOpts['values']);
      }
    }
    catch (CiviCRM_API3_Exception $e) {}
  }
} //_fixRT

/**
 * @param $data
 * @param $type
 *
 * helper to resolve phone/email blocks
 */
function _fixLocationBlocks(&$data, $type) {
  $blocks = array(
    "move_location_{$type}_0",
    "move_location_{$type}_1",
    "move_location_{$type}_2",
    "move_location_{$type}_3",
  );
  foreach ($blocks as $block) {
    if (array_key_exists($block, $data['fields_in_conflict'])) {
      $rows =& $data['migration_info']['rows'];

      //if they are equal, unset conflict
      if (_cleanVal($rows[$block]['mainId value']) ==
        _cleanVal($rows[$block]['otherId value'])
      ) {
        unset($data['fields_in_conflict'][$block]);
      }
      //if not equal, append Other phone block to Main
      else {
        //split block key so we know the key
        $blockParts = explode('_', $block);

        //add other block to main
        $data['migration_info']['main_details']['location_blocks'][$type][] =
          $data['migration_info']['other_details']['location_blocks'][$type][$blockParts[3]];

        //unset conflict so we can proceed
        unset($data['fields_in_conflict'][$block]);
      }
    }
  }
}

//determine if we have a custom greeting value
function _isCustom($value) {
  //if the value is 'Customized' or we don't have braces, then custom
  if ($value == 'Customized' ||
    !preg_match("/[\{\}]/", $value)) {
    return true;
  }
  else {
    return false;
  }
}

function _logMerge($mainId, $otherId) {
  $session = CRM_Core_Session::singleton();
  $cid = $session->get('userID');
  $date = date('YmdHis');

  //handle with straight sql as it's faster than using the BAO
  $sql = "
    INSERT INTO civicrm_log (entity_table, entity_id, data, modified_id, modified_date) 
    VALUES
    ('civicrm_contact', $mainId, 'Contact $otherId was merged into this contact ($mainId).', $cid, $date)
  ";
  CRM_Core_DAO::executeQuery($sql);

  return;
}

//allows us to condition all logging based on a constant
function _mD($msg, $var, $level = 1) {
  if ($level <= DEBUG) {
    CRM_Core_Error::debug_var($msg, $var, true, true, 'merge');
  }

  return;
} //_mD
